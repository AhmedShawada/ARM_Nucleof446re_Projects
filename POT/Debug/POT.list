
POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003890  08003890  00004890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080038e4  080038e4  000048e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080038ec  080038ec  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038ec  080038ec  000048ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038f0  080038f0  000048f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080038f4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000005c  08003950  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08003950  00005290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009849  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cb  00000000  00000000  0000e8d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  000102a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000635  00000000  00000000  00010ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226c2  00000000  00000000  000110f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b09c  00000000  00000000  000337b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5225  00000000  00000000  0003e853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002550  00000000  00000000  00113abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0011600c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003878 	.word	0x08003878

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003878 	.word	0x08003878

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fb23 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f869 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f955 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f929 	bl	8000854 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000602:	f000 f8d5 	bl	80007b0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int total = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]

	  // 🧪 قراءة 3 مرات
	  for (int i = 0; i < 5; i++)
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	e031      	b.n	8000674 <main+0x88>
	  {
		  HAL_ADC_Start(&hadc1);
 8000610:	4828      	ldr	r0, [pc, #160]	@ (80006b4 <main+0xc8>)
 8000612:	f000 fbed 	bl	8000df0 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000616:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800061a:	4826      	ldr	r0, [pc, #152]	@ (80006b4 <main+0xc8>)
 800061c:	f000 fced 	bl	8000ffa <HAL_ADC_PollForConversion>
		  readValue = HAL_ADC_GetValue(&hadc1);
 8000620:	4824      	ldr	r0, [pc, #144]	@ (80006b4 <main+0xc8>)
 8000622:	f000 fd75 	bl	8001110 <HAL_ADC_GetValue>
 8000626:	4603      	mov	r3, r0
 8000628:	b21a      	sxth	r2, r3
 800062a:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <main+0xcc>)
 800062c:	801a      	strh	r2, [r3, #0]
		  sprintf(buffer, "%d\r\n", readValue);
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <main+0xcc>)
 8000630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000634:	461a      	mov	r2, r3
 8000636:	4921      	ldr	r1, [pc, #132]	@ (80006bc <main+0xd0>)
 8000638:	4821      	ldr	r0, [pc, #132]	@ (80006c0 <main+0xd4>)
 800063a:	f002 fc7d 	bl	8002f38 <siprintf>
		  	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800063e:	4820      	ldr	r0, [pc, #128]	@ (80006c0 <main+0xd4>)
 8000640:	f7ff fde6 	bl	8000210 <strlen>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	491c      	ldr	r1, [pc, #112]	@ (80006c0 <main+0xd4>)
 800064e:	481d      	ldr	r0, [pc, #116]	@ (80006c4 <main+0xd8>)
 8000650:	f002 f8b6 	bl	80027c0 <HAL_UART_Transmit>
		  HAL_ADC_Stop(&hadc1);
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0xc8>)
 8000656:	f000 fc9d 	bl	8000f94 <HAL_ADC_Stop>

		  total += readValue;
 800065a:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <main+0xcc>)
 800065c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000660:	461a      	mov	r2, r3
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]

		  HAL_Delay(10);  // تأخير بسيط بين كل قراءة
 8000668:	200a      	movs	r0, #10
 800066a:	f000 fb59 	bl	8000d20 <HAL_Delay>
	  for (int i = 0; i < 5; i++)
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	3301      	adds	r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	2b04      	cmp	r3, #4
 8000678:	ddca      	ble.n	8000610 <main+0x24>
	  }

	  int average = total / 5;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <main+0xdc>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1052      	asrs	r2, r2, #1
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	607b      	str	r3, [r7, #4]

	  // ⚙️ تحويله إلى مدى [-50, +50]

	  sprintf(buffer, "%d\r\n", average);
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	490b      	ldr	r1, [pc, #44]	@ (80006bc <main+0xd0>)
 800068e:	480c      	ldr	r0, [pc, #48]	@ (80006c0 <main+0xd4>)
 8000690:	f002 fc52 	bl	8002f38 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000694:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <main+0xd4>)
 8000696:	f7ff fdbb 	bl	8000210 <strlen>
 800069a:	4603      	mov	r3, r0
 800069c:	b29a      	uxth	r2, r3
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	4907      	ldr	r1, [pc, #28]	@ (80006c0 <main+0xd4>)
 80006a4:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <main+0xd8>)
 80006a6:	f002 f88b 	bl	80027c0 <HAL_UART_Transmit>

	  HAL_Delay(500);
 80006aa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ae:	f000 fb37 	bl	8000d20 <HAL_Delay>
  {
 80006b2:	e7a8      	b.n	8000606 <main+0x1a>
 80006b4:	20000078 	.word	0x20000078
 80006b8:	20000108 	.word	0x20000108
 80006bc:	08003890 	.word	0x08003890
 80006c0:	2000010c 	.word	0x2000010c
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	66666667 	.word	0x66666667

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	2234      	movs	r2, #52	@ 0x34
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fc4e 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b2c      	ldr	r3, [pc, #176]	@ (80007a8 <SystemClock_Config+0xdc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	4a2b      	ldr	r2, [pc, #172]	@ (80007a8 <SystemClock_Config+0xdc>)
 80006fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <SystemClock_Config+0xdc>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070c:	2300      	movs	r3, #0
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <SystemClock_Config+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	@ (80007ac <SystemClock_Config+0xe0>)
 8000716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b23      	ldr	r3, [pc, #140]	@ (80007ac <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000740:	23b4      	movs	r3, #180	@ 0xb4
 8000742:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fd45 	bl	80021e4 <HAL_RCC_OscConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000760:	f000 f910 	bl	8000984 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000764:	f001 f9a4 	bl	8001ab0 <HAL_PWREx_EnableOverDrive>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800076e:	f000 f909 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000776:	2302      	movs	r3, #2
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000784:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000788:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078a:	f107 0308 	add.w	r3, r7, #8
 800078e:	2105      	movs	r1, #5
 8000790:	4618      	mov	r0, r3
 8000792:	f001 f9dd 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800079c:	f000 f8f2 	bl	8000984 <Error_Handler>
  }
}
 80007a0:	bf00      	nop
 80007a2:	3750      	adds	r7, #80	@ 0x50
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c2:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <MX_ADC1_Init+0x9c>)
 80007c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007de:	2201      	movs	r2, #1
 80007e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007f2:	4a17      	ldr	r2, [pc, #92]	@ (8000850 <MX_ADC1_Init+0xa0>)
 80007f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f6:	4b14      	ldr	r3, [pc, #80]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_ADC1_Init+0x98>)
 800080c:	2201      	movs	r2, #1
 800080e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000812:	f000 faa9 	bl	8000d68 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f8b2 	bl	8000984 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082c:	463b      	mov	r3, r7
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	@ (8000848 <MX_ADC1_Init+0x98>)
 8000832:	f000 fc7b 	bl	800112c <HAL_ADC_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 f8a2 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000078 	.word	0x20000078
 800084c:	40012000 	.word	0x40012000
 8000850:	0f000001 	.word	0x0f000001

08000854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800085a:	4a12      	ldr	r2, [pc, #72]	@ (80008a4 <MX_USART2_UART_Init+0x50>)
 800085c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USART2_UART_Init+0x4c>)
 800088c:	f001 ff48 	bl	8002720 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000896:	f000 f875 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000c0 	.word	0x200000c0
 80008a4:	40004400 	.word	0x40004400

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a25      	ldr	r2, [pc, #148]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000978 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a1e      	ldr	r2, [pc, #120]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b1c      	ldr	r3, [pc, #112]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <MX_GPIO_Init+0xd0>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2120      	movs	r1, #32
 8000932:	4812      	ldr	r0, [pc, #72]	@ (800097c <MX_GPIO_Init+0xd4>)
 8000934:	f001 f8a2 	bl	8001a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000938:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800093c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800093e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_GPIO_Init+0xd8>)
 8000950:	f000 ff00 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_GPIO_Init+0xd4>)
 800096c:	f000 fef2 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	@ 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40023800 	.word	0x40023800
 800097c:	40020000 	.word	0x40020000
 8000980:	40020800 	.word	0x40020800

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	@ (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ce:	2007      	movs	r0, #7
 80009d0:	f000 fe8c 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a17      	ldr	r2, [pc, #92]	@ (8000a5c <HAL_ADC_MspInit+0x7c>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d127      	bne.n	8000a52 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b16      	ldr	r3, [pc, #88]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b13      	ldr	r3, [pc, #76]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_ADC_MspInit+0x80>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0314 	add.w	r3, r7, #20
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <HAL_ADC_MspInit+0x84>)
 8000a4e:	f000 fe81 	bl	8001754 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	@ 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40012000 	.word	0x40012000
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000

08000a68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_UART_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a10      	ldr	r2, [pc, #64]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <HAL_UART_MspInit+0x8c>)
 8000ade:	f000 fe39 	bl	8001754 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f8c7 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	@ (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f002 fa00 	bl	8002f8c <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	20000140 	.word	0x20000140
 8000bc0:	20000290 	.word	0x20000290

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 f9bf 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fce7 	bl	80005ec <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c2c:	080038f4 	.word	0x080038f4
  ldr r2, =_sbss
 8000c30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c34:	20000290 	.word	0x20000290

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 fd41 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe8e 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fd4b 	bl	800173a <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 fd21 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	20000144 	.word	0x20000144

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000144 	.word	0x20000144

08000d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d28:	f7ff ffee 	bl	8000d08 <HAL_GetTick>
 8000d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d38:	d005      	beq.n	8000d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <HAL_Delay+0x44>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4413      	add	r3, r2
 8000d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d46:	bf00      	nop
 8000d48:	f7ff ffde 	bl	8000d08 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d8f7      	bhi.n	8000d48 <HAL_Delay+0x28>
  {
  }
}
 8000d58:	bf00      	nop
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d70:	2300      	movs	r3, #0
 8000d72:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e033      	b.n	8000de6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d109      	bne.n	8000d9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe2a 	bl	80009e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f003 0310 	and.w	r3, r3, #16
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d118      	bne.n	8000dd8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000dae:	f023 0302 	bic.w	r3, r3, #2
 8000db2:	f043 0202 	orr.w	r2, r3, #2
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f000 fae8 	bl	8001390 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dca:	f023 0303 	bic.w	r3, r3, #3
 8000dce:	f043 0201 	orr.w	r2, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000dd6:	e001      	b.n	8000ddc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Start+0x1a>
 8000e06:	2302      	movs	r3, #2
 8000e08:	e0b2      	b.n	8000f70 <HAL_ADC_Start+0x180>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d018      	beq.n	8000e52 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0201 	orr.w	r2, r2, #1
 8000e2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e30:	4b52      	ldr	r3, [pc, #328]	@ (8000f7c <HAL_ADC_Start+0x18c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a52      	ldr	r2, [pc, #328]	@ (8000f80 <HAL_ADC_Start+0x190>)
 8000e36:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3a:	0c9a      	lsrs	r2, r3, #18
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	4413      	add	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e44:	e002      	b.n	8000e4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f9      	bne.n	8000e46 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d17a      	bne.n	8000f56 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e68:	f023 0301 	bic.w	r3, r3, #1
 8000e6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e9e:	d106      	bne.n	8000eae <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea4:	f023 0206 	bic.w	r2, r3, #6
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ebc:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <HAL_ADC_Start+0x194>)
 8000ebe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ec8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 031f 	and.w	r3, r3, #31
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d12a      	bne.n	8000f2c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2b      	ldr	r2, [pc, #172]	@ (8000f88 <HAL_ADC_Start+0x198>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d015      	beq.n	8000f0c <HAL_ADC_Start+0x11c>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a29      	ldr	r2, [pc, #164]	@ (8000f8c <HAL_ADC_Start+0x19c>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d105      	bne.n	8000ef6 <HAL_ADC_Start+0x106>
 8000eea:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <HAL_ADC_Start+0x194>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <HAL_ADC_Start+0x1a0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d136      	bne.n	8000f6e <HAL_ADC_Start+0x17e>
 8000f00:	4b20      	ldr	r3, [pc, #128]	@ (8000f84 <HAL_ADC_Start+0x194>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d130      	bne.n	8000f6e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d129      	bne.n	8000f6e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	e020      	b.n	8000f6e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_ADC_Start+0x198>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d11b      	bne.n	8000f6e <HAL_ADC_Start+0x17e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d114      	bne.n	8000f6e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	e00b      	b.n	8000f6e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f043 0210 	orr.w	r2, r3, #16
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	f043 0201 	orr.w	r2, r3, #1
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	431bde83 	.word	0x431bde83
 8000f84:	40012300 	.word	0x40012300
 8000f88:	40012000 	.word	0x40012000
 8000f8c:	40012100 	.word	0x40012100
 8000f90:	40012200 	.word	0x40012200

08000f94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Stop+0x16>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e021      	b.n	8000fee <HAL_ADC_Stop+0x5a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2201      	movs	r2, #1
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0201 	bic.w	r2, r2, #1
 8000fc0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd8:	f023 0301 	bic.w	r3, r3, #1
 8000fdc:	f043 0201 	orr.w	r2, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b084      	sub	sp, #16
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001016:	d113      	bne.n	8001040 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001026:	d10b      	bne.n	8001040 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f043 0220 	orr.w	r2, r3, #32
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e063      	b.n	8001108 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001040:	f7ff fe62 	bl	8000d08 <HAL_GetTick>
 8001044:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001046:	e021      	b.n	800108c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104e:	d01d      	beq.n	800108c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_ADC_PollForConversion+0x6c>
 8001056:	f7ff fe57 	bl	8000d08 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	683a      	ldr	r2, [r7, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d212      	bcs.n	800108c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b02      	cmp	r3, #2
 8001072:	d00b      	beq.n	800108c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f043 0204 	orr.w	r2, r3, #4
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e03d      	b.n	8001108 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b02      	cmp	r3, #2
 8001098:	d1d6      	bne.n	8001048 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f06f 0212 	mvn.w	r2, #18
 80010a2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d123      	bne.n	8001106 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d11f      	bne.n	8001106 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010cc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d111      	bne.n	8001106 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d105      	bne.n	8001106 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f043 0201 	orr.w	r2, r3, #1
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x1c>
 8001144:	2302      	movs	r3, #2
 8001146:	e113      	b.n	8001370 <HAL_ADC_ConfigChannel+0x244>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b09      	cmp	r3, #9
 8001156:	d925      	bls.n	80011a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	b29b      	uxth	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	3b1e      	subs	r3, #30
 800116e:	2207      	movs	r2, #7
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43da      	mvns	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	400a      	ands	r2, r1
 800117c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68d9      	ldr	r1, [r3, #12]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4618      	mov	r0, r3
 8001190:	4603      	mov	r3, r0
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4403      	add	r3, r0
 8001196:	3b1e      	subs	r3, #30
 8001198:	409a      	lsls	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	430a      	orrs	r2, r1
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	e022      	b.n	80011ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6919      	ldr	r1, [r3, #16]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	461a      	mov	r2, r3
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	2207      	movs	r2, #7
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	400a      	ands	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6919      	ldr	r1, [r3, #16]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4403      	add	r3, r0
 80011e0:	409a      	lsls	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d824      	bhi.n	800123c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	3b05      	subs	r3, #5
 8001204:	221f      	movs	r2, #31
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	400a      	ands	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	b29b      	uxth	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685a      	ldr	r2, [r3, #4]
 8001226:	4613      	mov	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	4413      	add	r3, r2
 800122c:	3b05      	subs	r3, #5
 800122e:	fa00 f203 	lsl.w	r2, r0, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	635a      	str	r2, [r3, #52]	@ 0x34
 800123a:	e04c      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d824      	bhi.n	800128e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685a      	ldr	r2, [r3, #4]
 800124e:	4613      	mov	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	3b23      	subs	r3, #35	@ 0x23
 8001256:	221f      	movs	r2, #31
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43da      	mvns	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	400a      	ands	r2, r1
 8001264:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	3b23      	subs	r3, #35	@ 0x23
 8001280:	fa00 f203 	lsl.w	r2, r0, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	631a      	str	r2, [r3, #48]	@ 0x30
 800128c:	e023      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b41      	subs	r3, #65	@ 0x41
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b41      	subs	r3, #65	@ 0x41
 80012ca:	fa00 f203 	lsl.w	r2, r0, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d6:	4b29      	ldr	r3, [pc, #164]	@ (800137c <HAL_ADC_ConfigChannel+0x250>)
 80012d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <HAL_ADC_ConfigChannel+0x254>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d10f      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1d8>
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d10b      	bne.n	8001304 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <HAL_ADC_ConfigChannel+0x254>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12b      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x23a>
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a1c      	ldr	r2, [pc, #112]	@ (8001384 <HAL_ADC_ConfigChannel+0x258>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d003      	beq.n	8001320 <HAL_ADC_ConfigChannel+0x1f4>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b11      	cmp	r3, #17
 800131e:	d122      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a11      	ldr	r2, [pc, #68]	@ (8001384 <HAL_ADC_ConfigChannel+0x258>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d111      	bne.n	8001366 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_ADC_ConfigChannel+0x25c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a11      	ldr	r2, [pc, #68]	@ (800138c <HAL_ADC_ConfigChannel+0x260>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	0c9a      	lsrs	r2, r3, #18
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001358:	e002      	b.n	8001360 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f9      	bne.n	800135a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40012300 	.word	0x40012300
 8001380:	40012000 	.word	0x40012000
 8001384:	10000012 	.word	0x10000012
 8001388:	20000000 	.word	0x20000000
 800138c:	431bde83 	.word	0x431bde83

08001390 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001398:	4b79      	ldr	r3, [pc, #484]	@ (8001580 <ADC_Init+0x1f0>)
 800139a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	021a      	lsls	r2, r3, #8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	6859      	ldr	r1, [r3, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800140a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6899      	ldr	r1, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001422:	4a58      	ldr	r2, [pc, #352]	@ (8001584 <ADC_Init+0x1f4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d022      	beq.n	800146e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001436:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6899      	ldr	r1, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6899      	ldr	r1, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e00f      	b.n	800148e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800147c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800148c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 0202 	bic.w	r2, r2, #2
 800149c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6899      	ldr	r1, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e1b      	ldrb	r3, [r3, #24]
 80014a8:	005a      	lsls	r2, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d01b      	beq.n	80014f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	3b01      	subs	r3, #1
 80014e8:	035a      	lsls	r2, r3, #13
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	e007      	b.n	8001504 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001502:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	3b01      	subs	r3, #1
 8001520:	051a      	lsls	r2, r3, #20
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001538:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6899      	ldr	r1, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001546:	025a      	lsls	r2, r3, #9
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800155e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6899      	ldr	r1, [r3, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	029a      	lsls	r2, r3, #10
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	609a      	str	r2, [r3, #8]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	40012300 	.word	0x40012300
 8001584:	0f000001 	.word	0x0f000001

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff47 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff5c 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffb0 	bl	80016a8 <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	e165      	b.n	8001a3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8154 	bne.w	8001a36 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b01      	cmp	r3, #1
 8001798:	d005      	beq.n	80017a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d130      	bne.n	8001808 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	2203      	movs	r2, #3
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4013      	ands	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	f003 0201 	and.w	r2, r3, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b03      	cmp	r3, #3
 8001812:	d017      	beq.n	8001844 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0303 	and.w	r3, r3, #3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d123      	bne.n	8001898 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	08da      	lsrs	r2, r3, #3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3208      	adds	r2, #8
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	220f      	movs	r2, #15
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	691a      	ldr	r2, [r3, #16]
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	08da      	lsrs	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3208      	adds	r2, #8
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0203 	and.w	r2, r3, #3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80ae 	beq.w	8001a36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b5d      	ldr	r3, [pc, #372]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ea:	4b5a      	ldr	r3, [pc, #360]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f6:	4a58      	ldr	r2, [pc, #352]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	3302      	adds	r3, #2
 80018fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	220f      	movs	r2, #15
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4013      	ands	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a5c <HAL_GPIO_Init+0x308>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d025      	beq.n	800196e <HAL_GPIO_Init+0x21a>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a4e      	ldr	r2, [pc, #312]	@ (8001a60 <HAL_GPIO_Init+0x30c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01f      	beq.n	800196a <HAL_GPIO_Init+0x216>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a64 <HAL_GPIO_Init+0x310>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x212>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a4c      	ldr	r2, [pc, #304]	@ (8001a68 <HAL_GPIO_Init+0x314>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x20e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a6c <HAL_GPIO_Init+0x318>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x20a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4a      	ldr	r2, [pc, #296]	@ (8001a70 <HAL_GPIO_Init+0x31c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x206>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	@ (8001a74 <HAL_GPIO_Init+0x320>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x202>
 8001952:	2306      	movs	r3, #6
 8001954:	e00c      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 8001956:	2307      	movs	r3, #7
 8001958:	e00a      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 800195a:	2305      	movs	r3, #5
 800195c:	e008      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 800195e:	2304      	movs	r3, #4
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 8001962:	2303      	movs	r3, #3
 8001964:	e004      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 8001966:	2302      	movs	r3, #2
 8001968:	e002      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x21c>
 800196e:	2300      	movs	r3, #0
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	f002 0203 	and.w	r2, r2, #3
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	4093      	lsls	r3, r2
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001980:	4935      	ldr	r1, [pc, #212]	@ (8001a58 <HAL_GPIO_Init+0x304>)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a31      	ldr	r2, [pc, #196]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019e2:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a06:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a30:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <HAL_GPIO_Init+0x324>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	2b0f      	cmp	r3, #15
 8001a40:	f67f ae96 	bls.w	8001770 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40013800 	.word	0x40013800
 8001a5c:	40020000 	.word	0x40020000
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020c00 	.word	0x40020c00
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40021800 	.word	0x40021800
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a92:	887a      	ldrh	r2, [r7, #2]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a98:	e003      	b.n	8001aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	041a      	lsls	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	619a      	str	r2, [r3, #24]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b20      	ldr	r3, [pc, #128]	@ (8001b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_PWREx_EnableOverDrive+0x90>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b44 <HAL_PWREx_EnableOverDrive+0x94>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001adc:	f7ff f914 	bl	8000d08 <HAL_GetTick>
 8001ae0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ae2:	e009      	b.n	8001af8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ae4:	f7ff f910 	bl	8000d08 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001af2:	d901      	bls.n	8001af8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e01f      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001af8:	4b13      	ldr	r3, [pc, #76]	@ (8001b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b04:	d1ee      	bne.n	8001ae4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b0c:	f7ff f8fc 	bl	8000d08 <HAL_GetTick>
 8001b10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b12:	e009      	b.n	8001b28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b14:	f7ff f8f8 	bl	8000d08 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b22:	d901      	bls.n	8001b28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e007      	b.n	8001b38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001b34:	d1ee      	bne.n	8001b14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	420e0040 	.word	0x420e0040
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	420e0044 	.word	0x420e0044

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d90c      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b65      	ldr	r3, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d044      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b37      	ldr	r3, [pc, #220]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4934      	ldr	r1, [pc, #208]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f862 	bl	8000d08 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f85e 	bl	8000d08 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d20c      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f855 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe ffc2 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08003898 	.word	0x08003898
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff0 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	@ (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	0a9b      	lsrs	r3, r3, #10
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	@ (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	080038a8 	.word	0x080038a8

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffdc 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d64:	4602      	mov	r2, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	0b5b      	lsrs	r3, r3, #13
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4903      	ldr	r1, [pc, #12]	@ (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5ccb      	ldrb	r3, [r1, r3]
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	080038a8 	.word	0x080038a8

08001d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d88:	b0ae      	sub	sp, #184	@ 0xb8
 8001d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001daa:	4bcb      	ldr	r3, [pc, #812]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	f200 8206 	bhi.w	80021c4 <HAL_RCC_GetSysClockFreq+0x440>
 8001db8:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001df5 	.word	0x08001df5
 8001dc4:	080021c5 	.word	0x080021c5
 8001dc8:	080021c5 	.word	0x080021c5
 8001dcc:	080021c5 	.word	0x080021c5
 8001dd0:	08001dfd 	.word	0x08001dfd
 8001dd4:	080021c5 	.word	0x080021c5
 8001dd8:	080021c5 	.word	0x080021c5
 8001ddc:	080021c5 	.word	0x080021c5
 8001de0:	08001e05 	.word	0x08001e05
 8001de4:	080021c5 	.word	0x080021c5
 8001de8:	080021c5 	.word	0x080021c5
 8001dec:	080021c5 	.word	0x080021c5
 8001df0:	08001ff5 	.word	0x08001ff5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4bb9      	ldr	r3, [pc, #740]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x358>)
 8001df6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dfa:	e1e7      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dfc:	4bb8      	ldr	r3, [pc, #736]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e02:	e1e3      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e04:	4bb4      	ldr	r3, [pc, #720]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e10:	4bb1      	ldr	r3, [pc, #708]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d071      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e1c:	4bae      	ldr	r3, [pc, #696]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	2200      	movs	r2, #0
 8001e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001e28:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001e3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001e42:	4622      	mov	r2, r4
 8001e44:	462b      	mov	r3, r5
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	0159      	lsls	r1, r3, #5
 8001e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e54:	0150      	lsls	r0, r2, #5
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	1a51      	subs	r1, r2, r1
 8001e5e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001e60:	4629      	mov	r1, r5
 8001e62:	eb63 0301 	sbc.w	r3, r3, r1
 8001e66:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001e74:	4649      	mov	r1, r9
 8001e76:	018b      	lsls	r3, r1, #6
 8001e78:	4641      	mov	r1, r8
 8001e7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e7e:	4641      	mov	r1, r8
 8001e80:	018a      	lsls	r2, r1, #6
 8001e82:	4641      	mov	r1, r8
 8001e84:	1a51      	subs	r1, r2, r1
 8001e86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e88:	4649      	mov	r1, r9
 8001e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e9c:	4649      	mov	r1, r9
 8001e9e:	00cb      	lsls	r3, r1, #3
 8001ea0:	4641      	mov	r1, r8
 8001ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	00ca      	lsls	r2, r1, #3
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4622      	mov	r2, r4
 8001eb2:	189b      	adds	r3, r3, r2
 8001eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	460a      	mov	r2, r1
 8001eba:	eb42 0303 	adc.w	r3, r2, r3
 8001ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ecc:	4629      	mov	r1, r5
 8001ece:	024b      	lsls	r3, r1, #9
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed6:	4621      	mov	r1, r4
 8001ed8:	024a      	lsls	r2, r1, #9
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ee8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001eec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ef0:	f7fe f9e6 	bl	80002c0 <__aeabi_uldivmod>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4613      	mov	r3, r2
 8001efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001efe:	e067      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f00:	4b75      	ldr	r3, [pc, #468]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001f0c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001f10:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001f1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001f22:	4622      	mov	r2, r4
 8001f24:	462b      	mov	r3, r5
 8001f26:	f04f 0000 	mov.w	r0, #0
 8001f2a:	f04f 0100 	mov.w	r1, #0
 8001f2e:	0159      	lsls	r1, r3, #5
 8001f30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f34:	0150      	lsls	r0, r2, #5
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	1a51      	subs	r1, r2, r1
 8001f3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001f40:	4629      	mov	r1, r5
 8001f42:	eb63 0301 	sbc.w	r3, r3, r1
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001f54:	4649      	mov	r1, r9
 8001f56:	018b      	lsls	r3, r1, #6
 8001f58:	4641      	mov	r1, r8
 8001f5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f5e:	4641      	mov	r1, r8
 8001f60:	018a      	lsls	r2, r1, #6
 8001f62:	4641      	mov	r1, r8
 8001f64:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f68:	4649      	mov	r1, r9
 8001f6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f82:	4692      	mov	sl, r2
 8001f84:	469b      	mov	fp, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	eb1a 0303 	adds.w	r3, sl, r3
 8001f8c:	623b      	str	r3, [r7, #32]
 8001f8e:	462b      	mov	r3, r5
 8001f90:	eb4b 0303 	adc.w	r3, fp, r3
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	f04f 0300 	mov.w	r3, #0
 8001f9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001fa2:	4629      	mov	r1, r5
 8001fa4:	028b      	lsls	r3, r1, #10
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001fac:	4621      	mov	r1, r4
 8001fae:	028a      	lsls	r2, r1, #10
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001fb8:	2200      	movs	r2, #0
 8001fba:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fbc:	677a      	str	r2, [r7, #116]	@ 0x74
 8001fbe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001fc2:	f7fe f97d 	bl	80002c0 <__aeabi_uldivmod>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4613      	mov	r3, r2
 8001fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fd0:	4b41      	ldr	r3, [pc, #260]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0c1b      	lsrs	r3, r3, #16
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ff2:	e0eb      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b38      	ldr	r3, [pc, #224]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002000:	4b35      	ldr	r3, [pc, #212]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d06b      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200c:	4b32      	ldr	r3, [pc, #200]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	099b      	lsrs	r3, r3, #6
 8002012:	2200      	movs	r2, #0
 8002014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002016:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002020:	2300      	movs	r3, #0
 8002022:	667b      	str	r3, [r7, #100]	@ 0x64
 8002024:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002028:	4622      	mov	r2, r4
 800202a:	462b      	mov	r3, r5
 800202c:	f04f 0000 	mov.w	r0, #0
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	0159      	lsls	r1, r3, #5
 8002036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800203a:	0150      	lsls	r0, r2, #5
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4621      	mov	r1, r4
 8002042:	1a51      	subs	r1, r2, r1
 8002044:	61b9      	str	r1, [r7, #24]
 8002046:	4629      	mov	r1, r5
 8002048:	eb63 0301 	sbc.w	r3, r3, r1
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800205a:	4659      	mov	r1, fp
 800205c:	018b      	lsls	r3, r1, #6
 800205e:	4651      	mov	r1, sl
 8002060:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002064:	4651      	mov	r1, sl
 8002066:	018a      	lsls	r2, r1, #6
 8002068:	4651      	mov	r1, sl
 800206a:	ebb2 0801 	subs.w	r8, r2, r1
 800206e:	4659      	mov	r1, fp
 8002070:	eb63 0901 	sbc.w	r9, r3, r1
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002080:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002084:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002088:	4690      	mov	r8, r2
 800208a:	4699      	mov	r9, r3
 800208c:	4623      	mov	r3, r4
 800208e:	eb18 0303 	adds.w	r3, r8, r3
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	462b      	mov	r3, r5
 8002096:	eb49 0303 	adc.w	r3, r9, r3
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80020a8:	4629      	mov	r1, r5
 80020aa:	024b      	lsls	r3, r1, #9
 80020ac:	4621      	mov	r1, r4
 80020ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b2:	4621      	mov	r1, r4
 80020b4:	024a      	lsls	r2, r1, #9
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020be:	2200      	movs	r2, #0
 80020c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020c8:	f7fe f8fa 	bl	80002c0 <__aeabi_uldivmod>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4613      	mov	r3, r2
 80020d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020d6:	e065      	b.n	80021a4 <HAL_RCC_GetSysClockFreq+0x420>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	00f42400 	.word	0x00f42400
 80020e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e4:	4b3d      	ldr	r3, [pc, #244]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x458>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	099b      	lsrs	r3, r3, #6
 80020ea:	2200      	movs	r2, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	4611      	mov	r1, r2
 80020f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80020f6:	2300      	movs	r3, #0
 80020f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80020fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80020fe:	4642      	mov	r2, r8
 8002100:	464b      	mov	r3, r9
 8002102:	f04f 0000 	mov.w	r0, #0
 8002106:	f04f 0100 	mov.w	r1, #0
 800210a:	0159      	lsls	r1, r3, #5
 800210c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002110:	0150      	lsls	r0, r2, #5
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4641      	mov	r1, r8
 8002118:	1a51      	subs	r1, r2, r1
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	4649      	mov	r1, r9
 800211e:	eb63 0301 	sbc.w	r3, r3, r1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002130:	4659      	mov	r1, fp
 8002132:	018b      	lsls	r3, r1, #6
 8002134:	4651      	mov	r1, sl
 8002136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213a:	4651      	mov	r1, sl
 800213c:	018a      	lsls	r2, r1, #6
 800213e:	4651      	mov	r1, sl
 8002140:	1a54      	subs	r4, r2, r1
 8002142:	4659      	mov	r1, fp
 8002144:	eb63 0501 	sbc.w	r5, r3, r1
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	00eb      	lsls	r3, r5, #3
 8002152:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002156:	00e2      	lsls	r2, r4, #3
 8002158:	4614      	mov	r4, r2
 800215a:	461d      	mov	r5, r3
 800215c:	4643      	mov	r3, r8
 800215e:	18e3      	adds	r3, r4, r3
 8002160:	603b      	str	r3, [r7, #0]
 8002162:	464b      	mov	r3, r9
 8002164:	eb45 0303 	adc.w	r3, r5, r3
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002176:	4629      	mov	r1, r5
 8002178:	028b      	lsls	r3, r1, #10
 800217a:	4621      	mov	r1, r4
 800217c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002180:	4621      	mov	r1, r4
 8002182:	028a      	lsls	r2, r1, #10
 8002184:	4610      	mov	r0, r2
 8002186:	4619      	mov	r1, r3
 8002188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800218c:	2200      	movs	r2, #0
 800218e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002190:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002192:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002196:	f7fe f893 	bl	80002c0 <__aeabi_uldivmod>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4613      	mov	r3, r2
 80021a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80021a4:	4b0d      	ldr	r3, [pc, #52]	@ (80021dc <HAL_RCC_GetSysClockFreq+0x458>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	0f1b      	lsrs	r3, r3, #28
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80021b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021c2:	e003      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80021c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	37b8      	adds	r7, #184	@ 0xb8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	00f42400 	.word	0x00f42400

080021e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e28d      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8083 	beq.w	800230a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002204:	4b94      	ldr	r3, [pc, #592]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d019      	beq.n	8002244 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002210:	4b91      	ldr	r3, [pc, #580]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
        || \
 8002218:	2b08      	cmp	r3, #8
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800221c:	4b8e      	ldr	r3, [pc, #568]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002224:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002228:	d00c      	beq.n	8002244 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b8b      	ldr	r3, [pc, #556]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d112      	bne.n	800225c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b88      	ldr	r3, [pc, #544]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800223e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b84      	ldr	r3, [pc, #528]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0x124>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d157      	bne.n	8002308 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e25a      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x90>
 8002266:	4b7c      	ldr	r3, [pc, #496]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a7b      	ldr	r2, [pc, #492]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e01d      	b.n	80022b0 <HAL_RCC_OscConfig+0xcc>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0xb4>
 800227e:	4b76      	ldr	r3, [pc, #472]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a75      	ldr	r2, [pc, #468]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b73      	ldr	r3, [pc, #460]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a72      	ldr	r2, [pc, #456]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e00b      	b.n	80022b0 <HAL_RCC_OscConfig+0xcc>
 8002298:	4b6f      	ldr	r3, [pc, #444]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a6e      	ldr	r2, [pc, #440]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800229e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80022aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d013      	beq.n	80022e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe fd26 	bl	8000d08 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe fd22 	bl	8000d08 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	@ 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e21f      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b61      	ldr	r3, [pc, #388]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0xdc>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fd12 	bl	8000d08 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fd0e 	bl	8000d08 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e20b      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fa:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x104>
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d06f      	beq.n	80023f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002316:	4b50      	ldr	r3, [pc, #320]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b00      	cmp	r3, #0
 8002320:	d017      	beq.n	8002352 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002322:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
        || \
 800232a:	2b08      	cmp	r3, #8
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800232e:	4b4a      	ldr	r3, [pc, #296]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b47      	ldr	r3, [pc, #284]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d11c      	bne.n	8002380 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b44      	ldr	r3, [pc, #272]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	4b41      	ldr	r3, [pc, #260]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x186>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1d3      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4937      	ldr	r1, [pc, #220]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e03a      	b.n	80023f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_RCC_OscConfig+0x278>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238e:	f7fe fcbb 	bl	8000d08 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe fcb7 	bl	8000d08 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1b4      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4925      	ldr	r1, [pc, #148]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ca:	4b24      	ldr	r3, [pc, #144]	@ (800245c <HAL_RCC_OscConfig+0x278>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fc9a 	bl	8000d08 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe fc96 	bl	8000d08 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e193      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d036      	beq.n	8002470 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d016      	beq.n	8002438 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	4b15      	ldr	r3, [pc, #84]	@ (8002460 <HAL_RCC_OscConfig+0x27c>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe fc7a 	bl	8000d08 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe fc76 	bl	8000d08 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e173      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_OscConfig+0x274>)
 800242c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x234>
 8002436:	e01b      	b.n	8002470 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_OscConfig+0x27c>)
 800243a:	2200      	movs	r2, #0
 800243c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243e:	f7fe fc63 	bl	8000d08 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	e00e      	b.n	8002464 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002446:	f7fe fc5f 	bl	8000d08 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d907      	bls.n	8002464 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e15c      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
 8002458:	40023800 	.word	0x40023800
 800245c:	42470000 	.word	0x42470000
 8002460:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b8a      	ldr	r3, [pc, #552]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1ea      	bne.n	8002446 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8097 	beq.w	80025ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b83      	ldr	r3, [pc, #524]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10f      	bne.n	80024ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b7f      	ldr	r3, [pc, #508]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a7e      	ldr	r2, [pc, #504]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b7c      	ldr	r3, [pc, #496]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b79      	ldr	r3, [pc, #484]	@ (8002694 <HAL_RCC_OscConfig+0x4b0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d118      	bne.n	80024ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ba:	4b76      	ldr	r3, [pc, #472]	@ (8002694 <HAL_RCC_OscConfig+0x4b0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a75      	ldr	r2, [pc, #468]	@ (8002694 <HAL_RCC_OscConfig+0x4b0>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c6:	f7fe fc1f 	bl	8000d08 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ce:	f7fe fc1b 	bl	8000d08 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e118      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e0:	4b6c      	ldr	r3, [pc, #432]	@ (8002694 <HAL_RCC_OscConfig+0x4b0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x31e>
 80024f4:	4b66      	ldr	r3, [pc, #408]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f8:	4a65      	ldr	r2, [pc, #404]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002500:	e01c      	b.n	800253c <HAL_RCC_OscConfig+0x358>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b05      	cmp	r3, #5
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x340>
 800250a:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250e:	4a60      	ldr	r2, [pc, #384]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6713      	str	r3, [r2, #112]	@ 0x70
 8002516:	4b5e      	ldr	r3, [pc, #376]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a5d      	ldr	r2, [pc, #372]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	e00b      	b.n	800253c <HAL_RCC_OscConfig+0x358>
 8002524:	4b5a      	ldr	r3, [pc, #360]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002528:	4a59      	ldr	r2, [pc, #356]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 800252a:	f023 0301 	bic.w	r3, r3, #1
 800252e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002530:	4b57      	ldr	r3, [pc, #348]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a56      	ldr	r2, [pc, #344]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002536:	f023 0304 	bic.w	r3, r3, #4
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d015      	beq.n	8002570 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002544:	f7fe fbe0 	bl	8000d08 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe fbdc 	bl	8000d08 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e0d7      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	4b4b      	ldr	r3, [pc, #300]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0ee      	beq.n	800254c <HAL_RCC_OscConfig+0x368>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fbca 	bl	8000d08 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002576:	e00a      	b.n	800258e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002578:	f7fe fbc6 	bl	8000d08 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002586:	4293      	cmp	r3, r2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e0c1      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1ee      	bne.n	8002578 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 80ad 	beq.w	8002710 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025b6:	4b36      	ldr	r3, [pc, #216]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d060      	beq.n	8002684 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d145      	bne.n	8002656 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ca:	4b33      	ldr	r3, [pc, #204]	@ (8002698 <HAL_RCC_OscConfig+0x4b4>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fb9a 	bl	8000d08 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fb96 	bl	8000d08 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e093      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	071b      	lsls	r3, r3, #28
 8002622:	491b      	ldr	r1, [pc, #108]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x4b4>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7fe fb6b 	bl	8000d08 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7fe fb67 	bl	8000d08 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e064      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCC_OscConfig+0x452>
 8002654:	e05c      	b.n	8002710 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002656:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <HAL_RCC_OscConfig+0x4b4>)
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fb54 	bl	8000d08 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fb50 	bl	8000d08 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e04d      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCC_OscConfig+0x4ac>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x480>
 8002682:	e045      	b.n	8002710 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e040      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
 8002698:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800269c:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <HAL_RCC_OscConfig+0x538>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d030      	beq.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d129      	bne.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d122      	bne.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026cc:	4013      	ands	r3, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d119      	bne.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	085b      	lsrs	r3, r3, #1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10f      	bne.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fe f98e 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2224      	movs	r2, #36	@ 0x24
 8002750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f973 	bl	8002a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d175      	bne.n	80028cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_UART_Transmit+0x2c>
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e06e      	b.n	80028ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	@ 0x21
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fe:	f7fe fa83 	bl	8000d08 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002818:	d108      	bne.n	800282c <HAL_UART_Transmit+0x6c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e003      	b.n	8002834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002834:	e02e      	b.n	8002894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f848 	bl	80028d6 <UART_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e03a      	b.n	80028ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800286c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3302      	adds	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e007      	b.n	8002886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1cb      	bne.n	8002836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2140      	movs	r1, #64	@ 0x40
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f814 	bl	80028d6 <UART_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e006      	b.n	80028ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	4613      	mov	r3, r2
 80028e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028e6:	e03b      	b.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ee:	d037      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f0:	f7fe fa0a 	bl	8000d08 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	6a3a      	ldr	r2, [r7, #32]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d302      	bcc.n	8002906 <UART_WaitOnFlagUntilTimeout+0x30>
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e03a      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b80      	cmp	r3, #128	@ 0x80
 800291c:	d020      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2b40      	cmp	r3, #64	@ 0x40
 8002922:	d01d      	beq.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b08      	cmp	r3, #8
 8002930:	d116      	bne.n	8002960 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f81d 	bl	8002988 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2208      	movs	r2, #8
 8002952:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e00f      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d0b4      	beq.n	80028e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002988:	b480      	push	{r7}
 800298a:	b095      	sub	sp, #84	@ 0x54
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80029a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80029b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	3314      	adds	r3, #20
 80029ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	e853 3f00 	ldrex	r3, [r3]
 80029d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ec:	e841 2300 	strex	r3, r2, [r1]
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d119      	bne.n	8002a34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	330c      	adds	r3, #12
 8002a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	e853 3f00 	ldrex	r3, [r3]
 8002a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f023 0310 	bic.w	r3, r3, #16
 8002a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a20:	61ba      	str	r2, [r7, #24]
 8002a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a24:	6979      	ldr	r1, [r7, #20]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	e841 2300 	strex	r3, r2, [r1]
 8002a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a42:	bf00      	nop
 8002a44:	3754      	adds	r7, #84	@ 0x54
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b0c0      	sub	sp, #256	@ 0x100
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6c:	68d9      	ldr	r1, [r3, #12]
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	ea40 0301 	orr.w	r3, r0, r1
 8002a78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	431a      	orrs	r2, r3
 8002a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002aa8:	f021 010c 	bic.w	r1, r1, #12
 8002aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aca:	6999      	ldr	r1, [r3, #24]
 8002acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	ea40 0301 	orr.w	r3, r0, r1
 8002ad6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b8f      	ldr	r3, [pc, #572]	@ (8002d1c <UART_SetConfig+0x2cc>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d005      	beq.n	8002af0 <UART_SetConfig+0xa0>
 8002ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b8d      	ldr	r3, [pc, #564]	@ (8002d20 <UART_SetConfig+0x2d0>)
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d104      	bne.n	8002afa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002af0:	f7ff f934 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 8002af4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002af8:	e003      	b.n	8002b02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002afa:	f7ff f91b 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002afe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b0c:	f040 810c 	bne.w	8002d28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b14:	2200      	movs	r2, #0
 8002b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b1a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	1891      	adds	r1, r2, r2
 8002b28:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b2a:	415b      	adcs	r3, r3
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b32:	4621      	mov	r1, r4
 8002b34:	eb12 0801 	adds.w	r8, r2, r1
 8002b38:	4629      	mov	r1, r5
 8002b3a:	eb43 0901 	adc.w	r9, r3, r1
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b52:	4690      	mov	r8, r2
 8002b54:	4699      	mov	r9, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	eb18 0303 	adds.w	r3, r8, r3
 8002b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b60:	462b      	mov	r3, r5
 8002b62:	eb49 0303 	adc.w	r3, r9, r3
 8002b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b76:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b7e:	460b      	mov	r3, r1
 8002b80:	18db      	adds	r3, r3, r3
 8002b82:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b84:	4613      	mov	r3, r2
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b94:	f7fd fb94 	bl	80002c0 <__aeabi_uldivmod>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4b61      	ldr	r3, [pc, #388]	@ (8002d24 <UART_SetConfig+0x2d4>)
 8002b9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	011c      	lsls	r4, r3, #4
 8002ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bb0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002bb4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002bb8:	4642      	mov	r2, r8
 8002bba:	464b      	mov	r3, r9
 8002bbc:	1891      	adds	r1, r2, r2
 8002bbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bc0:	415b      	adcs	r3, r3
 8002bc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bc8:	4641      	mov	r1, r8
 8002bca:	eb12 0a01 	adds.w	sl, r2, r1
 8002bce:	4649      	mov	r1, r9
 8002bd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002be0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002be4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002be8:	4692      	mov	sl, r2
 8002bea:	469b      	mov	fp, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	eb1a 0303 	adds.w	r3, sl, r3
 8002bf2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002bf6:	464b      	mov	r3, r9
 8002bf8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bfc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002c0c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c14:	460b      	mov	r3, r1
 8002c16:	18db      	adds	r3, r3, r3
 8002c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	eb42 0303 	adc.w	r3, r2, r3
 8002c20:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c2a:	f7fd fb49 	bl	80002c0 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <UART_SetConfig+0x2d4>)
 8002c36:	fba3 2301 	umull	r2, r3, r3, r1
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2264      	movs	r2, #100	@ 0x64
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	1acb      	subs	r3, r1, r3
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c4a:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <UART_SetConfig+0x2d4>)
 8002c4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c58:	441c      	add	r4, r3
 8002c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c64:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c74:	415b      	adcs	r3, r3
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	1851      	adds	r1, r2, r1
 8002c80:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c82:	4649      	mov	r1, r9
 8002c84:	414b      	adcs	r3, r1
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c94:	4659      	mov	r1, fp
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	00ca      	lsls	r2, r1, #3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	eb42 0303 	adc.w	r3, r2, r3
 8002cb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cc8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ccc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	18db      	adds	r3, r3, r3
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	eb42 0303 	adc.w	r3, r2, r3
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cde:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ce2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ce6:	f7fd faeb 	bl	80002c0 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <UART_SetConfig+0x2d4>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2164      	movs	r1, #100	@ 0x64
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	3332      	adds	r3, #50	@ 0x32
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <UART_SetConfig+0x2d4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	f003 0207 	and.w	r2, r3, #7
 8002d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4422      	add	r2, r4
 8002d16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d18:	e106      	b.n	8002f28 <UART_SetConfig+0x4d8>
 8002d1a:	bf00      	nop
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d32:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d3a:	4642      	mov	r2, r8
 8002d3c:	464b      	mov	r3, r9
 8002d3e:	1891      	adds	r1, r2, r2
 8002d40:	6239      	str	r1, [r7, #32]
 8002d42:	415b      	adcs	r3, r3
 8002d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	1854      	adds	r4, r2, r1
 8002d4e:	4649      	mov	r1, r9
 8002d50:	eb43 0501 	adc.w	r5, r3, r1
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	00eb      	lsls	r3, r5, #3
 8002d5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d62:	00e2      	lsls	r2, r4, #3
 8002d64:	4614      	mov	r4, r2
 8002d66:	461d      	mov	r5, r3
 8002d68:	4643      	mov	r3, r8
 8002d6a:	18e3      	adds	r3, r4, r3
 8002d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d70:	464b      	mov	r3, r9
 8002d72:	eb45 0303 	adc.w	r3, r5, r3
 8002d76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d86:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d96:	4629      	mov	r1, r5
 8002d98:	008b      	lsls	r3, r1, #2
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002da0:	4621      	mov	r1, r4
 8002da2:	008a      	lsls	r2, r1, #2
 8002da4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002da8:	f7fd fa8a 	bl	80002c0 <__aeabi_uldivmod>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4b60      	ldr	r3, [pc, #384]	@ (8002f34 <UART_SetConfig+0x4e4>)
 8002db2:	fba3 2302 	umull	r2, r3, r3, r2
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	011c      	lsls	r4, r3, #4
 8002dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002dc4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002dc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dcc:	4642      	mov	r2, r8
 8002dce:	464b      	mov	r3, r9
 8002dd0:	1891      	adds	r1, r2, r2
 8002dd2:	61b9      	str	r1, [r7, #24]
 8002dd4:	415b      	adcs	r3, r3
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ddc:	4641      	mov	r1, r8
 8002dde:	1851      	adds	r1, r2, r1
 8002de0:	6139      	str	r1, [r7, #16]
 8002de2:	4649      	mov	r1, r9
 8002de4:	414b      	adcs	r3, r1
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002df4:	4659      	mov	r1, fp
 8002df6:	00cb      	lsls	r3, r1, #3
 8002df8:	4651      	mov	r1, sl
 8002dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dfe:	4651      	mov	r1, sl
 8002e00:	00ca      	lsls	r2, r1, #3
 8002e02:	4610      	mov	r0, r2
 8002e04:	4619      	mov	r1, r3
 8002e06:	4603      	mov	r3, r0
 8002e08:	4642      	mov	r2, r8
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e10:	464b      	mov	r3, r9
 8002e12:	460a      	mov	r2, r1
 8002e14:	eb42 0303 	adc.w	r3, r2, r3
 8002e18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e34:	4649      	mov	r1, r9
 8002e36:	008b      	lsls	r3, r1, #2
 8002e38:	4641      	mov	r1, r8
 8002e3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e3e:	4641      	mov	r1, r8
 8002e40:	008a      	lsls	r2, r1, #2
 8002e42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e46:	f7fd fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4b38      	ldr	r3, [pc, #224]	@ (8002f34 <UART_SetConfig+0x4e4>)
 8002e52:	fba3 2301 	umull	r2, r3, r3, r1
 8002e56:	095b      	lsrs	r3, r3, #5
 8002e58:	2264      	movs	r2, #100	@ 0x64
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	1acb      	subs	r3, r1, r3
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	3332      	adds	r3, #50	@ 0x32
 8002e64:	4a33      	ldr	r2, [pc, #204]	@ (8002f34 <UART_SetConfig+0x4e4>)
 8002e66:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e70:	441c      	add	r4, r3
 8002e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e76:	2200      	movs	r2, #0
 8002e78:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	4641      	mov	r1, r8
 8002e92:	1851      	adds	r1, r2, r1
 8002e94:	6039      	str	r1, [r7, #0]
 8002e96:	4649      	mov	r1, r9
 8002e98:	414b      	adcs	r3, r1
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ea8:	4659      	mov	r1, fp
 8002eaa:	00cb      	lsls	r3, r1, #3
 8002eac:	4651      	mov	r1, sl
 8002eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eb2:	4651      	mov	r1, sl
 8002eb4:	00ca      	lsls	r2, r1, #3
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4642      	mov	r2, r8
 8002ebe:	189b      	adds	r3, r3, r2
 8002ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	eb42 0303 	adc.w	r3, r2, r3
 8002eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ed6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	008b      	lsls	r3, r1, #2
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eee:	4641      	mov	r1, r8
 8002ef0:	008a      	lsls	r2, r1, #2
 8002ef2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ef6:	f7fd f9e3 	bl	80002c0 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <UART_SetConfig+0x4e4>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	@ 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	3332      	adds	r3, #50	@ 0x32
 8002f12:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <UART_SetConfig+0x4e4>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4422      	add	r2, r4
 8002f26:	609a      	str	r2, [r3, #8]
}
 8002f28:	bf00      	nop
 8002f2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f34:	51eb851f 	.word	0x51eb851f

08002f38 <siprintf>:
 8002f38:	b40e      	push	{r1, r2, r3}
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	b09d      	sub	sp, #116	@ 0x74
 8002f3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f40:	9002      	str	r0, [sp, #8]
 8002f42:	9006      	str	r0, [sp, #24]
 8002f44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f48:	480a      	ldr	r0, [pc, #40]	@ (8002f74 <siprintf+0x3c>)
 8002f4a:	9107      	str	r1, [sp, #28]
 8002f4c:	9104      	str	r1, [sp, #16]
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <siprintf+0x40>)
 8002f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f54:	9105      	str	r1, [sp, #20]
 8002f56:	2400      	movs	r4, #0
 8002f58:	a902      	add	r1, sp, #8
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	9301      	str	r3, [sp, #4]
 8002f5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f60:	f000 f994 	bl	800328c <_svfiprintf_r>
 8002f64:	9b02      	ldr	r3, [sp, #8]
 8002f66:	701c      	strb	r4, [r3, #0]
 8002f68:	b01d      	add	sp, #116	@ 0x74
 8002f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f6e:	b003      	add	sp, #12
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	ffff0208 	.word	0xffff0208

08002f7c <memset>:
 8002f7c:	4402      	add	r2, r0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	f803 1b01 	strb.w	r1, [r3], #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <__errno>:
 8002f8c:	4b01      	ldr	r3, [pc, #4]	@ (8002f94 <__errno+0x8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002f9e:	1b64      	subs	r4, r4, r5
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	2600      	movs	r6, #0
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8002fd8 <__libc_init_array+0x40>)
 8002faa:	4c0c      	ldr	r4, [pc, #48]	@ (8002fdc <__libc_init_array+0x44>)
 8002fac:	f000 fc64 	bl	8003878 <_init>
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	2600      	movs	r6, #0
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	080038ec 	.word	0x080038ec
 8002fd4:	080038ec 	.word	0x080038ec
 8002fd8:	080038ec 	.word	0x080038ec
 8002fdc:	080038f0 	.word	0x080038f0

08002fe0 <__retarget_lock_acquire_recursive>:
 8002fe0:	4770      	bx	lr

08002fe2 <__retarget_lock_release_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <_free_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	4605      	mov	r5, r0
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d041      	beq.n	8003070 <_free_r+0x8c>
 8002fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ff0:	1f0c      	subs	r4, r1, #4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bfb8      	it	lt
 8002ff6:	18e4      	addlt	r4, r4, r3
 8002ff8:	f000 f8e0 	bl	80031bc <__malloc_lock>
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <_free_r+0x90>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	b933      	cbnz	r3, 8003010 <_free_r+0x2c>
 8003002:	6063      	str	r3, [r4, #4]
 8003004:	6014      	str	r4, [r2, #0]
 8003006:	4628      	mov	r0, r5
 8003008:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800300c:	f000 b8dc 	b.w	80031c8 <__malloc_unlock>
 8003010:	42a3      	cmp	r3, r4
 8003012:	d908      	bls.n	8003026 <_free_r+0x42>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	1821      	adds	r1, r4, r0
 8003018:	428b      	cmp	r3, r1
 800301a:	bf01      	itttt	eq
 800301c:	6819      	ldreq	r1, [r3, #0]
 800301e:	685b      	ldreq	r3, [r3, #4]
 8003020:	1809      	addeq	r1, r1, r0
 8003022:	6021      	streq	r1, [r4, #0]
 8003024:	e7ed      	b.n	8003002 <_free_r+0x1e>
 8003026:	461a      	mov	r2, r3
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	b10b      	cbz	r3, 8003030 <_free_r+0x4c>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d9fa      	bls.n	8003026 <_free_r+0x42>
 8003030:	6811      	ldr	r1, [r2, #0]
 8003032:	1850      	adds	r0, r2, r1
 8003034:	42a0      	cmp	r0, r4
 8003036:	d10b      	bne.n	8003050 <_free_r+0x6c>
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	4401      	add	r1, r0
 800303c:	1850      	adds	r0, r2, r1
 800303e:	4283      	cmp	r3, r0
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	d1e0      	bne.n	8003006 <_free_r+0x22>
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	6053      	str	r3, [r2, #4]
 800304a:	4408      	add	r0, r1
 800304c:	6010      	str	r0, [r2, #0]
 800304e:	e7da      	b.n	8003006 <_free_r+0x22>
 8003050:	d902      	bls.n	8003058 <_free_r+0x74>
 8003052:	230c      	movs	r3, #12
 8003054:	602b      	str	r3, [r5, #0]
 8003056:	e7d6      	b.n	8003006 <_free_r+0x22>
 8003058:	6820      	ldr	r0, [r4, #0]
 800305a:	1821      	adds	r1, r4, r0
 800305c:	428b      	cmp	r3, r1
 800305e:	bf04      	itt	eq
 8003060:	6819      	ldreq	r1, [r3, #0]
 8003062:	685b      	ldreq	r3, [r3, #4]
 8003064:	6063      	str	r3, [r4, #4]
 8003066:	bf04      	itt	eq
 8003068:	1809      	addeq	r1, r1, r0
 800306a:	6021      	streq	r1, [r4, #0]
 800306c:	6054      	str	r4, [r2, #4]
 800306e:	e7ca      	b.n	8003006 <_free_r+0x22>
 8003070:	bd38      	pop	{r3, r4, r5, pc}
 8003072:	bf00      	nop
 8003074:	2000028c 	.word	0x2000028c

08003078 <sbrk_aligned>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4e0f      	ldr	r6, [pc, #60]	@ (80030b8 <sbrk_aligned+0x40>)
 800307c:	460c      	mov	r4, r1
 800307e:	6831      	ldr	r1, [r6, #0]
 8003080:	4605      	mov	r5, r0
 8003082:	b911      	cbnz	r1, 800308a <sbrk_aligned+0x12>
 8003084:	f000 fba4 	bl	80037d0 <_sbrk_r>
 8003088:	6030      	str	r0, [r6, #0]
 800308a:	4621      	mov	r1, r4
 800308c:	4628      	mov	r0, r5
 800308e:	f000 fb9f 	bl	80037d0 <_sbrk_r>
 8003092:	1c43      	adds	r3, r0, #1
 8003094:	d103      	bne.n	800309e <sbrk_aligned+0x26>
 8003096:	f04f 34ff 	mov.w	r4, #4294967295
 800309a:	4620      	mov	r0, r4
 800309c:	bd70      	pop	{r4, r5, r6, pc}
 800309e:	1cc4      	adds	r4, r0, #3
 80030a0:	f024 0403 	bic.w	r4, r4, #3
 80030a4:	42a0      	cmp	r0, r4
 80030a6:	d0f8      	beq.n	800309a <sbrk_aligned+0x22>
 80030a8:	1a21      	subs	r1, r4, r0
 80030aa:	4628      	mov	r0, r5
 80030ac:	f000 fb90 	bl	80037d0 <_sbrk_r>
 80030b0:	3001      	adds	r0, #1
 80030b2:	d1f2      	bne.n	800309a <sbrk_aligned+0x22>
 80030b4:	e7ef      	b.n	8003096 <sbrk_aligned+0x1e>
 80030b6:	bf00      	nop
 80030b8:	20000288 	.word	0x20000288

080030bc <_malloc_r>:
 80030bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030c0:	1ccd      	adds	r5, r1, #3
 80030c2:	f025 0503 	bic.w	r5, r5, #3
 80030c6:	3508      	adds	r5, #8
 80030c8:	2d0c      	cmp	r5, #12
 80030ca:	bf38      	it	cc
 80030cc:	250c      	movcc	r5, #12
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	4606      	mov	r6, r0
 80030d2:	db01      	blt.n	80030d8 <_malloc_r+0x1c>
 80030d4:	42a9      	cmp	r1, r5
 80030d6:	d904      	bls.n	80030e2 <_malloc_r+0x26>
 80030d8:	230c      	movs	r3, #12
 80030da:	6033      	str	r3, [r6, #0]
 80030dc:	2000      	movs	r0, #0
 80030de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031b8 <_malloc_r+0xfc>
 80030e6:	f000 f869 	bl	80031bc <__malloc_lock>
 80030ea:	f8d8 3000 	ldr.w	r3, [r8]
 80030ee:	461c      	mov	r4, r3
 80030f0:	bb44      	cbnz	r4, 8003144 <_malloc_r+0x88>
 80030f2:	4629      	mov	r1, r5
 80030f4:	4630      	mov	r0, r6
 80030f6:	f7ff ffbf 	bl	8003078 <sbrk_aligned>
 80030fa:	1c43      	adds	r3, r0, #1
 80030fc:	4604      	mov	r4, r0
 80030fe:	d158      	bne.n	80031b2 <_malloc_r+0xf6>
 8003100:	f8d8 4000 	ldr.w	r4, [r8]
 8003104:	4627      	mov	r7, r4
 8003106:	2f00      	cmp	r7, #0
 8003108:	d143      	bne.n	8003192 <_malloc_r+0xd6>
 800310a:	2c00      	cmp	r4, #0
 800310c:	d04b      	beq.n	80031a6 <_malloc_r+0xea>
 800310e:	6823      	ldr	r3, [r4, #0]
 8003110:	4639      	mov	r1, r7
 8003112:	4630      	mov	r0, r6
 8003114:	eb04 0903 	add.w	r9, r4, r3
 8003118:	f000 fb5a 	bl	80037d0 <_sbrk_r>
 800311c:	4581      	cmp	r9, r0
 800311e:	d142      	bne.n	80031a6 <_malloc_r+0xea>
 8003120:	6821      	ldr	r1, [r4, #0]
 8003122:	1a6d      	subs	r5, r5, r1
 8003124:	4629      	mov	r1, r5
 8003126:	4630      	mov	r0, r6
 8003128:	f7ff ffa6 	bl	8003078 <sbrk_aligned>
 800312c:	3001      	adds	r0, #1
 800312e:	d03a      	beq.n	80031a6 <_malloc_r+0xea>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	442b      	add	r3, r5
 8003134:	6023      	str	r3, [r4, #0]
 8003136:	f8d8 3000 	ldr.w	r3, [r8]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	bb62      	cbnz	r2, 8003198 <_malloc_r+0xdc>
 800313e:	f8c8 7000 	str.w	r7, [r8]
 8003142:	e00f      	b.n	8003164 <_malloc_r+0xa8>
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	1b52      	subs	r2, r2, r5
 8003148:	d420      	bmi.n	800318c <_malloc_r+0xd0>
 800314a:	2a0b      	cmp	r2, #11
 800314c:	d917      	bls.n	800317e <_malloc_r+0xc2>
 800314e:	1961      	adds	r1, r4, r5
 8003150:	42a3      	cmp	r3, r4
 8003152:	6025      	str	r5, [r4, #0]
 8003154:	bf18      	it	ne
 8003156:	6059      	strne	r1, [r3, #4]
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	bf08      	it	eq
 800315c:	f8c8 1000 	streq.w	r1, [r8]
 8003160:	5162      	str	r2, [r4, r5]
 8003162:	604b      	str	r3, [r1, #4]
 8003164:	4630      	mov	r0, r6
 8003166:	f000 f82f 	bl	80031c8 <__malloc_unlock>
 800316a:	f104 000b 	add.w	r0, r4, #11
 800316e:	1d23      	adds	r3, r4, #4
 8003170:	f020 0007 	bic.w	r0, r0, #7
 8003174:	1ac2      	subs	r2, r0, r3
 8003176:	bf1c      	itt	ne
 8003178:	1a1b      	subne	r3, r3, r0
 800317a:	50a3      	strne	r3, [r4, r2]
 800317c:	e7af      	b.n	80030de <_malloc_r+0x22>
 800317e:	6862      	ldr	r2, [r4, #4]
 8003180:	42a3      	cmp	r3, r4
 8003182:	bf0c      	ite	eq
 8003184:	f8c8 2000 	streq.w	r2, [r8]
 8003188:	605a      	strne	r2, [r3, #4]
 800318a:	e7eb      	b.n	8003164 <_malloc_r+0xa8>
 800318c:	4623      	mov	r3, r4
 800318e:	6864      	ldr	r4, [r4, #4]
 8003190:	e7ae      	b.n	80030f0 <_malloc_r+0x34>
 8003192:	463c      	mov	r4, r7
 8003194:	687f      	ldr	r7, [r7, #4]
 8003196:	e7b6      	b.n	8003106 <_malloc_r+0x4a>
 8003198:	461a      	mov	r2, r3
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	42a3      	cmp	r3, r4
 800319e:	d1fb      	bne.n	8003198 <_malloc_r+0xdc>
 80031a0:	2300      	movs	r3, #0
 80031a2:	6053      	str	r3, [r2, #4]
 80031a4:	e7de      	b.n	8003164 <_malloc_r+0xa8>
 80031a6:	230c      	movs	r3, #12
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	4630      	mov	r0, r6
 80031ac:	f000 f80c 	bl	80031c8 <__malloc_unlock>
 80031b0:	e794      	b.n	80030dc <_malloc_r+0x20>
 80031b2:	6005      	str	r5, [r0, #0]
 80031b4:	e7d6      	b.n	8003164 <_malloc_r+0xa8>
 80031b6:	bf00      	nop
 80031b8:	2000028c 	.word	0x2000028c

080031bc <__malloc_lock>:
 80031bc:	4801      	ldr	r0, [pc, #4]	@ (80031c4 <__malloc_lock+0x8>)
 80031be:	f7ff bf0f 	b.w	8002fe0 <__retarget_lock_acquire_recursive>
 80031c2:	bf00      	nop
 80031c4:	20000284 	.word	0x20000284

080031c8 <__malloc_unlock>:
 80031c8:	4801      	ldr	r0, [pc, #4]	@ (80031d0 <__malloc_unlock+0x8>)
 80031ca:	f7ff bf0a 	b.w	8002fe2 <__retarget_lock_release_recursive>
 80031ce:	bf00      	nop
 80031d0:	20000284 	.word	0x20000284

080031d4 <__ssputs_r>:
 80031d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d8:	688e      	ldr	r6, [r1, #8]
 80031da:	461f      	mov	r7, r3
 80031dc:	42be      	cmp	r6, r7
 80031de:	680b      	ldr	r3, [r1, #0]
 80031e0:	4682      	mov	sl, r0
 80031e2:	460c      	mov	r4, r1
 80031e4:	4690      	mov	r8, r2
 80031e6:	d82d      	bhi.n	8003244 <__ssputs_r+0x70>
 80031e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031f0:	d026      	beq.n	8003240 <__ssputs_r+0x6c>
 80031f2:	6965      	ldr	r5, [r4, #20]
 80031f4:	6909      	ldr	r1, [r1, #16]
 80031f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031fa:	eba3 0901 	sub.w	r9, r3, r1
 80031fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003202:	1c7b      	adds	r3, r7, #1
 8003204:	444b      	add	r3, r9
 8003206:	106d      	asrs	r5, r5, #1
 8003208:	429d      	cmp	r5, r3
 800320a:	bf38      	it	cc
 800320c:	461d      	movcc	r5, r3
 800320e:	0553      	lsls	r3, r2, #21
 8003210:	d527      	bpl.n	8003262 <__ssputs_r+0x8e>
 8003212:	4629      	mov	r1, r5
 8003214:	f7ff ff52 	bl	80030bc <_malloc_r>
 8003218:	4606      	mov	r6, r0
 800321a:	b360      	cbz	r0, 8003276 <__ssputs_r+0xa2>
 800321c:	6921      	ldr	r1, [r4, #16]
 800321e:	464a      	mov	r2, r9
 8003220:	f000 fae6 	bl	80037f0 <memcpy>
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800322a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800322e:	81a3      	strh	r3, [r4, #12]
 8003230:	6126      	str	r6, [r4, #16]
 8003232:	6165      	str	r5, [r4, #20]
 8003234:	444e      	add	r6, r9
 8003236:	eba5 0509 	sub.w	r5, r5, r9
 800323a:	6026      	str	r6, [r4, #0]
 800323c:	60a5      	str	r5, [r4, #8]
 800323e:	463e      	mov	r6, r7
 8003240:	42be      	cmp	r6, r7
 8003242:	d900      	bls.n	8003246 <__ssputs_r+0x72>
 8003244:	463e      	mov	r6, r7
 8003246:	6820      	ldr	r0, [r4, #0]
 8003248:	4632      	mov	r2, r6
 800324a:	4641      	mov	r1, r8
 800324c:	f000 faa6 	bl	800379c <memmove>
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	1b9b      	subs	r3, r3, r6
 8003254:	60a3      	str	r3, [r4, #8]
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	4433      	add	r3, r6
 800325a:	6023      	str	r3, [r4, #0]
 800325c:	2000      	movs	r0, #0
 800325e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003262:	462a      	mov	r2, r5
 8003264:	f000 fad2 	bl	800380c <_realloc_r>
 8003268:	4606      	mov	r6, r0
 800326a:	2800      	cmp	r0, #0
 800326c:	d1e0      	bne.n	8003230 <__ssputs_r+0x5c>
 800326e:	6921      	ldr	r1, [r4, #16]
 8003270:	4650      	mov	r0, sl
 8003272:	f7ff feb7 	bl	8002fe4 <_free_r>
 8003276:	230c      	movs	r3, #12
 8003278:	f8ca 3000 	str.w	r3, [sl]
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003282:	81a3      	strh	r3, [r4, #12]
 8003284:	f04f 30ff 	mov.w	r0, #4294967295
 8003288:	e7e9      	b.n	800325e <__ssputs_r+0x8a>
	...

0800328c <_svfiprintf_r>:
 800328c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003290:	4698      	mov	r8, r3
 8003292:	898b      	ldrh	r3, [r1, #12]
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	b09d      	sub	sp, #116	@ 0x74
 8003298:	4607      	mov	r7, r0
 800329a:	460d      	mov	r5, r1
 800329c:	4614      	mov	r4, r2
 800329e:	d510      	bpl.n	80032c2 <_svfiprintf_r+0x36>
 80032a0:	690b      	ldr	r3, [r1, #16]
 80032a2:	b973      	cbnz	r3, 80032c2 <_svfiprintf_r+0x36>
 80032a4:	2140      	movs	r1, #64	@ 0x40
 80032a6:	f7ff ff09 	bl	80030bc <_malloc_r>
 80032aa:	6028      	str	r0, [r5, #0]
 80032ac:	6128      	str	r0, [r5, #16]
 80032ae:	b930      	cbnz	r0, 80032be <_svfiprintf_r+0x32>
 80032b0:	230c      	movs	r3, #12
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	b01d      	add	sp, #116	@ 0x74
 80032ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032be:	2340      	movs	r3, #64	@ 0x40
 80032c0:	616b      	str	r3, [r5, #20]
 80032c2:	2300      	movs	r3, #0
 80032c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80032c6:	2320      	movs	r3, #32
 80032c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80032d0:	2330      	movs	r3, #48	@ 0x30
 80032d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003470 <_svfiprintf_r+0x1e4>
 80032d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032da:	f04f 0901 	mov.w	r9, #1
 80032de:	4623      	mov	r3, r4
 80032e0:	469a      	mov	sl, r3
 80032e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032e6:	b10a      	cbz	r2, 80032ec <_svfiprintf_r+0x60>
 80032e8:	2a25      	cmp	r2, #37	@ 0x25
 80032ea:	d1f9      	bne.n	80032e0 <_svfiprintf_r+0x54>
 80032ec:	ebba 0b04 	subs.w	fp, sl, r4
 80032f0:	d00b      	beq.n	800330a <_svfiprintf_r+0x7e>
 80032f2:	465b      	mov	r3, fp
 80032f4:	4622      	mov	r2, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff6b 	bl	80031d4 <__ssputs_r>
 80032fe:	3001      	adds	r0, #1
 8003300:	f000 80a7 	beq.w	8003452 <_svfiprintf_r+0x1c6>
 8003304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003306:	445a      	add	r2, fp
 8003308:	9209      	str	r2, [sp, #36]	@ 0x24
 800330a:	f89a 3000 	ldrb.w	r3, [sl]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 809f 	beq.w	8003452 <_svfiprintf_r+0x1c6>
 8003314:	2300      	movs	r3, #0
 8003316:	f04f 32ff 	mov.w	r2, #4294967295
 800331a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800331e:	f10a 0a01 	add.w	sl, sl, #1
 8003322:	9304      	str	r3, [sp, #16]
 8003324:	9307      	str	r3, [sp, #28]
 8003326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800332a:	931a      	str	r3, [sp, #104]	@ 0x68
 800332c:	4654      	mov	r4, sl
 800332e:	2205      	movs	r2, #5
 8003330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003334:	484e      	ldr	r0, [pc, #312]	@ (8003470 <_svfiprintf_r+0x1e4>)
 8003336:	f7fc ff73 	bl	8000220 <memchr>
 800333a:	9a04      	ldr	r2, [sp, #16]
 800333c:	b9d8      	cbnz	r0, 8003376 <_svfiprintf_r+0xea>
 800333e:	06d0      	lsls	r0, r2, #27
 8003340:	bf44      	itt	mi
 8003342:	2320      	movmi	r3, #32
 8003344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003348:	0711      	lsls	r1, r2, #28
 800334a:	bf44      	itt	mi
 800334c:	232b      	movmi	r3, #43	@ 0x2b
 800334e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003352:	f89a 3000 	ldrb.w	r3, [sl]
 8003356:	2b2a      	cmp	r3, #42	@ 0x2a
 8003358:	d015      	beq.n	8003386 <_svfiprintf_r+0xfa>
 800335a:	9a07      	ldr	r2, [sp, #28]
 800335c:	4654      	mov	r4, sl
 800335e:	2000      	movs	r0, #0
 8003360:	f04f 0c0a 	mov.w	ip, #10
 8003364:	4621      	mov	r1, r4
 8003366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800336a:	3b30      	subs	r3, #48	@ 0x30
 800336c:	2b09      	cmp	r3, #9
 800336e:	d94b      	bls.n	8003408 <_svfiprintf_r+0x17c>
 8003370:	b1b0      	cbz	r0, 80033a0 <_svfiprintf_r+0x114>
 8003372:	9207      	str	r2, [sp, #28]
 8003374:	e014      	b.n	80033a0 <_svfiprintf_r+0x114>
 8003376:	eba0 0308 	sub.w	r3, r0, r8
 800337a:	fa09 f303 	lsl.w	r3, r9, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	9304      	str	r3, [sp, #16]
 8003382:	46a2      	mov	sl, r4
 8003384:	e7d2      	b.n	800332c <_svfiprintf_r+0xa0>
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	1d19      	adds	r1, r3, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	9103      	str	r1, [sp, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	bfbb      	ittet	lt
 8003392:	425b      	neglt	r3, r3
 8003394:	f042 0202 	orrlt.w	r2, r2, #2
 8003398:	9307      	strge	r3, [sp, #28]
 800339a:	9307      	strlt	r3, [sp, #28]
 800339c:	bfb8      	it	lt
 800339e:	9204      	strlt	r2, [sp, #16]
 80033a0:	7823      	ldrb	r3, [r4, #0]
 80033a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80033a4:	d10a      	bne.n	80033bc <_svfiprintf_r+0x130>
 80033a6:	7863      	ldrb	r3, [r4, #1]
 80033a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033aa:	d132      	bne.n	8003412 <_svfiprintf_r+0x186>
 80033ac:	9b03      	ldr	r3, [sp, #12]
 80033ae:	1d1a      	adds	r2, r3, #4
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	9203      	str	r2, [sp, #12]
 80033b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033b8:	3402      	adds	r4, #2
 80033ba:	9305      	str	r3, [sp, #20]
 80033bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003480 <_svfiprintf_r+0x1f4>
 80033c0:	7821      	ldrb	r1, [r4, #0]
 80033c2:	2203      	movs	r2, #3
 80033c4:	4650      	mov	r0, sl
 80033c6:	f7fc ff2b 	bl	8000220 <memchr>
 80033ca:	b138      	cbz	r0, 80033dc <_svfiprintf_r+0x150>
 80033cc:	9b04      	ldr	r3, [sp, #16]
 80033ce:	eba0 000a 	sub.w	r0, r0, sl
 80033d2:	2240      	movs	r2, #64	@ 0x40
 80033d4:	4082      	lsls	r2, r0
 80033d6:	4313      	orrs	r3, r2
 80033d8:	3401      	adds	r4, #1
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033e0:	4824      	ldr	r0, [pc, #144]	@ (8003474 <_svfiprintf_r+0x1e8>)
 80033e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033e6:	2206      	movs	r2, #6
 80033e8:	f7fc ff1a 	bl	8000220 <memchr>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	d036      	beq.n	800345e <_svfiprintf_r+0x1d2>
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <_svfiprintf_r+0x1ec>)
 80033f2:	bb1b      	cbnz	r3, 800343c <_svfiprintf_r+0x1b0>
 80033f4:	9b03      	ldr	r3, [sp, #12]
 80033f6:	3307      	adds	r3, #7
 80033f8:	f023 0307 	bic.w	r3, r3, #7
 80033fc:	3308      	adds	r3, #8
 80033fe:	9303      	str	r3, [sp, #12]
 8003400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003402:	4433      	add	r3, r6
 8003404:	9309      	str	r3, [sp, #36]	@ 0x24
 8003406:	e76a      	b.n	80032de <_svfiprintf_r+0x52>
 8003408:	fb0c 3202 	mla	r2, ip, r2, r3
 800340c:	460c      	mov	r4, r1
 800340e:	2001      	movs	r0, #1
 8003410:	e7a8      	b.n	8003364 <_svfiprintf_r+0xd8>
 8003412:	2300      	movs	r3, #0
 8003414:	3401      	adds	r4, #1
 8003416:	9305      	str	r3, [sp, #20]
 8003418:	4619      	mov	r1, r3
 800341a:	f04f 0c0a 	mov.w	ip, #10
 800341e:	4620      	mov	r0, r4
 8003420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003424:	3a30      	subs	r2, #48	@ 0x30
 8003426:	2a09      	cmp	r2, #9
 8003428:	d903      	bls.n	8003432 <_svfiprintf_r+0x1a6>
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0c6      	beq.n	80033bc <_svfiprintf_r+0x130>
 800342e:	9105      	str	r1, [sp, #20]
 8003430:	e7c4      	b.n	80033bc <_svfiprintf_r+0x130>
 8003432:	fb0c 2101 	mla	r1, ip, r1, r2
 8003436:	4604      	mov	r4, r0
 8003438:	2301      	movs	r3, #1
 800343a:	e7f0      	b.n	800341e <_svfiprintf_r+0x192>
 800343c:	ab03      	add	r3, sp, #12
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	462a      	mov	r2, r5
 8003442:	4b0e      	ldr	r3, [pc, #56]	@ (800347c <_svfiprintf_r+0x1f0>)
 8003444:	a904      	add	r1, sp, #16
 8003446:	4638      	mov	r0, r7
 8003448:	f3af 8000 	nop.w
 800344c:	1c42      	adds	r2, r0, #1
 800344e:	4606      	mov	r6, r0
 8003450:	d1d6      	bne.n	8003400 <_svfiprintf_r+0x174>
 8003452:	89ab      	ldrh	r3, [r5, #12]
 8003454:	065b      	lsls	r3, r3, #25
 8003456:	f53f af2d 	bmi.w	80032b4 <_svfiprintf_r+0x28>
 800345a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800345c:	e72c      	b.n	80032b8 <_svfiprintf_r+0x2c>
 800345e:	ab03      	add	r3, sp, #12
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	462a      	mov	r2, r5
 8003464:	4b05      	ldr	r3, [pc, #20]	@ (800347c <_svfiprintf_r+0x1f0>)
 8003466:	a904      	add	r1, sp, #16
 8003468:	4638      	mov	r0, r7
 800346a:	f000 f879 	bl	8003560 <_printf_i>
 800346e:	e7ed      	b.n	800344c <_svfiprintf_r+0x1c0>
 8003470:	080038b0 	.word	0x080038b0
 8003474:	080038ba 	.word	0x080038ba
 8003478:	00000000 	.word	0x00000000
 800347c:	080031d5 	.word	0x080031d5
 8003480:	080038b6 	.word	0x080038b6

08003484 <_printf_common>:
 8003484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	4616      	mov	r6, r2
 800348a:	4698      	mov	r8, r3
 800348c:	688a      	ldr	r2, [r1, #8]
 800348e:	690b      	ldr	r3, [r1, #16]
 8003490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003494:	4293      	cmp	r3, r2
 8003496:	bfb8      	it	lt
 8003498:	4613      	movlt	r3, r2
 800349a:	6033      	str	r3, [r6, #0]
 800349c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034a0:	4607      	mov	r7, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	b10a      	cbz	r2, 80034aa <_printf_common+0x26>
 80034a6:	3301      	adds	r3, #1
 80034a8:	6033      	str	r3, [r6, #0]
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	0699      	lsls	r1, r3, #26
 80034ae:	bf42      	ittt	mi
 80034b0:	6833      	ldrmi	r3, [r6, #0]
 80034b2:	3302      	addmi	r3, #2
 80034b4:	6033      	strmi	r3, [r6, #0]
 80034b6:	6825      	ldr	r5, [r4, #0]
 80034b8:	f015 0506 	ands.w	r5, r5, #6
 80034bc:	d106      	bne.n	80034cc <_printf_common+0x48>
 80034be:	f104 0a19 	add.w	sl, r4, #25
 80034c2:	68e3      	ldr	r3, [r4, #12]
 80034c4:	6832      	ldr	r2, [r6, #0]
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	42ab      	cmp	r3, r5
 80034ca:	dc26      	bgt.n	800351a <_printf_common+0x96>
 80034cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034d0:	6822      	ldr	r2, [r4, #0]
 80034d2:	3b00      	subs	r3, #0
 80034d4:	bf18      	it	ne
 80034d6:	2301      	movne	r3, #1
 80034d8:	0692      	lsls	r2, r2, #26
 80034da:	d42b      	bmi.n	8003534 <_printf_common+0xb0>
 80034dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034e0:	4641      	mov	r1, r8
 80034e2:	4638      	mov	r0, r7
 80034e4:	47c8      	blx	r9
 80034e6:	3001      	adds	r0, #1
 80034e8:	d01e      	beq.n	8003528 <_printf_common+0xa4>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	6922      	ldr	r2, [r4, #16]
 80034ee:	f003 0306 	and.w	r3, r3, #6
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	bf02      	ittt	eq
 80034f6:	68e5      	ldreq	r5, [r4, #12]
 80034f8:	6833      	ldreq	r3, [r6, #0]
 80034fa:	1aed      	subeq	r5, r5, r3
 80034fc:	68a3      	ldr	r3, [r4, #8]
 80034fe:	bf0c      	ite	eq
 8003500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003504:	2500      	movne	r5, #0
 8003506:	4293      	cmp	r3, r2
 8003508:	bfc4      	itt	gt
 800350a:	1a9b      	subgt	r3, r3, r2
 800350c:	18ed      	addgt	r5, r5, r3
 800350e:	2600      	movs	r6, #0
 8003510:	341a      	adds	r4, #26
 8003512:	42b5      	cmp	r5, r6
 8003514:	d11a      	bne.n	800354c <_printf_common+0xc8>
 8003516:	2000      	movs	r0, #0
 8003518:	e008      	b.n	800352c <_printf_common+0xa8>
 800351a:	2301      	movs	r3, #1
 800351c:	4652      	mov	r2, sl
 800351e:	4641      	mov	r1, r8
 8003520:	4638      	mov	r0, r7
 8003522:	47c8      	blx	r9
 8003524:	3001      	adds	r0, #1
 8003526:	d103      	bne.n	8003530 <_printf_common+0xac>
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003530:	3501      	adds	r5, #1
 8003532:	e7c6      	b.n	80034c2 <_printf_common+0x3e>
 8003534:	18e1      	adds	r1, r4, r3
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	2030      	movs	r0, #48	@ 0x30
 800353a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800353e:	4422      	add	r2, r4
 8003540:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003548:	3302      	adds	r3, #2
 800354a:	e7c7      	b.n	80034dc <_printf_common+0x58>
 800354c:	2301      	movs	r3, #1
 800354e:	4622      	mov	r2, r4
 8003550:	4641      	mov	r1, r8
 8003552:	4638      	mov	r0, r7
 8003554:	47c8      	blx	r9
 8003556:	3001      	adds	r0, #1
 8003558:	d0e6      	beq.n	8003528 <_printf_common+0xa4>
 800355a:	3601      	adds	r6, #1
 800355c:	e7d9      	b.n	8003512 <_printf_common+0x8e>
	...

08003560 <_printf_i>:
 8003560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003564:	7e0f      	ldrb	r7, [r1, #24]
 8003566:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003568:	2f78      	cmp	r7, #120	@ 0x78
 800356a:	4691      	mov	r9, r2
 800356c:	4680      	mov	r8, r0
 800356e:	460c      	mov	r4, r1
 8003570:	469a      	mov	sl, r3
 8003572:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003576:	d807      	bhi.n	8003588 <_printf_i+0x28>
 8003578:	2f62      	cmp	r7, #98	@ 0x62
 800357a:	d80a      	bhi.n	8003592 <_printf_i+0x32>
 800357c:	2f00      	cmp	r7, #0
 800357e:	f000 80d1 	beq.w	8003724 <_printf_i+0x1c4>
 8003582:	2f58      	cmp	r7, #88	@ 0x58
 8003584:	f000 80b8 	beq.w	80036f8 <_printf_i+0x198>
 8003588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800358c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003590:	e03a      	b.n	8003608 <_printf_i+0xa8>
 8003592:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003596:	2b15      	cmp	r3, #21
 8003598:	d8f6      	bhi.n	8003588 <_printf_i+0x28>
 800359a:	a101      	add	r1, pc, #4	@ (adr r1, 80035a0 <_printf_i+0x40>)
 800359c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035a0:	080035f9 	.word	0x080035f9
 80035a4:	0800360d 	.word	0x0800360d
 80035a8:	08003589 	.word	0x08003589
 80035ac:	08003589 	.word	0x08003589
 80035b0:	08003589 	.word	0x08003589
 80035b4:	08003589 	.word	0x08003589
 80035b8:	0800360d 	.word	0x0800360d
 80035bc:	08003589 	.word	0x08003589
 80035c0:	08003589 	.word	0x08003589
 80035c4:	08003589 	.word	0x08003589
 80035c8:	08003589 	.word	0x08003589
 80035cc:	0800370b 	.word	0x0800370b
 80035d0:	08003637 	.word	0x08003637
 80035d4:	080036c5 	.word	0x080036c5
 80035d8:	08003589 	.word	0x08003589
 80035dc:	08003589 	.word	0x08003589
 80035e0:	0800372d 	.word	0x0800372d
 80035e4:	08003589 	.word	0x08003589
 80035e8:	08003637 	.word	0x08003637
 80035ec:	08003589 	.word	0x08003589
 80035f0:	08003589 	.word	0x08003589
 80035f4:	080036cd 	.word	0x080036cd
 80035f8:	6833      	ldr	r3, [r6, #0]
 80035fa:	1d1a      	adds	r2, r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6032      	str	r2, [r6, #0]
 8003600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003604:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003608:	2301      	movs	r3, #1
 800360a:	e09c      	b.n	8003746 <_printf_i+0x1e6>
 800360c:	6833      	ldr	r3, [r6, #0]
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1d19      	adds	r1, r3, #4
 8003612:	6031      	str	r1, [r6, #0]
 8003614:	0606      	lsls	r6, r0, #24
 8003616:	d501      	bpl.n	800361c <_printf_i+0xbc>
 8003618:	681d      	ldr	r5, [r3, #0]
 800361a:	e003      	b.n	8003624 <_printf_i+0xc4>
 800361c:	0645      	lsls	r5, r0, #25
 800361e:	d5fb      	bpl.n	8003618 <_printf_i+0xb8>
 8003620:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003624:	2d00      	cmp	r5, #0
 8003626:	da03      	bge.n	8003630 <_printf_i+0xd0>
 8003628:	232d      	movs	r3, #45	@ 0x2d
 800362a:	426d      	negs	r5, r5
 800362c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003630:	4858      	ldr	r0, [pc, #352]	@ (8003794 <_printf_i+0x234>)
 8003632:	230a      	movs	r3, #10
 8003634:	e011      	b.n	800365a <_printf_i+0xfa>
 8003636:	6821      	ldr	r1, [r4, #0]
 8003638:	6833      	ldr	r3, [r6, #0]
 800363a:	0608      	lsls	r0, r1, #24
 800363c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003640:	d402      	bmi.n	8003648 <_printf_i+0xe8>
 8003642:	0649      	lsls	r1, r1, #25
 8003644:	bf48      	it	mi
 8003646:	b2ad      	uxthmi	r5, r5
 8003648:	2f6f      	cmp	r7, #111	@ 0x6f
 800364a:	4852      	ldr	r0, [pc, #328]	@ (8003794 <_printf_i+0x234>)
 800364c:	6033      	str	r3, [r6, #0]
 800364e:	bf14      	ite	ne
 8003650:	230a      	movne	r3, #10
 8003652:	2308      	moveq	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800365a:	6866      	ldr	r6, [r4, #4]
 800365c:	60a6      	str	r6, [r4, #8]
 800365e:	2e00      	cmp	r6, #0
 8003660:	db05      	blt.n	800366e <_printf_i+0x10e>
 8003662:	6821      	ldr	r1, [r4, #0]
 8003664:	432e      	orrs	r6, r5
 8003666:	f021 0104 	bic.w	r1, r1, #4
 800366a:	6021      	str	r1, [r4, #0]
 800366c:	d04b      	beq.n	8003706 <_printf_i+0x1a6>
 800366e:	4616      	mov	r6, r2
 8003670:	fbb5 f1f3 	udiv	r1, r5, r3
 8003674:	fb03 5711 	mls	r7, r3, r1, r5
 8003678:	5dc7      	ldrb	r7, [r0, r7]
 800367a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800367e:	462f      	mov	r7, r5
 8003680:	42bb      	cmp	r3, r7
 8003682:	460d      	mov	r5, r1
 8003684:	d9f4      	bls.n	8003670 <_printf_i+0x110>
 8003686:	2b08      	cmp	r3, #8
 8003688:	d10b      	bne.n	80036a2 <_printf_i+0x142>
 800368a:	6823      	ldr	r3, [r4, #0]
 800368c:	07df      	lsls	r7, r3, #31
 800368e:	d508      	bpl.n	80036a2 <_printf_i+0x142>
 8003690:	6923      	ldr	r3, [r4, #16]
 8003692:	6861      	ldr	r1, [r4, #4]
 8003694:	4299      	cmp	r1, r3
 8003696:	bfde      	ittt	le
 8003698:	2330      	movle	r3, #48	@ 0x30
 800369a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800369e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036a2:	1b92      	subs	r2, r2, r6
 80036a4:	6122      	str	r2, [r4, #16]
 80036a6:	f8cd a000 	str.w	sl, [sp]
 80036aa:	464b      	mov	r3, r9
 80036ac:	aa03      	add	r2, sp, #12
 80036ae:	4621      	mov	r1, r4
 80036b0:	4640      	mov	r0, r8
 80036b2:	f7ff fee7 	bl	8003484 <_printf_common>
 80036b6:	3001      	adds	r0, #1
 80036b8:	d14a      	bne.n	8003750 <_printf_i+0x1f0>
 80036ba:	f04f 30ff 	mov.w	r0, #4294967295
 80036be:	b004      	add	sp, #16
 80036c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	f043 0320 	orr.w	r3, r3, #32
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	4832      	ldr	r0, [pc, #200]	@ (8003798 <_printf_i+0x238>)
 80036ce:	2778      	movs	r7, #120	@ 0x78
 80036d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	6831      	ldr	r1, [r6, #0]
 80036d8:	061f      	lsls	r7, r3, #24
 80036da:	f851 5b04 	ldr.w	r5, [r1], #4
 80036de:	d402      	bmi.n	80036e6 <_printf_i+0x186>
 80036e0:	065f      	lsls	r7, r3, #25
 80036e2:	bf48      	it	mi
 80036e4:	b2ad      	uxthmi	r5, r5
 80036e6:	6031      	str	r1, [r6, #0]
 80036e8:	07d9      	lsls	r1, r3, #31
 80036ea:	bf44      	itt	mi
 80036ec:	f043 0320 	orrmi.w	r3, r3, #32
 80036f0:	6023      	strmi	r3, [r4, #0]
 80036f2:	b11d      	cbz	r5, 80036fc <_printf_i+0x19c>
 80036f4:	2310      	movs	r3, #16
 80036f6:	e7ad      	b.n	8003654 <_printf_i+0xf4>
 80036f8:	4826      	ldr	r0, [pc, #152]	@ (8003794 <_printf_i+0x234>)
 80036fa:	e7e9      	b.n	80036d0 <_printf_i+0x170>
 80036fc:	6823      	ldr	r3, [r4, #0]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	e7f6      	b.n	80036f4 <_printf_i+0x194>
 8003706:	4616      	mov	r6, r2
 8003708:	e7bd      	b.n	8003686 <_printf_i+0x126>
 800370a:	6833      	ldr	r3, [r6, #0]
 800370c:	6825      	ldr	r5, [r4, #0]
 800370e:	6961      	ldr	r1, [r4, #20]
 8003710:	1d18      	adds	r0, r3, #4
 8003712:	6030      	str	r0, [r6, #0]
 8003714:	062e      	lsls	r6, r5, #24
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	d501      	bpl.n	800371e <_printf_i+0x1be>
 800371a:	6019      	str	r1, [r3, #0]
 800371c:	e002      	b.n	8003724 <_printf_i+0x1c4>
 800371e:	0668      	lsls	r0, r5, #25
 8003720:	d5fb      	bpl.n	800371a <_printf_i+0x1ba>
 8003722:	8019      	strh	r1, [r3, #0]
 8003724:	2300      	movs	r3, #0
 8003726:	6123      	str	r3, [r4, #16]
 8003728:	4616      	mov	r6, r2
 800372a:	e7bc      	b.n	80036a6 <_printf_i+0x146>
 800372c:	6833      	ldr	r3, [r6, #0]
 800372e:	1d1a      	adds	r2, r3, #4
 8003730:	6032      	str	r2, [r6, #0]
 8003732:	681e      	ldr	r6, [r3, #0]
 8003734:	6862      	ldr	r2, [r4, #4]
 8003736:	2100      	movs	r1, #0
 8003738:	4630      	mov	r0, r6
 800373a:	f7fc fd71 	bl	8000220 <memchr>
 800373e:	b108      	cbz	r0, 8003744 <_printf_i+0x1e4>
 8003740:	1b80      	subs	r0, r0, r6
 8003742:	6060      	str	r0, [r4, #4]
 8003744:	6863      	ldr	r3, [r4, #4]
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	2300      	movs	r3, #0
 800374a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800374e:	e7aa      	b.n	80036a6 <_printf_i+0x146>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	4632      	mov	r2, r6
 8003754:	4649      	mov	r1, r9
 8003756:	4640      	mov	r0, r8
 8003758:	47d0      	blx	sl
 800375a:	3001      	adds	r0, #1
 800375c:	d0ad      	beq.n	80036ba <_printf_i+0x15a>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	079b      	lsls	r3, r3, #30
 8003762:	d413      	bmi.n	800378c <_printf_i+0x22c>
 8003764:	68e0      	ldr	r0, [r4, #12]
 8003766:	9b03      	ldr	r3, [sp, #12]
 8003768:	4298      	cmp	r0, r3
 800376a:	bfb8      	it	lt
 800376c:	4618      	movlt	r0, r3
 800376e:	e7a6      	b.n	80036be <_printf_i+0x15e>
 8003770:	2301      	movs	r3, #1
 8003772:	4632      	mov	r2, r6
 8003774:	4649      	mov	r1, r9
 8003776:	4640      	mov	r0, r8
 8003778:	47d0      	blx	sl
 800377a:	3001      	adds	r0, #1
 800377c:	d09d      	beq.n	80036ba <_printf_i+0x15a>
 800377e:	3501      	adds	r5, #1
 8003780:	68e3      	ldr	r3, [r4, #12]
 8003782:	9903      	ldr	r1, [sp, #12]
 8003784:	1a5b      	subs	r3, r3, r1
 8003786:	42ab      	cmp	r3, r5
 8003788:	dcf2      	bgt.n	8003770 <_printf_i+0x210>
 800378a:	e7eb      	b.n	8003764 <_printf_i+0x204>
 800378c:	2500      	movs	r5, #0
 800378e:	f104 0619 	add.w	r6, r4, #25
 8003792:	e7f5      	b.n	8003780 <_printf_i+0x220>
 8003794:	080038c1 	.word	0x080038c1
 8003798:	080038d2 	.word	0x080038d2

0800379c <memmove>:
 800379c:	4288      	cmp	r0, r1
 800379e:	b510      	push	{r4, lr}
 80037a0:	eb01 0402 	add.w	r4, r1, r2
 80037a4:	d902      	bls.n	80037ac <memmove+0x10>
 80037a6:	4284      	cmp	r4, r0
 80037a8:	4623      	mov	r3, r4
 80037aa:	d807      	bhi.n	80037bc <memmove+0x20>
 80037ac:	1e43      	subs	r3, r0, #1
 80037ae:	42a1      	cmp	r1, r4
 80037b0:	d008      	beq.n	80037c4 <memmove+0x28>
 80037b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80037b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80037ba:	e7f8      	b.n	80037ae <memmove+0x12>
 80037bc:	4402      	add	r2, r0
 80037be:	4601      	mov	r1, r0
 80037c0:	428a      	cmp	r2, r1
 80037c2:	d100      	bne.n	80037c6 <memmove+0x2a>
 80037c4:	bd10      	pop	{r4, pc}
 80037c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80037ce:	e7f7      	b.n	80037c0 <memmove+0x24>

080037d0 <_sbrk_r>:
 80037d0:	b538      	push	{r3, r4, r5, lr}
 80037d2:	4d06      	ldr	r5, [pc, #24]	@ (80037ec <_sbrk_r+0x1c>)
 80037d4:	2300      	movs	r3, #0
 80037d6:	4604      	mov	r4, r0
 80037d8:	4608      	mov	r0, r1
 80037da:	602b      	str	r3, [r5, #0]
 80037dc:	f7fd f9bc 	bl	8000b58 <_sbrk>
 80037e0:	1c43      	adds	r3, r0, #1
 80037e2:	d102      	bne.n	80037ea <_sbrk_r+0x1a>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	b103      	cbz	r3, 80037ea <_sbrk_r+0x1a>
 80037e8:	6023      	str	r3, [r4, #0]
 80037ea:	bd38      	pop	{r3, r4, r5, pc}
 80037ec:	20000280 	.word	0x20000280

080037f0 <memcpy>:
 80037f0:	440a      	add	r2, r1
 80037f2:	4291      	cmp	r1, r2
 80037f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80037f8:	d100      	bne.n	80037fc <memcpy+0xc>
 80037fa:	4770      	bx	lr
 80037fc:	b510      	push	{r4, lr}
 80037fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003806:	4291      	cmp	r1, r2
 8003808:	d1f9      	bne.n	80037fe <memcpy+0xe>
 800380a:	bd10      	pop	{r4, pc}

0800380c <_realloc_r>:
 800380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003810:	4607      	mov	r7, r0
 8003812:	4614      	mov	r4, r2
 8003814:	460d      	mov	r5, r1
 8003816:	b921      	cbnz	r1, 8003822 <_realloc_r+0x16>
 8003818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800381c:	4611      	mov	r1, r2
 800381e:	f7ff bc4d 	b.w	80030bc <_malloc_r>
 8003822:	b92a      	cbnz	r2, 8003830 <_realloc_r+0x24>
 8003824:	f7ff fbde 	bl	8002fe4 <_free_r>
 8003828:	4625      	mov	r5, r4
 800382a:	4628      	mov	r0, r5
 800382c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003830:	f000 f81a 	bl	8003868 <_malloc_usable_size_r>
 8003834:	4284      	cmp	r4, r0
 8003836:	4606      	mov	r6, r0
 8003838:	d802      	bhi.n	8003840 <_realloc_r+0x34>
 800383a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800383e:	d8f4      	bhi.n	800382a <_realloc_r+0x1e>
 8003840:	4621      	mov	r1, r4
 8003842:	4638      	mov	r0, r7
 8003844:	f7ff fc3a 	bl	80030bc <_malloc_r>
 8003848:	4680      	mov	r8, r0
 800384a:	b908      	cbnz	r0, 8003850 <_realloc_r+0x44>
 800384c:	4645      	mov	r5, r8
 800384e:	e7ec      	b.n	800382a <_realloc_r+0x1e>
 8003850:	42b4      	cmp	r4, r6
 8003852:	4622      	mov	r2, r4
 8003854:	4629      	mov	r1, r5
 8003856:	bf28      	it	cs
 8003858:	4632      	movcs	r2, r6
 800385a:	f7ff ffc9 	bl	80037f0 <memcpy>
 800385e:	4629      	mov	r1, r5
 8003860:	4638      	mov	r0, r7
 8003862:	f7ff fbbf 	bl	8002fe4 <_free_r>
 8003866:	e7f1      	b.n	800384c <_realloc_r+0x40>

08003868 <_malloc_usable_size_r>:
 8003868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800386c:	1f18      	subs	r0, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	bfbc      	itt	lt
 8003872:	580b      	ldrlt	r3, [r1, r0]
 8003874:	18c0      	addlt	r0, r0, r3
 8003876:	4770      	bx	lr

08003878 <_init>:
 8003878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387a:	bf00      	nop
 800387c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387e:	bc08      	pop	{r3}
 8003880:	469e      	mov	lr, r3
 8003882:	4770      	bx	lr

08003884 <_fini>:
 8003884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003886:	bf00      	nop
 8003888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388a:	bc08      	pop	{r3}
 800388c:	469e      	mov	lr, r3
 800388e:	4770      	bx	lr
