
I2C_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ef4  08004ef4  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ef4  08004ef4  00005ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004efc  08004efc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004efc  08004efc  00005efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f00  08004f00  00005f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004f04  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08004f6c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004f6c  00006278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf83  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d77  00000000  00000000  0001201b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00013d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086e  00000000  00000000  00014868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223ea  00000000  00000000  000150d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e682  00000000  00000000  000374c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd0a  00000000  00000000  00045b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011284c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032e8  00000000  00000000  00112890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00115b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004e80 	.word	0x08004e80

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004e80 	.word	0x08004e80

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <__io_putchar>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c);
int __io_putchar(int ch)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000538:	1d39      	adds	r1, r7, #4
 800053a:	f04f 33ff 	mov.w	r3, #4294967295
 800053e:	2201      	movs	r2, #1
 8000540:	4803      	ldr	r0, [pc, #12]	@ (8000550 <__io_putchar+0x20>)
 8000542:	f003 fc35 	bl	8003db0 <HAL_UART_Transmit>
    return ch;
 8000546:	687b      	ldr	r3, [r7, #4]
}
 8000548:	4618      	mov	r0, r3
 800054a:	3708      	adds	r7, #8
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200000d8 	.word	0x200000d8

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000558:	f000 fb60 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f838 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f8fc 	bl	800075c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000564:	f000 f8d0 	bl	8000708 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000568:	f000 f8a0 	bl	80006ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);  // تأكد الليد مطفي
 800056c:	2200      	movs	r2, #0
 800056e:	2120      	movs	r1, #32
 8000570:	4811      	ldr	r0, [pc, #68]	@ (80005b8 <main+0x64>)
 8000572:	f000 fed7 	bl	8001324 <HAL_GPIO_WritePin>
  // Start EXTI (interrupt) for button PC13
  //HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  //HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  HAL_Delay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057a:	f000 fbc1 	bl	8000d00 <HAL_Delay>
  /* USER CODE END 2 */
  printf("Master started. Waiting for button press...\r\n");
 800057e:	480f      	ldr	r0, [pc, #60]	@ (80005bc <main+0x68>)
 8000580:	f004 f8ea 	bl	8004758 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Just for indication (optional)
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 8000584:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <main+0x6c>)
 800058a:	f000 feb3 	bl	80012f4 <HAL_GPIO_ReadPin>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1f7      	bne.n	8000584 <main+0x30>
	          tx_data = 0x80;
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <main+0x70>)
 8000596:	2280      	movs	r2, #128	@ 0x80
 8000598:	701a      	strb	r2, [r3, #0]
	          HAL_I2C_Master_Transmit_IT(&hi2c1, 0x64 << 1, &tx_data, 1);
 800059a:	2301      	movs	r3, #1
 800059c:	4a09      	ldr	r2, [pc, #36]	@ (80005c4 <main+0x70>)
 800059e:	21c8      	movs	r1, #200	@ 0xc8
 80005a0:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x74>)
 80005a2:	f001 f833 	bl	800160c <HAL_I2C_Master_Transmit_IT>
	          printf("Button Pressed!\r\n");
 80005a6:	4809      	ldr	r0, [pc, #36]	@ (80005cc <main+0x78>)
 80005a8:	f004 f8d6 	bl	8004758 <puts>
	          HAL_Delay(500);
 80005ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b0:	f000 fba6 	bl	8000d00 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80005b4:	e7e6      	b.n	8000584 <main+0x30>
 80005b6:	bf00      	nop
 80005b8:	40020000 	.word	0x40020000
 80005bc:	08004e98 	.word	0x08004e98
 80005c0:	40020800 	.word	0x40020800
 80005c4:	20000120 	.word	0x20000120
 80005c8:	20000084 	.word	0x20000084
 80005cc:	08004ec8 	.word	0x08004ec8

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	@ 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f99a 	bl	8004918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <SystemClock_Config+0xd4>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a29      	ldr	r2, [pc, #164]	@ (80006a4 <SystemClock_Config+0xd4>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <SystemClock_Config+0xd4>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4b24      	ldr	r3, [pc, #144]	@ (80006a8 <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800061c:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <SystemClock_Config+0xd8>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <SystemClock_Config+0xd8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000644:	2310      	movs	r3, #16
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000648:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800064c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800064e:	2304      	movs	r3, #4
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000656:	2302      	movs	r3, #2
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f8b8 	bl	80037d4 <HAL_RCC_OscConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066a:	f000 f8e5 	bl	8000838 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	230f      	movs	r3, #15
 8000670:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000672:	2302      	movs	r3, #2
 8000674:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2102      	movs	r1, #2
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fd58 	bl	8003140 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000696:	f000 f8cf 	bl	8000838 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	@ 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f000 fe35 	bl	8001358 <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 f8a0 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000084 	.word	0x20000084
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800070c:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800070e:	4a12      	ldr	r2, [pc, #72]	@ (8000758 <MX_USART2_UART_Init+0x50>)
 8000710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x4c>)
 8000740:	f003 fae6 	bl	8003d10 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800074a:	f000 f875 	bl	8000838 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000d8 	.word	0x200000d8
 8000758:	40004400 	.word	0x40004400

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b2d      	ldr	r3, [pc, #180]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a2c      	ldr	r2, [pc, #176]	@ (800082c <MX_GPIO_Init+0xd0>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b26      	ldr	r3, [pc, #152]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <MX_GPIO_Init+0xd0>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b1c      	ldr	r3, [pc, #112]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b18      	ldr	r3, [pc, #96]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2120      	movs	r1, #32
 80007e6:	4812      	ldr	r0, [pc, #72]	@ (8000830 <MX_GPIO_Init+0xd4>)
 80007e8:	f000 fd9c 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	480c      	ldr	r0, [pc, #48]	@ (8000834 <MX_GPIO_Init+0xd8>)
 8000804:	f000 fbe2 	bl	8000fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_GPIO_Init+0xd4>)
 8000820:	f000 fbd4 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000824:	bf00      	nop
 8000826:	3728      	adds	r7, #40	@ 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40020000 	.word	0x40020000
 8000834:	40020800 	.word	0x40020800

08000838 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
}
 800083e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	@ (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000858:	6453      	str	r3, [r2, #68]	@ 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f000 fb30 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	@ 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a21      	ldr	r2, [pc, #132]	@ (8000938 <HAL_I2C_MspInit+0xa4>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d13b      	bne.n	800092e <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b20      	ldr	r3, [pc, #128]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a1f      	ldr	r2, [pc, #124]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008d2:	23c0      	movs	r3, #192	@ 0xc0
 80008d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d6:	2312      	movs	r3, #18
 80008d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e2:	2304      	movs	r3, #4
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	@ (8000940 <HAL_I2C_MspInit+0xac>)
 80008ee:	f000 fb6d 	bl	8000fcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a10      	ldr	r2, [pc, #64]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <HAL_I2C_MspInit+0xa8>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	201f      	movs	r0, #31
 8000914:	f000 faf3 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000918:	201f      	movs	r0, #31
 800091a:	f000 fb0c 	bl	8000f36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2020      	movs	r0, #32
 8000924:	f000 faeb 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000928:	2020      	movs	r0, #32
 800092a:	f000 fb04 	bl	8000f36 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	@ 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40005400 	.word	0x40005400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400

08000944 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12b      	bne.n	80009be <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099e:	230c      	movs	r3, #12
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ae:	2307      	movs	r3, #7
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 80009ba:	f000 fb07 	bl	8000fcc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2a:	f000 f949 	bl	8000cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <I2C1_EV_IRQHandler+0x10>)
 8000a3a:	f000 fe89 	bl	8001750 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000084 	.word	0x20000084

08000a48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	@ (8000a58 <I2C1_ER_IRQHandler+0x10>)
 8000a4e:	f000 fff0 	bl	8001a32 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000084 	.word	0x20000084

08000a5c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
  }

  return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fd3d 	bl	8000530 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>
  }
  return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
  return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b40:	4a14      	ldr	r2, [pc, #80]	@ (8000b94 <_sbrk+0x5c>)
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <_sbrk+0x60>)
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b4c:	4b13      	ldr	r3, [pc, #76]	@ (8000b9c <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d102      	bne.n	8000b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b54:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <_sbrk+0x64>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <_sbrk+0x68>)
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d207      	bcs.n	8000b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b68:	f003 ff24 	bl	80049b4 <__errno>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	220c      	movs	r2, #12
 8000b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
 8000b76:	e009      	b.n	8000b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b78:	4b08      	ldr	r3, [pc, #32]	@ (8000b9c <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <_sbrk+0x64>)
 8000b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20020000 	.word	0x20020000
 8000b98:	00000400 	.word	0x00000400
 8000b9c:	20000124 	.word	0x20000124
 8000ba0:	20000278 	.word	0x20000278

08000ba4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f003 fee3 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fcab 	bl	8000554 <main>
  bx  lr    
 8000bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c0c:	08004f04 	.word	0x08004f04
  ldr r2, =_sbss
 8000c10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c14:	20000278 	.word	0x20000278

08000c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC_IRQHandler>
	...

08000c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <HAL_Init+0x40>)
 8000c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_Init+0x40>)
 8000c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c38:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_Init+0x40>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_Init+0x40>)
 8000c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c44:	2003      	movs	r0, #3
 8000c46:	f000 f94f 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f808 	bl	8000c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c50:	f7ff fdf8 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023c00 	.word	0x40023c00

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x54>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0x58>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4619      	mov	r1, r3
 8000c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f000 f967 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00e      	b.n	8000cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b0f      	cmp	r3, #15
 8000c92:	d80a      	bhi.n	8000caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c94:	2200      	movs	r2, #0
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295
 8000c9c:	f000 f92f 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca0:	4a06      	ldr	r2, [pc, #24]	@ (8000cbc <HAL_InitTick+0x5c>)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e000      	b.n	8000cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000004 	.word	0x20000004

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	@ (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000128 	.word	0x20000128

08000d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d08:	f7ff ffee 	bl	8000ce8 <HAL_GetTick>
 8000d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d18:	d005      	beq.n	8000d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <HAL_Delay+0x44>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d26:	bf00      	nop
 8000d28:	f7ff ffde 	bl	8000ce8 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d8f7      	bhi.n	8000d28 <HAL_Delay+0x28>
  {
  }
}
 8000d38:	bf00      	nop
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000008 	.word	0x20000008

08000d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d64:	4013      	ands	r3, r2
 8000d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <__NVIC_SetPriorityGrouping+0x44>)
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	60d3      	str	r3, [r2, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <__NVIC_GetPriorityGrouping+0x18>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	0a1b      	lsrs	r3, r3, #8
 8000d9a:	f003 0307 	and.w	r3, r3, #7
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db0b      	blt.n	8000dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	f003 021f 	and.w	r2, r3, #31
 8000dc4:	4907      	ldr	r1, [pc, #28]	@ (8000de4 <__NVIC_EnableIRQ+0x38>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	2001      	movs	r0, #1
 8000dce:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	370c      	adds	r7, #12
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000e100 	.word	0xe000e100

08000de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	6039      	str	r1, [r7, #0]
 8000df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	db0a      	blt.n	8000e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	490c      	ldr	r1, [pc, #48]	@ (8000e34 <__NVIC_SetPriority+0x4c>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	0112      	lsls	r2, r2, #4
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e10:	e00a      	b.n	8000e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <__NVIC_SetPriority+0x50>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f003 030f 	and.w	r3, r3, #15
 8000e1e:	3b04      	subs	r3, #4
 8000e20:	0112      	lsls	r2, r2, #4
 8000e22:	b2d2      	uxtb	r2, r2
 8000e24:	440b      	add	r3, r1
 8000e26:	761a      	strb	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000e100 	.word	0xe000e100
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	f1c3 0307 	rsb	r3, r3, #7
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	bf28      	it	cs
 8000e5a:	2304      	movcs	r3, #4
 8000e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3304      	adds	r3, #4
 8000e62:	2b06      	cmp	r3, #6
 8000e64:	d902      	bls.n	8000e6c <NVIC_EncodePriority+0x30>
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3b03      	subs	r3, #3
 8000e6a:	e000      	b.n	8000e6e <NVIC_EncodePriority+0x32>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	401a      	ands	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8e:	43d9      	mvns	r1, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e94:	4313      	orrs	r3, r2
         );
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3724      	adds	r7, #36	@ 0x24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff8e 	bl	8000de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff29 	bl	8000d48 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff3e 	bl	8000d90 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff8e 	bl	8000e3c <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5d 	bl	8000de8 <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff31 	bl	8000dac <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2280      	movs	r2, #128	@ 0x80
 8000f82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e00c      	b.n	8000fa2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f022 0201 	bic.w	r2, r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fbc:	b2db      	uxtb	r3, r3
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
 8000fe6:	e165      	b.n	80012b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	429a      	cmp	r2, r3
 8001002:	f040 8154 	bne.w	80012ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d005      	beq.n	800101e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101a:	2b02      	cmp	r3, #2
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b03      	cmp	r3, #3
 800108a:	d017      	beq.n	80010bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d123      	bne.n	8001110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	08da      	lsrs	r2, r3, #3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3208      	adds	r2, #8
 80010d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f003 0307 	and.w	r3, r3, #7
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	69b9      	ldr	r1, [r7, #24]
 800110c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 0203 	and.w	r2, r3, #3
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 80ae 	beq.w	80012ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b5d      	ldr	r3, [pc, #372]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115a:	4a5c      	ldr	r2, [pc, #368]	@ (80012cc <HAL_GPIO_Init+0x300>)
 800115c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001160:	6453      	str	r3, [r2, #68]	@ 0x44
 8001162:	4b5a      	ldr	r3, [pc, #360]	@ (80012cc <HAL_GPIO_Init+0x300>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800116e:	4a58      	ldr	r2, [pc, #352]	@ (80012d0 <HAL_GPIO_Init+0x304>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4f      	ldr	r2, [pc, #316]	@ (80012d4 <HAL_GPIO_Init+0x308>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4e      	ldr	r2, [pc, #312]	@ (80012d8 <HAL_GPIO_Init+0x30c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4d      	ldr	r2, [pc, #308]	@ (80012dc <HAL_GPIO_Init+0x310>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	@ (80012e0 <HAL_GPIO_Init+0x314>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x20e>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4b      	ldr	r2, [pc, #300]	@ (80012e4 <HAL_GPIO_Init+0x318>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x20a>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4a      	ldr	r2, [pc, #296]	@ (80012e8 <HAL_GPIO_Init+0x31c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x206>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a49      	ldr	r2, [pc, #292]	@ (80012ec <HAL_GPIO_Init+0x320>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x202>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x21c>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	@ (80012d0 <HAL_GPIO_Init+0x304>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a31      	ldr	r2, [pc, #196]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b2f      	ldr	r3, [pc, #188]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a26      	ldr	r2, [pc, #152]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <HAL_GPIO_Init+0x324>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae96 	bls.w	8000fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40013c00 	.word	0x40013c00

080012f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	887b      	ldrh	r3, [r7, #2]
 8001306:	4013      	ands	r3, r2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d002      	beq.n	8001312 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e12b      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b00      	cmp	r3, #0
 8001374:	d106      	bne.n	8001384 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fa88 	bl	8000894 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2224      	movs	r2, #36	@ 0x24
 8001388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013bc:	f001 ffb2 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4a81      	ldr	r2, [pc, #516]	@ (80015cc <HAL_I2C_Init+0x274>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d807      	bhi.n	80013dc <HAL_I2C_Init+0x84>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a80      	ldr	r2, [pc, #512]	@ (80015d0 <HAL_I2C_Init+0x278>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	bf94      	ite	ls
 80013d4:	2301      	movls	r3, #1
 80013d6:	2300      	movhi	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	e006      	b.n	80013ea <HAL_I2C_Init+0x92>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a7d      	ldr	r2, [pc, #500]	@ (80015d4 <HAL_I2C_Init+0x27c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e0e7      	b.n	80015c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4a78      	ldr	r2, [pc, #480]	@ (80015d8 <HAL_I2C_Init+0x280>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	430a      	orrs	r2, r1
 8001410:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <HAL_I2C_Init+0x274>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d802      	bhi.n	800142c <HAL_I2C_Init+0xd4>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3301      	adds	r3, #1
 800142a:	e009      	b.n	8001440 <HAL_I2C_Init+0xe8>
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001432:	fb02 f303 	mul.w	r3, r2, r3
 8001436:	4a69      	ldr	r2, [pc, #420]	@ (80015dc <HAL_I2C_Init+0x284>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	430b      	orrs	r3, r1
 8001446:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001452:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	495c      	ldr	r1, [pc, #368]	@ (80015cc <HAL_I2C_Init+0x274>)
 800145c:	428b      	cmp	r3, r1
 800145e:	d819      	bhi.n	8001494 <HAL_I2C_Init+0x13c>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fbb1 f3f3 	udiv	r3, r1, r3
 800146e:	1c59      	adds	r1, r3, #1
 8001470:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001474:	400b      	ands	r3, r1
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <HAL_I2C_Init+0x138>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1e59      	subs	r1, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fbb1 f3f3 	udiv	r3, r1, r3
 8001488:	3301      	adds	r3, #1
 800148a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800148e:	e051      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001490:	2304      	movs	r3, #4
 8001492:	e04f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d111      	bne.n	80014c0 <HAL_I2C_Init+0x168>
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	1e58      	subs	r0, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	bf0c      	ite	eq
 80014b8:	2301      	moveq	r3, #1
 80014ba:	2300      	movne	r3, #0
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	e012      	b.n	80014e6 <HAL_I2C_Init+0x18e>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf0c      	ite	eq
 80014e0:	2301      	moveq	r3, #1
 80014e2:	2300      	movne	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_I2C_Init+0x196>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e022      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10e      	bne.n	8001514 <HAL_I2C_Init+0x1bc>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1e58      	subs	r0, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	440b      	add	r3, r1
 8001504:	fbb0 f3f3 	udiv	r3, r0, r3
 8001508:	3301      	adds	r3, #1
 800150a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001512:	e00f      	b.n	8001534 <HAL_I2C_Init+0x1dc>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	1e58      	subs	r0, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6859      	ldr	r1, [r3, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	0099      	lsls	r1, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	fbb0 f3f3 	udiv	r3, r0, r3
 800152a:	3301      	adds	r3, #1
 800152c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001530:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001534:	6879      	ldr	r1, [r7, #4]
 8001536:	6809      	ldr	r1, [r1, #0]
 8001538:	4313      	orrs	r3, r2
 800153a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	69da      	ldr	r2, [r3, #28]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001562:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6911      	ldr	r1, [r2, #16]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68d2      	ldr	r2, [r2, #12]
 800156e:	4311      	orrs	r1, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	430a      	orrs	r2, r1
 8001592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	000186a0 	.word	0x000186a0
 80015d0:	001e847f 	.word	0x001e847f
 80015d4:	003d08ff 	.word	0x003d08ff
 80015d8:	431bde83 	.word	0x431bde83
 80015dc:	10624dd3 	.word	0x10624dd3

080015e0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015f2:	2b80      	cmp	r3, #128	@ 0x80
 80015f4:	d103      	bne.n	80015fe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  }
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	461a      	mov	r2, r3
 8001618:	460b      	mov	r3, r1
 800161a:	817b      	strh	r3, [r7, #10]
 800161c:	4613      	mov	r3, r2
 800161e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b20      	cmp	r3, #32
 800162e:	f040 8081 	bne.w	8001734 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001632:	4b44      	ldr	r3, [pc, #272]	@ (8001744 <HAL_I2C_Master_Transmit_IT+0x138>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	4a43      	ldr	r2, [pc, #268]	@ (8001748 <HAL_I2C_Master_Transmit_IT+0x13c>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a1a      	lsrs	r2, r3, #8
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	009a      	lsls	r2, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3b01      	subs	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2200      	movs	r2, #0
 800165c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	f043 0220 	orr.w	r2, r3, #32
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	e05b      	b.n	8001736 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d0df      	beq.n	800164c <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001692:	2b01      	cmp	r3, #1
 8001694:	d101      	bne.n	800169a <HAL_I2C_Master_Transmit_IT+0x8e>
 8001696:	2302      	movs	r3, #2
 8001698:	e04d      	b.n	8001736 <HAL_I2C_Master_Transmit_IT+0x12a>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d007      	beq.n	80016c0 <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0201 	orr.w	r2, r2, #1
 80016be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2221      	movs	r2, #33	@ 0x21
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2210      	movs	r2, #16
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	893a      	ldrh	r2, [r7, #8]
 80016f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_I2C_Master_Transmit_IT+0x140>)
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001702:	897a      	ldrh	r2, [r7, #10]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685a      	ldr	r2, [r3, #4]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800171e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800172e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001730:	2300      	movs	r3, #0
 8001732:	e000      	b.n	8001736 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001734:	2302      	movs	r3, #2
  }
}
 8001736:	4618      	mov	r0, r3
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	14f8b589 	.word	0x14f8b589
 800174c:	ffff0000 	.word	0xffff0000

08001750 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001758:	2300      	movs	r3, #0
 800175a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001768:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001770:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001778:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b10      	cmp	r3, #16
 800177e:	d003      	beq.n	8001788 <HAL_I2C_EV_IRQHandler+0x38>
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	2b40      	cmp	r3, #64	@ 0x40
 8001784:	f040 80c1 	bne.w	800190a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10d      	bne.n	80017be <HAL_I2C_EV_IRQHandler+0x6e>
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80017a8:	d003      	beq.n	80017b2 <HAL_I2C_EV_IRQHandler+0x62>
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80017b0:	d101      	bne.n	80017b6 <HAL_I2C_EV_IRQHandler+0x66>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_I2C_EV_IRQHandler+0x68>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	f000 8132 	beq.w	8001a22 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00c      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x92>
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	0a5b      	lsrs	r3, r3, #9
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f001 fc97 	bl	8003108 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fd9b 	bl	8002316 <I2C_Master_SB>
 80017e0:	e092      	b.n	8001908 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	08db      	lsrs	r3, r3, #3
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0xb2>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	0a5b      	lsrs	r3, r3, #9
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 fe11 	bl	8002422 <I2C_Master_ADD10>
 8001800:	e082      	b.n	8001908 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_I2C_EV_IRQHandler+0xd2>
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	0a5b      	lsrs	r3, r3, #9
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fe2b 	bl	8002476 <I2C_Master_ADDR>
 8001820:	e072      	b.n	8001908 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03b      	beq.n	80018a6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800183c:	f000 80f3 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	09db      	lsrs	r3, r3, #7
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00f      	beq.n	800186c <HAL_I2C_EV_IRQHandler+0x11c>
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	0a9b      	lsrs	r3, r3, #10
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d009      	beq.n	800186c <HAL_I2C_EV_IRQHandler+0x11c>
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f9f3 	bl	8001c50 <I2C_MasterTransmit_TXE>
 800186a:	e04d      	b.n	8001908 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	089b      	lsrs	r3, r3, #2
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80d6 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	0a5b      	lsrs	r3, r3, #9
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 80cf 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	2b21      	cmp	r3, #33	@ 0x21
 800188c:	d103      	bne.n	8001896 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fa7a 	bl	8001d88 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001894:	e0c7      	b.n	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b40      	cmp	r3, #64	@ 0x40
 800189a:	f040 80c4 	bne.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fae8 	bl	8001e74 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018a4:	e0bf      	b.n	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018b4:	f000 80b7 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	099b      	lsrs	r3, r3, #6
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00f      	beq.n	80018e4 <HAL_I2C_EV_IRQHandler+0x194>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	0a9b      	lsrs	r3, r3, #10
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <HAL_I2C_EV_IRQHandler+0x194>
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d103      	bne.n	80018e4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f000 fb61 	bl	8001fa4 <I2C_MasterReceive_RXNE>
 80018e2:	e011      	b.n	8001908 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 809a 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	0a5b      	lsrs	r3, r3, #9
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8093 	beq.w	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fc17 	bl	8002134 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001906:	e08e      	b.n	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001908:	e08d      	b.n	8001a26 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d004      	beq.n	800191c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e007      	b.n	800192c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d012      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0x20e>
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	0a5b      	lsrs	r3, r3, #9
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00c      	beq.n	800195e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001954:	69b9      	ldr	r1, [r7, #24]
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 ffdc 	bl	8002914 <I2C_Slave_ADDR>
 800195c:	e066      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_I2C_EV_IRQHandler+0x22e>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	0a5b      	lsrs	r3, r3, #9
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d003      	beq.n	800197e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f001 f816 	bl	80029a8 <I2C_Slave_STOPF>
 800197c:	e056      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800197e:	7bbb      	ldrb	r3, [r7, #14]
 8001980:	2b21      	cmp	r3, #33	@ 0x21
 8001982:	d002      	beq.n	800198a <HAL_I2C_EV_IRQHandler+0x23a>
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	2b29      	cmp	r3, #41	@ 0x29
 8001988:	d125      	bne.n	80019d6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	09db      	lsrs	r3, r3, #7
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00f      	beq.n	80019b6 <HAL_I2C_EV_IRQHandler+0x266>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	0a9b      	lsrs	r3, r3, #10
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_I2C_EV_IRQHandler+0x266>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d103      	bne.n	80019b6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 fef2 	bl	8002798 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b4:	e039      	b.n	8001a2a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d033      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x2da>
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	0a5b      	lsrs	r3, r3, #9
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d02d      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 ff1f 	bl	8002812 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019d4:	e029      	b.n	8001a2a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00f      	beq.n	8001a02 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	0a9b      	lsrs	r3, r3, #10
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_I2C_EV_IRQHandler+0x2b2>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 ff2a 	bl	8002854 <I2C_SlaveReceive_RXNE>
 8001a00:	e014      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00e      	beq.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	0a5b      	lsrs	r3, r3, #9
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d008      	beq.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 ff58 	bl	80028d0 <I2C_SlaveReceive_BTF>
 8001a20:	e004      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a2a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b08a      	sub	sp, #40	@ 0x28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a54:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00e      	beq.n	8001a80 <HAL_I2C_ER_IRQHandler+0x4e>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d008      	beq.n	8001a80 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a7e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	0a5b      	lsrs	r3, r3, #9
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <HAL_I2C_ER_IRQHandler+0x78>
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	f043 0302 	orr.w	r3, r3, #2
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001aa8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	0a9b      	lsrs	r3, r3, #10
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03f      	beq.n	8001b36 <HAL_I2C_ER_IRQHandler+0x104>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d039      	beq.n	8001b36 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ac2:	7efb      	ldrb	r3, [r7, #27]
 8001ac4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ad4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ada:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001adc:	7ebb      	ldrb	r3, [r7, #26]
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d112      	bne.n	8001b08 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10f      	bne.n	8001b08 <HAL_I2C_ER_IRQHandler+0xd6>
 8001ae8:	7cfb      	ldrb	r3, [r7, #19]
 8001aea:	2b21      	cmp	r3, #33	@ 0x21
 8001aec:	d008      	beq.n	8001b00 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001aee:	7cfb      	ldrb	r3, [r7, #19]
 8001af0:	2b29      	cmp	r3, #41	@ 0x29
 8001af2:	d005      	beq.n	8001b00 <HAL_I2C_ER_IRQHandler+0xce>
 8001af4:	7cfb      	ldrb	r3, [r7, #19]
 8001af6:	2b28      	cmp	r3, #40	@ 0x28
 8001af8:	d106      	bne.n	8001b08 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b21      	cmp	r3, #33	@ 0x21
 8001afe:	d103      	bne.n	8001b08 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f001 f881 	bl	8002c08 <I2C_Slave_AF>
 8001b06:	e016      	b.n	8001b36 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b10:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b1a:	7efb      	ldrb	r3, [r7, #27]
 8001b1c:	2b10      	cmp	r3, #16
 8001b1e:	d002      	beq.n	8001b26 <HAL_I2C_ER_IRQHandler+0xf4>
 8001b20:	7efb      	ldrb	r3, [r7, #27]
 8001b22:	2b40      	cmp	r3, #64	@ 0x40
 8001b24:	d107      	bne.n	8001b36 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b34:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	0adb      	lsrs	r3, r3, #11
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00e      	beq.n	8001b60 <HAL_I2C_ER_IRQHandler+0x12e>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d008      	beq.n	8001b60 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	f043 0308 	orr.w	r3, r3, #8
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001b5e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f001 f8bc 	bl	8002cf0 <I2C_ITError>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c66:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d150      	bne.n	8001d18 <I2C_MasterTransmit_TXE+0xc8>
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b21      	cmp	r3, #33	@ 0x21
 8001c7a:	d14d      	bne.n	8001d18 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d01d      	beq.n	8001cbe <I2C_MasterTransmit_TXE+0x6e>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b20      	cmp	r3, #32
 8001c86:	d01a      	beq.n	8001cbe <I2C_MasterTransmit_TXE+0x6e>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c8e:	d016      	beq.n	8001cbe <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c9e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2211      	movs	r2, #17
 8001ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7ff ff62 	bl	8001b80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cbc:	e060      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001ccc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cdc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b40      	cmp	r3, #64	@ 0x40
 8001cf6:	d107      	bne.n	8001d08 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f7ff ff7d 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d06:	e03b      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ff35 	bl	8001b80 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d16:	e033      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	2b21      	cmp	r3, #33	@ 0x21
 8001d1c:	d005      	beq.n	8001d2a <I2C_MasterTransmit_TXE+0xda>
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	2b40      	cmp	r3, #64	@ 0x40
 8001d22:	d12d      	bne.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b22      	cmp	r3, #34	@ 0x22
 8001d28:	d12a      	bne.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d108      	bne.n	8001d46 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d42:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001d44:	e01c      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b40      	cmp	r3, #64	@ 0x40
 8001d50:	d103      	bne.n	8001d5a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f88e 	bl	8001e74 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d58:	e012      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	781a      	ldrb	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	3b01      	subs	r3, #1
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d7e:	e7ff      	b.n	8001d80 <I2C_MasterTransmit_TXE+0x130>
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d94:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b21      	cmp	r3, #33	@ 0x21
 8001da0:	d164      	bne.n	8001e6c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d012      	beq.n	8001dd2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	781a      	ldrb	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001dd0:	e04c      	b.n	8001e6c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d01d      	beq.n	8001e14 <I2C_MasterTransmit_BTF+0x8c>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d01a      	beq.n	8001e14 <I2C_MasterTransmit_BTF+0x8c>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001de4:	d016      	beq.n	8001e14 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001df4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2211      	movs	r2, #17
 8001dfa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff feb7 	bl	8001b80 <HAL_I2C_MasterTxCpltCallback>
}
 8001e12:	e02b      	b.n	8001e6c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001e22:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e32:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b40      	cmp	r3, #64	@ 0x40
 8001e4c:	d107      	bne.n	8001e5e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fed2 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
}
 8001e5c:	e006      	b.n	8001e6c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe8a 	bl	8001b80 <HAL_I2C_MasterTxCpltCallback>
}
 8001e6c:	bf00      	nop
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d11d      	bne.n	8001ec8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d10b      	bne.n	8001eac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ea4:	1c9a      	adds	r2, r3, #2
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001eaa:	e077      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	121b      	asrs	r3, r3, #8
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ec6:	e069      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d10b      	bne.n	8001ee8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ee0:	1c5a      	adds	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ee6:	e059      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d152      	bne.n	8001f96 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2b22      	cmp	r3, #34	@ 0x22
 8001ef4:	d10d      	bne.n	8001f12 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f04:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f10:	e044      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	2b21      	cmp	r3, #33	@ 0x21
 8001f20:	d112      	bne.n	8001f48 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f26:	781a      	ldrb	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	1c5a      	adds	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001f46:	e029      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d124      	bne.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b21      	cmp	r3, #33	@ 0x21
 8001f56:	d121      	bne.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f66:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f76:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2220      	movs	r2, #32
 8001f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fe36 	bl	8001c00 <HAL_I2C_MemTxCpltCallback>
}
 8001f94:	e002      	b.n	8001f9c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fb22 	bl	80015e0 <I2C_Flush_DR>
}
 8001f9c:	bf00      	nop
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b22      	cmp	r3, #34	@ 0x22
 8001fb6:	f040 80b9 	bne.w	800212c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbe:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b03      	cmp	r3, #3
 8001fcc:	d921      	bls.n	8002012 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	f040 8096 	bne.w	800212c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800200e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002010:	e08c      	b.n	800212c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002016:	2b02      	cmp	r3, #2
 8002018:	d07f      	beq.n	800211a <I2C_MasterReceive_RXNE+0x176>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d002      	beq.n	8002026 <I2C_MasterReceive_RXNE+0x82>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d179      	bne.n	800211a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f001 f83c 	bl	80030a4 <I2C_WaitOnSTOPRequestThroughIT>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d14c      	bne.n	80020cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002040:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002050:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b40      	cmp	r3, #64	@ 0x40
 800208a:	d10a      	bne.n	80020a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fdba 	bl	8001c14 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020a0:	e044      	b.n	800212c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d002      	beq.n	80020b6 <I2C_MasterReceive_RXNE+0x112>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d103      	bne.n	80020be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80020bc:	e002      	b.n	80020c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2212      	movs	r2, #18
 80020c2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fd65 	bl	8001b94 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020ca:	e02f      	b.n	800212c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80020da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff fd88 	bl	8001c28 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002118:	e008      	b.n	800212c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002128:	605a      	str	r2, [r3, #4]
}
 800212a:	e7ff      	b.n	800212c <I2C_MasterReceive_RXNE+0x188>
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002140:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b04      	cmp	r3, #4
 800214a:	d11b      	bne.n	8002184 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800215a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002182:	e0c4      	b.n	800230e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d129      	bne.n	80021e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800219c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00a      	beq.n	80021ba <I2C_MasterReceive_BTF+0x86>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d007      	beq.n	80021ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80021e0:	e095      	b.n	800230e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d17d      	bne.n	80022e8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d002      	beq.n	80021f8 <I2C_MasterReceive_BTF+0xc4>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d108      	bne.n	800220a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e016      	b.n	8002238 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d002      	beq.n	8002216 <I2C_MasterReceive_BTF+0xe2>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d108      	bne.n	8002228 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e007      	b.n	8002238 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002236:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	3b01      	subs	r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002292:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b40      	cmp	r3, #64	@ 0x40
 80022a6:	d10a      	bne.n	80022be <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7ff fcac 	bl	8001c14 <HAL_I2C_MemRxCpltCallback>
}
 80022bc:	e027      	b.n	800230e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b08      	cmp	r3, #8
 80022ca:	d002      	beq.n	80022d2 <I2C_MasterReceive_BTF+0x19e>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d103      	bne.n	80022da <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022d8:	e002      	b.n	80022e0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2212      	movs	r2, #18
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7ff fc57 	bl	8001b94 <HAL_I2C_MasterRxCpltCallback>
}
 80022e6:	e012      	b.n	800230e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691a      	ldr	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b40      	cmp	r3, #64	@ 0x40
 8002328:	d117      	bne.n	800235a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	b2db      	uxtb	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002342:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002344:	e067      	b.n	8002416 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	b2da      	uxtb	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	e05d      	b.n	8002416 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002362:	d133      	bne.n	80023cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b21      	cmp	r3, #33	@ 0x21
 800236e:	d109      	bne.n	8002384 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	e008      	b.n	8002396 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <I2C_Master_SB+0x92>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d108      	bne.n	80023ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <I2C_Master_SB+0x100>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d02d      	beq.n	8002416 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023c8:	605a      	str	r2, [r3, #4]
}
 80023ca:	e024      	b.n	8002416 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10e      	bne.n	80023f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	b29b      	uxth	r3, r3
 80023da:	11db      	asrs	r3, r3, #7
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0306 	and.w	r3, r3, #6
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f063 030f 	orn	r3, r3, #15
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]
}
 80023f0:	e011      	b.n	8002416 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d10d      	bne.n	8002416 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	b29b      	uxth	r3, r3
 8002400:	11db      	asrs	r3, r3, #7
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f003 0306 	and.w	r3, r3, #6
 8002408:	b2db      	uxtb	r3, r3
 800240a:	f063 030e 	orn	r3, r3, #14
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	611a      	str	r2, [r3, #16]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	b2da      	uxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <I2C_Master_ADD10+0x26>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d108      	bne.n	800245a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <I2C_Master_ADD10+0x48>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002468:	605a      	str	r2, [r3, #4]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002476:	b480      	push	{r7}
 8002478:	b091      	sub	sp, #68	@ 0x44
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002484:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b22      	cmp	r3, #34	@ 0x22
 800249e:	f040 8169 	bne.w	8002774 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10f      	bne.n	80024ca <I2C_Master_ADDR+0x54>
 80024aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80024ae:	2b40      	cmp	r3, #64	@ 0x40
 80024b0:	d10b      	bne.n	80024ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c8:	e160      	b.n	800278c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d11d      	bne.n	800250e <I2C_Master_ADDR+0x98>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80024da:	d118      	bne.n	800250e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002500:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	651a      	str	r2, [r3, #80]	@ 0x50
 800250c:	e13e      	b.n	800278c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d113      	bne.n	8002540 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e115      	b.n	800276c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 808a 	bne.w	8002660 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800254c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002552:	d137      	bne.n	80025c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002562:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800256e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002572:	d113      	bne.n	800259c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002582:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002584:	2300      	movs	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	e0e7      	b.n	800276c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	e0d3      	b.n	800276c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80025c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d02e      	beq.n	8002628 <I2C_Master_ADDR+0x1b2>
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d02b      	beq.n	8002628 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80025d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d2:	2b12      	cmp	r3, #18
 80025d4:	d102      	bne.n	80025dc <I2C_Master_ADDR+0x166>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d125      	bne.n	8002628 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d00e      	beq.n	8002600 <I2C_Master_ADDR+0x18a>
 80025e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d00b      	beq.n	8002600 <I2C_Master_ADDR+0x18a>
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d008      	beq.n	8002600 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e007      	b.n	8002610 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800260e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002610:	2300      	movs	r3, #0
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	e0a1      	b.n	800276c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002636:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002638:	2300      	movs	r3, #0
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e085      	b.n	800276c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d14d      	bne.n	8002706 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	2b04      	cmp	r3, #4
 800266e:	d016      	beq.n	800269e <I2C_Master_ADDR+0x228>
 8002670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002672:	2b02      	cmp	r3, #2
 8002674:	d013      	beq.n	800269e <I2C_Master_ADDR+0x228>
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	2b10      	cmp	r3, #16
 800267a:	d010      	beq.n	800269e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800268a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e007      	b.n	80026ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026bc:	d117      	bne.n	80026ee <I2C_Master_ADDR+0x278>
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026c4:	d00b      	beq.n	80026de <I2C_Master_ADDR+0x268>
 80026c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d008      	beq.n	80026de <I2C_Master_ADDR+0x268>
 80026cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d005      	beq.n	80026de <I2C_Master_ADDR+0x268>
 80026d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d002      	beq.n	80026de <I2C_Master_ADDR+0x268>
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d107      	bne.n	80026ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	e032      	b.n	800276c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002714:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002724:	d117      	bne.n	8002756 <I2C_Master_ADDR+0x2e0>
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800272c:	d00b      	beq.n	8002746 <I2C_Master_ADDR+0x2d0>
 800272e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002730:	2b01      	cmp	r3, #1
 8002732:	d008      	beq.n	8002746 <I2C_Master_ADDR+0x2d0>
 8002734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002736:	2b08      	cmp	r3, #8
 8002738:	d005      	beq.n	8002746 <I2C_Master_ADDR+0x2d0>
 800273a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800273c:	2b10      	cmp	r3, #16
 800273e:	d002      	beq.n	8002746 <I2C_Master_ADDR+0x2d0>
 8002740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002742:	2b20      	cmp	r3, #32
 8002744:	d107      	bne.n	8002756 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002754:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002756:	2300      	movs	r3, #0
 8002758:	613b      	str	r3, [r7, #16]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002772:	e00b      	b.n	800278c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
}
 800278a:	e7ff      	b.n	800278c <I2C_Master_ADDR+0x316>
 800278c:	bf00      	nop
 800278e:	3744      	adds	r7, #68	@ 0x44
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02b      	beq.n	800280a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	781a      	ldrb	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d114      	bne.n	800280a <I2C_SlaveTransmit_TXE+0x72>
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b29      	cmp	r3, #41	@ 0x29
 80027e4:	d111      	bne.n	800280a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2221      	movs	r2, #33	@ 0x21
 80027fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2228      	movs	r2, #40	@ 0x28
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff f9cf 	bl	8001ba8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d011      	beq.n	8002848 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002862:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002868:	b29b      	uxth	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d02c      	beq.n	80028c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d114      	bne.n	80028c8 <I2C_SlaveReceive_RXNE+0x74>
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80028a2:	d111      	bne.n	80028c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2222      	movs	r2, #34	@ 0x22
 80028b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2228      	movs	r2, #40	@ 0x28
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff f97a 	bl	8001bbc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d012      	beq.n	8002908 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800291e:	2300      	movs	r3, #0
 8002920:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800292e:	2b28      	cmp	r3, #40	@ 0x28
 8002930:	d127      	bne.n	8002982 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	685a      	ldr	r2, [r3, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002940:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	089b      	lsrs	r3, r3, #2
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	09db      	lsrs	r3, r3, #7
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	81bb      	strh	r3, [r7, #12]
 8002964:	e002      	b.n	800296c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002974:	89ba      	ldrh	r2, [r7, #12]
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff f928 	bl	8001bd0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002980:	e00e      	b.n	80029a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	60bb      	str	r3, [r7, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a04:	d172      	bne.n	8002aec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	2b22      	cmp	r3, #34	@ 0x22
 8002a0a:	d002      	beq.n	8002a12 <I2C_Slave_STOPF+0x6a>
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
 8002a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a10:	d135      	bne.n	8002a7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d005      	beq.n	8002a36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	f043 0204 	orr.w	r2, r3, #4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe faaf 	bl	8000fae <HAL_DMA_GetState>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d049      	beq.n	8002aea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5a:	4a69      	ldr	r2, [pc, #420]	@ (8002c00 <I2C_Slave_STOPF+0x258>)
 8002a5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fa81 	bl	8000f6a <HAL_DMA_Abort_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03d      	beq.n	8002aea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a7c:	e035      	b.n	8002aea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ab0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa79 	bl	8000fae <HAL_DMA_GetState>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d014      	beq.n	8002aec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c00 <I2C_Slave_STOPF+0x258>)
 8002ac8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fa4b 	bl	8000f6a <HAL_DMA_Abort_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ae4:	4610      	mov	r0, r2
 8002ae6:	4798      	blx	r3
 8002ae8:	e000      	b.n	8002aec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d03e      	beq.n	8002b74 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d112      	bne.n	8002b2a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b40      	cmp	r3, #64	@ 0x40
 8002b36:	d112      	bne.n	8002b5e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f8b7 	bl	8002cf0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b82:	e039      	b.n	8002bf8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b88:	d109      	bne.n	8002b9e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2228      	movs	r2, #40	@ 0x28
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff f80f 	bl	8001bbc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b28      	cmp	r3, #40	@ 0x28
 8002ba8:	d111      	bne.n	8002bce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a15      	ldr	r2, [pc, #84]	@ (8002c04 <I2C_Slave_STOPF+0x25c>)
 8002bae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff f810 	bl	8001bec <HAL_I2C_ListenCpltCallback>
}
 8002bcc:	e014      	b.n	8002bf8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	2b22      	cmp	r3, #34	@ 0x22
 8002bd4:	d002      	beq.n	8002bdc <I2C_Slave_STOPF+0x234>
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2b22      	cmp	r3, #34	@ 0x22
 8002bda:	d10d      	bne.n	8002bf8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe ffe2 	bl	8001bbc <HAL_I2C_SlaveRxCpltCallback>
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	08002f55 	.word	0x08002f55
 8002c04:	ffff0000 	.word	0xffff0000

08002c08 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c16:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d002      	beq.n	8002c2a <I2C_Slave_AF+0x22>
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d129      	bne.n	8002c7e <I2C_Slave_AF+0x76>
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	2b28      	cmp	r3, #40	@ 0x28
 8002c2e:	d126      	bne.n	8002c7e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a2e      	ldr	r2, [pc, #184]	@ (8002cec <I2C_Slave_AF+0xe4>)
 8002c34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c44:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c4e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c5e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe ffb8 	bl	8001bec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c7c:	e031      	b.n	8002ce2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b21      	cmp	r3, #33	@ 0x21
 8002c82:	d129      	bne.n	8002cd8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a19      	ldr	r2, [pc, #100]	@ (8002cec <I2C_Slave_AF+0xe4>)
 8002c88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2221      	movs	r2, #33	@ 0x21
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002cae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cb8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cc8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe fc88 	bl	80015e0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7fe ff69 	bl	8001ba8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002cd6:	e004      	b.n	8002ce2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	ffff0000 	.word	0xffff0000

08002cf0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d08:	7bbb      	ldrb	r3, [r7, #14]
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d002      	beq.n	8002d14 <I2C_ITError+0x24>
 8002d0e:	7bbb      	ldrb	r3, [r7, #14]
 8002d10:	2b40      	cmp	r3, #64	@ 0x40
 8002d12:	d10a      	bne.n	8002d2a <I2C_ITError+0x3a>
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	2b22      	cmp	r3, #34	@ 0x22
 8002d18:	d107      	bne.n	8002d2a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d28:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d30:	2b28      	cmp	r3, #40	@ 0x28
 8002d32:	d107      	bne.n	8002d44 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2228      	movs	r2, #40	@ 0x28
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002d42:	e015      	b.n	8002d70 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d52:	d00a      	beq.n	8002d6a <I2C_ITError+0x7a>
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b60      	cmp	r3, #96	@ 0x60
 8002d58:	d007      	beq.n	8002d6a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d7e:	d162      	bne.n	8002e46 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d8e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d020      	beq.n	8002de0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	4a6a      	ldr	r2, [pc, #424]	@ (8002f4c <I2C_ITError+0x25c>)
 8002da4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f8dd 	bl	8000f6a <HAL_DMA_Abort_IT>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8089 	beq.w	8002eca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4798      	blx	r3
 8002dde:	e074      	b.n	8002eca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	4a59      	ldr	r2, [pc, #356]	@ (8002f4c <I2C_ITError+0x25c>)
 8002de6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe f8bc 	bl	8000f6a <HAL_DMA_Abort_IT>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d068      	beq.n	8002eca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e02:	2b40      	cmp	r3, #64	@ 0x40
 8002e04:	d10b      	bne.n	8002e1e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e40:	4610      	mov	r0, r2
 8002e42:	4798      	blx	r3
 8002e44:	e041      	b.n	8002eca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b60      	cmp	r3, #96	@ 0x60
 8002e50:	d125      	bne.n	8002e9e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b40      	cmp	r3, #64	@ 0x40
 8002e6c:	d10b      	bne.n	8002e86 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0201 	bic.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fed0 	bl	8001c3c <HAL_I2C_AbortCpltCallback>
 8002e9c:	e015      	b.n	8002eca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea8:	2b40      	cmp	r3, #64	@ 0x40
 8002eaa:	d10b      	bne.n	8002ec4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691a      	ldr	r2, [r3, #16]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fe feaf 	bl	8001c28 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ece:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d104      	bne.n	8002ef8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b04      	cmp	r3, #4
 8002f1a:	d113      	bne.n	8002f44 <I2C_ITError+0x254>
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b28      	cmp	r3, #40	@ 0x28
 8002f20:	d110      	bne.n	8002f44 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <I2C_ITError+0x260>)
 8002f26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe fe54 	bl	8001bec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f44:	bf00      	nop
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	08002f55 	.word	0x08002f55
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <I2C_DMAAbort+0x148>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	08db      	lsrs	r3, r3, #3
 8002f74:	4a4a      	ldr	r2, [pc, #296]	@ (80030a0 <I2C_DMAAbort+0x14c>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	0a1a      	lsrs	r2, r3, #8
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	00da      	lsls	r2, r3, #3
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002f9a:	e00a      	b.n	8002fb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fb0:	d0ea      	beq.n	8002f88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fce:	2200      	movs	r2, #0
 8002fd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003004:	2200      	movs	r2, #0
 8003006:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d10e      	bne.n	8003042 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2200      	movs	r2, #0
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7fe fdfe 	bl	8001c3c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003040:	e027      	b.n	8003092 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003042:	7cfb      	ldrb	r3, [r7, #19]
 8003044:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003048:	2b28      	cmp	r3, #40	@ 0x28
 800304a:	d117      	bne.n	800307c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800306a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2228      	movs	r2, #40	@ 0x28
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800307a:	e007      	b.n	800308c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800308c:	6978      	ldr	r0, [r7, #20]
 800308e:	f7fe fdcb 	bl	8001c28 <HAL_I2C_ErrorCallback>
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000000 	.word	0x20000000
 80030a0:	14f8b589 	.word	0x14f8b589

080030a4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80030b0:	4b13      	ldr	r3, [pc, #76]	@ (8003100 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	4a13      	ldr	r2, [pc, #76]	@ (8003104 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80030b8:	fba2 2303 	umull	r2, r3, r2, r3
 80030bc:	0a1a      	lsrs	r2, r3, #8
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d107      	bne.n	80030e2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	f043 0220 	orr.w	r2, r3, #32
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e008      	b.n	80030f4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030f0:	d0e9      	beq.n	80030c6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	20000000 	.word	0x20000000
 8003104:	14f8b589 	.word	0x14f8b589

08003108 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003114:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003118:	d103      	bne.n	8003122 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003120:	e007      	b.n	8003132 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003126:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800312a:	d102      	bne.n	8003132 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2208      	movs	r2, #8
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e0cc      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003154:	4b68      	ldr	r3, [pc, #416]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d90c      	bls.n	800317c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003162:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800316a:	4b63      	ldr	r3, [pc, #396]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0b8      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d020      	beq.n	80031ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003194:	4b59      	ldr	r3, [pc, #356]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a58      	ldr	r2, [pc, #352]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800319a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800319e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0308 	and.w	r3, r3, #8
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031ac:	4b53      	ldr	r3, [pc, #332]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4a52      	ldr	r2, [pc, #328]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b8:	4b50      	ldr	r3, [pc, #320]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	494d      	ldr	r1, [pc, #308]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d044      	beq.n	8003260 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d107      	bne.n	80031ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d119      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e07f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d003      	beq.n	80031fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031fe:	4b3f      	ldr	r3, [pc, #252]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e06f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320e:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e067      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800321e:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0203 	bic.w	r2, r3, #3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4934      	ldr	r1, [pc, #208]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003230:	f7fd fd5a 	bl	8000ce8 <HAL_GetTick>
 8003234:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003236:	e00a      	b.n	800324e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003238:	f7fd fd56 	bl	8000ce8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e04f      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324e:	4b2b      	ldr	r3, [pc, #172]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 020c 	and.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	429a      	cmp	r2, r3
 800325e:	d1eb      	bne.n	8003238 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003260:	4b25      	ldr	r3, [pc, #148]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d20c      	bcs.n	8003288 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e032      	b.n	80032ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0304 	and.w	r3, r3, #4
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003294:	4b19      	ldr	r3, [pc, #100]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4916      	ldr	r1, [pc, #88]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d009      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032b2:	4b12      	ldr	r3, [pc, #72]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	490e      	ldr	r1, [pc, #56]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032c6:	f000 f855 	bl	8003374 <HAL_RCC_GetSysClockFreq>
 80032ca:	4602      	mov	r2, r0
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	091b      	lsrs	r3, r3, #4
 80032d2:	f003 030f 	and.w	r3, r3, #15
 80032d6:	490a      	ldr	r1, [pc, #40]	@ (8003300 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	5ccb      	ldrb	r3, [r1, r3]
 80032da:	fa22 f303 	lsr.w	r3, r2, r3
 80032de:	4a09      	ldr	r2, [pc, #36]	@ (8003304 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80032e2:	4b09      	ldr	r3, [pc, #36]	@ (8003308 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd fcba 	bl	8000c60 <HAL_InitTick>

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00
 80032fc:	40023800 	.word	0x40023800
 8003300:	08004edc 	.word	0x08004edc
 8003304:	20000000 	.word	0x20000000
 8003308:	20000004 	.word	0x20000004

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4602      	mov	r2, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4903      	ldr	r1, [pc, #12]	@ (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5ccb      	ldrb	r3, [r1, r3]
 800333c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	08004eec 	.word	0x08004eec

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffdc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	@ (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4903      	ldr	r1, [pc, #12]	@ (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	08004eec 	.word	0x08004eec

08003374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003378:	b0ae      	sub	sp, #184	@ 0xb8
 800337a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800339a:	4bcb      	ldr	r3, [pc, #812]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	f200 8206 	bhi.w	80037b4 <HAL_RCC_GetSysClockFreq+0x440>
 80033a8:	a201      	add	r2, pc, #4	@ (adr r2, 80033b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80033aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ae:	bf00      	nop
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080037b5 	.word	0x080037b5
 80033b8:	080037b5 	.word	0x080037b5
 80033bc:	080037b5 	.word	0x080037b5
 80033c0:	080033ed 	.word	0x080033ed
 80033c4:	080037b5 	.word	0x080037b5
 80033c8:	080037b5 	.word	0x080037b5
 80033cc:	080037b5 	.word	0x080037b5
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	080037b5 	.word	0x080037b5
 80033d8:	080037b5 	.word	0x080037b5
 80033dc:	080037b5 	.word	0x080037b5
 80033e0:	080035e5 	.word	0x080035e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4bb9      	ldr	r3, [pc, #740]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x358>)
 80033e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ea:	e1e7      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ec:	4bb8      	ldr	r3, [pc, #736]	@ (80036d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033f2:	e1e3      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f4:	4bb4      	ldr	r3, [pc, #720]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003400:	4bb1      	ldr	r3, [pc, #708]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d071      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800340c:	4bae      	ldr	r3, [pc, #696]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	2200      	movs	r2, #0
 8003414:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003418:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800341c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800342e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	f04f 0000 	mov.w	r0, #0
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	0159      	lsls	r1, r3, #5
 8003440:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003444:	0150      	lsls	r0, r2, #5
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4621      	mov	r1, r4
 800344c:	1a51      	subs	r1, r2, r1
 800344e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003450:	4629      	mov	r1, r5
 8003452:	eb63 0301 	sbc.w	r3, r3, r1
 8003456:	647b      	str	r3, [r7, #68]	@ 0x44
 8003458:	f04f 0200 	mov.w	r2, #0
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003464:	4649      	mov	r1, r9
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	4641      	mov	r1, r8
 800346a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800346e:	4641      	mov	r1, r8
 8003470:	018a      	lsls	r2, r1, #6
 8003472:	4641      	mov	r1, r8
 8003474:	1a51      	subs	r1, r2, r1
 8003476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003478:	4649      	mov	r1, r9
 800347a:	eb63 0301 	sbc.w	r3, r3, r1
 800347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800348c:	4649      	mov	r1, r9
 800348e:	00cb      	lsls	r3, r1, #3
 8003490:	4641      	mov	r1, r8
 8003492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003496:	4641      	mov	r1, r8
 8003498:	00ca      	lsls	r2, r1, #3
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	4622      	mov	r2, r4
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80034a6:	462b      	mov	r3, r5
 80034a8:	460a      	mov	r2, r1
 80034aa:	eb42 0303 	adc.w	r3, r2, r3
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034bc:	4629      	mov	r1, r5
 80034be:	024b      	lsls	r3, r1, #9
 80034c0:	4621      	mov	r1, r4
 80034c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034c6:	4621      	mov	r1, r4
 80034c8:	024a      	lsls	r2, r1, #9
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034d2:	2200      	movs	r2, #0
 80034d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80034e0:	f7fc fe90 	bl	8000204 <__aeabi_uldivmod>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4613      	mov	r3, r2
 80034ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ee:	e067      	b.n	80035c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f0:	4b75      	ldr	r3, [pc, #468]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800350a:	2300      	movs	r3, #0
 800350c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003512:	4622      	mov	r2, r4
 8003514:	462b      	mov	r3, r5
 8003516:	f04f 0000 	mov.w	r0, #0
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	0159      	lsls	r1, r3, #5
 8003520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003524:	0150      	lsls	r0, r2, #5
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4621      	mov	r1, r4
 800352c:	1a51      	subs	r1, r2, r1
 800352e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003530:	4629      	mov	r1, r5
 8003532:	eb63 0301 	sbc.w	r3, r3, r1
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003544:	4649      	mov	r1, r9
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	4641      	mov	r1, r8
 800354a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800354e:	4641      	mov	r1, r8
 8003550:	018a      	lsls	r2, r1, #6
 8003552:	4641      	mov	r1, r8
 8003554:	ebb2 0a01 	subs.w	sl, r2, r1
 8003558:	4649      	mov	r1, r9
 800355a:	eb63 0b01 	sbc.w	fp, r3, r1
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800356a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800356e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003572:	4692      	mov	sl, r2
 8003574:	469b      	mov	fp, r3
 8003576:	4623      	mov	r3, r4
 8003578:	eb1a 0303 	adds.w	r3, sl, r3
 800357c:	623b      	str	r3, [r7, #32]
 800357e:	462b      	mov	r3, r5
 8003580:	eb4b 0303 	adc.w	r3, fp, r3
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003592:	4629      	mov	r1, r5
 8003594:	028b      	lsls	r3, r1, #10
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800359c:	4621      	mov	r1, r4
 800359e:	028a      	lsls	r2, r1, #10
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035a8:	2200      	movs	r2, #0
 80035aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80035ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80035b2:	f7fc fe27 	bl	8000204 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4613      	mov	r3, r2
 80035bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035c0:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	0c1b      	lsrs	r3, r3, #16
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	3301      	adds	r3, #1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80035d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80035da:	fbb2 f3f3 	udiv	r3, r2, r3
 80035de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035e2:	e0eb      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e4:	4b38      	ldr	r3, [pc, #224]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035f0:	4b35      	ldr	r3, [pc, #212]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d06b      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fc:	4b32      	ldr	r3, [pc, #200]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	099b      	lsrs	r3, r3, #6
 8003602:	2200      	movs	r2, #0
 8003604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003606:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800360a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800360e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003610:	2300      	movs	r3, #0
 8003612:	667b      	str	r3, [r7, #100]	@ 0x64
 8003614:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003618:	4622      	mov	r2, r4
 800361a:	462b      	mov	r3, r5
 800361c:	f04f 0000 	mov.w	r0, #0
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	0159      	lsls	r1, r3, #5
 8003626:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800362a:	0150      	lsls	r0, r2, #5
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4621      	mov	r1, r4
 8003632:	1a51      	subs	r1, r2, r1
 8003634:	61b9      	str	r1, [r7, #24]
 8003636:	4629      	mov	r1, r5
 8003638:	eb63 0301 	sbc.w	r3, r3, r1
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800364a:	4659      	mov	r1, fp
 800364c:	018b      	lsls	r3, r1, #6
 800364e:	4651      	mov	r1, sl
 8003650:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003654:	4651      	mov	r1, sl
 8003656:	018a      	lsls	r2, r1, #6
 8003658:	4651      	mov	r1, sl
 800365a:	ebb2 0801 	subs.w	r8, r2, r1
 800365e:	4659      	mov	r1, fp
 8003660:	eb63 0901 	sbc.w	r9, r3, r1
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003670:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003674:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003678:	4690      	mov	r8, r2
 800367a:	4699      	mov	r9, r3
 800367c:	4623      	mov	r3, r4
 800367e:	eb18 0303 	adds.w	r3, r8, r3
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	462b      	mov	r3, r5
 8003686:	eb49 0303 	adc.w	r3, r9, r3
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003698:	4629      	mov	r1, r5
 800369a:	024b      	lsls	r3, r1, #9
 800369c:	4621      	mov	r1, r4
 800369e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036a2:	4621      	mov	r1, r4
 80036a4:	024a      	lsls	r2, r1, #9
 80036a6:	4610      	mov	r0, r2
 80036a8:	4619      	mov	r1, r3
 80036aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80036ae:	2200      	movs	r2, #0
 80036b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80036b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80036b8:	f7fc fda4 	bl	8000204 <__aeabi_uldivmod>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4613      	mov	r3, r2
 80036c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036c6:	e065      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x420>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d4:	4b3d      	ldr	r3, [pc, #244]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x458>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	099b      	lsrs	r3, r3, #6
 80036da:	2200      	movs	r2, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	4611      	mov	r1, r2
 80036e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e6:	2300      	movs	r3, #0
 80036e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80036ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80036ee:	4642      	mov	r2, r8
 80036f0:	464b      	mov	r3, r9
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	0159      	lsls	r1, r3, #5
 80036fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003700:	0150      	lsls	r0, r2, #5
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4641      	mov	r1, r8
 8003708:	1a51      	subs	r1, r2, r1
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	4649      	mov	r1, r9
 800370e:	eb63 0301 	sbc.w	r3, r3, r1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	f04f 0300 	mov.w	r3, #0
 800371c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003720:	4659      	mov	r1, fp
 8003722:	018b      	lsls	r3, r1, #6
 8003724:	4651      	mov	r1, sl
 8003726:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800372a:	4651      	mov	r1, sl
 800372c:	018a      	lsls	r2, r1, #6
 800372e:	4651      	mov	r1, sl
 8003730:	1a54      	subs	r4, r2, r1
 8003732:	4659      	mov	r1, fp
 8003734:	eb63 0501 	sbc.w	r5, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	464b      	mov	r3, r9
 8003754:	eb45 0303 	adc.w	r3, r5, r3
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003766:	4629      	mov	r1, r5
 8003768:	028b      	lsls	r3, r1, #10
 800376a:	4621      	mov	r1, r4
 800376c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003770:	4621      	mov	r1, r4
 8003772:	028a      	lsls	r2, r1, #10
 8003774:	4610      	mov	r0, r2
 8003776:	4619      	mov	r1, r3
 8003778:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800377c:	2200      	movs	r2, #0
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003780:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003782:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003786:	f7fc fd3d 	bl	8000204 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4613      	mov	r3, r2
 8003790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003794:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_RCC_GetSysClockFreq+0x458>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	0f1b      	lsrs	r3, r3, #28
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80037a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037b2:	e003      	b.n	80037bc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b06      	ldr	r3, [pc, #24]	@ (80037d0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80037b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	37b8      	adds	r7, #184	@ 0xb8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
 80037d0:	00f42400 	.word	0x00f42400

080037d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e28d      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8083 	beq.w	80038fa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037f4:	4b94      	ldr	r3, [pc, #592]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 030c 	and.w	r3, r3, #12
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d019      	beq.n	8003834 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003800:	4b91      	ldr	r3, [pc, #580]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 030c 	and.w	r3, r3, #12
        || \
 8003808:	2b08      	cmp	r3, #8
 800380a:	d106      	bne.n	800381a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800380c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003814:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003818:	d00c      	beq.n	8003834 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800381a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003822:	2b0c      	cmp	r3, #12
 8003824:	d112      	bne.n	800384c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003826:	4b88      	ldr	r3, [pc, #544]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800382e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003832:	d10b      	bne.n	800384c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	4b84      	ldr	r3, [pc, #528]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d05b      	beq.n	80038f8 <HAL_RCC_OscConfig+0x124>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d157      	bne.n	80038f8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e25a      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x90>
 8003856:	4b7c      	ldr	r3, [pc, #496]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a7b      	ldr	r2, [pc, #492]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e01d      	b.n	80038a0 <HAL_RCC_OscConfig+0xcc>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0xb4>
 800386e:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a75      	ldr	r2, [pc, #468]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	4b73      	ldr	r3, [pc, #460]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a72      	ldr	r2, [pc, #456]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e00b      	b.n	80038a0 <HAL_RCC_OscConfig+0xcc>
 8003888:	4b6f      	ldr	r3, [pc, #444]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a6e      	ldr	r2, [pc, #440]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800388e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	4b6c      	ldr	r3, [pc, #432]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a6b      	ldr	r2, [pc, #428]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800389e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fd fa1e 	bl	8000ce8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd fa1a 	bl	8000ce8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e21f      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0xdc>
 80038ce:	e014      	b.n	80038fa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d0:	f7fd fa0a 	bl	8000ce8 <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d8:	f7fd fa06 	bl	8000ce8 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b64      	cmp	r3, #100	@ 0x64
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e20b      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	4b57      	ldr	r3, [pc, #348]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f0      	bne.n	80038d8 <HAL_RCC_OscConfig+0x104>
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06f      	beq.n	80039e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003906:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b00      	cmp	r3, #0
 8003910:	d017      	beq.n	8003942 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003912:	4b4d      	ldr	r3, [pc, #308]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
        || \
 800391a:	2b08      	cmp	r3, #8
 800391c:	d105      	bne.n	800392a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800391e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d11c      	bne.n	8003970 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003936:	4b44      	ldr	r3, [pc, #272]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d116      	bne.n	8003970 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003942:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d005      	beq.n	800395a <HAL_RCC_OscConfig+0x186>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1d3      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	4937      	ldr	r1, [pc, #220]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	e03a      	b.n	80039e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003978:	4b34      	ldr	r3, [pc, #208]	@ (8003a4c <HAL_RCC_OscConfig+0x278>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397e:	f7fd f9b3 	bl	8000ce8 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003986:	f7fd f9af 	bl	8000ce8 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e1b4      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003998:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4925      	ldr	r1, [pc, #148]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e015      	b.n	80039e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039ba:	4b24      	ldr	r3, [pc, #144]	@ (8003a4c <HAL_RCC_OscConfig+0x278>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c0:	f7fd f992 	bl	8000ce8 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c8:	f7fd f98e 	bl	8000ce8 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e193      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d036      	beq.n	8003a60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fd f972 	bl	8000ce8 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7fd f96e 	bl	8000ce8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e173      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0x234>
 8003a26:	e01b      	b.n	8003a60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a28:	4b09      	ldr	r3, [pc, #36]	@ (8003a50 <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fd f95b 	bl	8000ce8 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a34:	e00e      	b.n	8003a54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a36:	f7fd f957 	bl	8000ce8 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d907      	bls.n	8003a54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e15c      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	42470000 	.word	0x42470000
 8003a50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	4b8a      	ldr	r3, [pc, #552]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ea      	bne.n	8003a36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8097 	beq.w	8003b9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a72:	4b83      	ldr	r3, [pc, #524]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	4b7f      	ldr	r3, [pc, #508]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	4a7e      	ldr	r2, [pc, #504]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b79      	ldr	r3, [pc, #484]	@ (8003c84 <HAL_RCC_OscConfig+0x4b0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b76      	ldr	r3, [pc, #472]	@ (8003c84 <HAL_RCC_OscConfig+0x4b0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a75      	ldr	r2, [pc, #468]	@ (8003c84 <HAL_RCC_OscConfig+0x4b0>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd f917 	bl	8000ce8 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd f913 	bl	8000ce8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e118      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	@ (8003c84 <HAL_RCC_OscConfig+0x4b0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x31e>
 8003ae4:	4b66      	ldr	r3, [pc, #408]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a65      	ldr	r2, [pc, #404]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af0:	e01c      	b.n	8003b2c <HAL_RCC_OscConfig+0x358>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x340>
 8003afa:	4b61      	ldr	r3, [pc, #388]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	4a60      	ldr	r2, [pc, #384]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b06:	4b5e      	ldr	r3, [pc, #376]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	4a5d      	ldr	r2, [pc, #372]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b12:	e00b      	b.n	8003b2c <HAL_RCC_OscConfig+0x358>
 8003b14:	4b5a      	ldr	r3, [pc, #360]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b18:	4a59      	ldr	r2, [pc, #356]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b20:	4b57      	ldr	r3, [pc, #348]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b24:	4a56      	ldr	r2, [pc, #344]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d015      	beq.n	8003b60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fd f8d8 	bl	8000ce8 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3a:	e00a      	b.n	8003b52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3c:	f7fd f8d4 	bl	8000ce8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e0d7      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b52:	4b4b      	ldr	r3, [pc, #300]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0ee      	beq.n	8003b3c <HAL_RCC_OscConfig+0x368>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fd f8c2 	bl	8000ce8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fd f8be 	bl	8000ce8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0c1      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7e:	4b40      	ldr	r3, [pc, #256]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ee      	bne.n	8003b68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b90:	4b3b      	ldr	r3, [pc, #236]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	4a3a      	ldr	r2, [pc, #232]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003b96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80ad 	beq.w	8003d00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ba6:	4b36      	ldr	r3, [pc, #216]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d060      	beq.n	8003c74 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d145      	bne.n	8003c46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bba:	4b33      	ldr	r3, [pc, #204]	@ (8003c88 <HAL_RCC_OscConfig+0x4b4>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd f892 	bl	8000ce8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fd f88e 	bl	8000ce8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e093      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bda:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c08:	061b      	lsls	r3, r3, #24
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c10:	071b      	lsls	r3, r3, #28
 8003c12:	491b      	ldr	r1, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x4b4>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1e:	f7fd f863 	bl	8000ce8 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd f85f 	bl	8000ce8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e064      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x452>
 8003c44:	e05c      	b.n	8003d00 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <HAL_RCC_OscConfig+0x4b4>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd f84c 	bl	8000ce8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd f848 	bl	8000ce8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e04d      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCC_OscConfig+0x4ac>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x480>
 8003c72:	e045      	b.n	8003d00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e040      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <HAL_RCC_OscConfig+0x538>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d030      	beq.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d129      	bne.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d122      	bne.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d119      	bne.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d10f      	bne.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d107      	bne.n	8003cfc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d001      	beq.n	8003d00 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800

08003d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e042      	b.n	8003da8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fc fe04 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	@ 0x24
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f973 	bl	8004040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695a      	ldr	r2, [r3, #20]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	@ 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	603b      	str	r3, [r7, #0]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d175      	bne.n	8003ebc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Transmit+0x2c>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e06e      	b.n	8003ebe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2221      	movs	r2, #33	@ 0x21
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dee:	f7fc ff7b 	bl	8000ce8 <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	88fa      	ldrh	r2, [r7, #6]
 8003df8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e08:	d108      	bne.n	8003e1c <HAL_UART_Transmit+0x6c>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d104      	bne.n	8003e1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	e003      	b.n	8003e24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e24:	e02e      	b.n	8003e84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	2180      	movs	r1, #128	@ 0x80
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f848 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e03a      	b.n	8003ebe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10b      	bne.n	8003e66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	3302      	adds	r3, #2
 8003e62:	61bb      	str	r3, [r7, #24]
 8003e64:	e007      	b.n	8003e76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1cb      	bne.n	8003e26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	2140      	movs	r1, #64	@ 0x40
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f814 	bl	8003ec6 <UART_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e006      	b.n	8003ebe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3720      	adds	r7, #32
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	603b      	str	r3, [r7, #0]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ed6:	e03b      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d037      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee0:	f7fc ff02 	bl	8000ce8 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	6a3a      	ldr	r2, [r7, #32]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d302      	bcc.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e03a      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d023      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	2b80      	cmp	r3, #128	@ 0x80
 8003f0c:	d020      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	2b40      	cmp	r3, #64	@ 0x40
 8003f12:	d01d      	beq.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d116      	bne.n	8003f50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 f81d 	bl	8003f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2208      	movs	r2, #8
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e00f      	b.n	8003f70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	79fb      	ldrb	r3, [r7, #7]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d0b4      	beq.n	8003ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b095      	sub	sp, #84	@ 0x54
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	330c      	adds	r3, #12
 8003f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3314      	adds	r3, #20
 8003fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3314      	adds	r3, #20
 8003fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e5      	bne.n	8003fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d119      	bne.n	8004024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	e853 3f00 	ldrex	r3, [r3]
 8003ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	f023 0310 	bic.w	r3, r3, #16
 8004006:	647b      	str	r3, [r7, #68]	@ 0x44
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004010:	61ba      	str	r2, [r7, #24]
 8004012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6979      	ldr	r1, [r7, #20]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	613b      	str	r3, [r7, #16]
   return(result);
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e5      	bne.n	8003ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004032:	bf00      	nop
 8004034:	3754      	adds	r7, #84	@ 0x54
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b0c0      	sub	sp, #256	@ 0x100
 8004046:	af00      	add	r7, sp, #0
 8004048:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800404c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	ea40 0301 	orr.w	r3, r0, r1
 8004068:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800406a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800408c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004098:	f021 010c 	bic.w	r1, r1, #12
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040a6:	430b      	orrs	r3, r1
 80040a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ba:	6999      	ldr	r1, [r3, #24]
 80040bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	ea40 0301 	orr.w	r3, r0, r1
 80040c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b8f      	ldr	r3, [pc, #572]	@ (800430c <UART_SetConfig+0x2cc>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d005      	beq.n	80040e0 <UART_SetConfig+0xa0>
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	4b8d      	ldr	r3, [pc, #564]	@ (8004310 <UART_SetConfig+0x2d0>)
 80040dc:	429a      	cmp	r2, r3
 80040de:	d104      	bne.n	80040ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e0:	f7ff f934 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 80040e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040e8:	e003      	b.n	80040f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ea:	f7ff f91b 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 80040ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040fc:	f040 810c 	bne.w	8004318 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800410a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800410e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	1891      	adds	r1, r2, r2
 8004118:	65b9      	str	r1, [r7, #88]	@ 0x58
 800411a:	415b      	adcs	r3, r3
 800411c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800411e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004122:	4621      	mov	r1, r4
 8004124:	eb12 0801 	adds.w	r8, r2, r1
 8004128:	4629      	mov	r1, r5
 800412a:	eb43 0901 	adc.w	r9, r3, r1
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800413a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800413e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004142:	4690      	mov	r8, r2
 8004144:	4699      	mov	r9, r3
 8004146:	4623      	mov	r3, r4
 8004148:	eb18 0303 	adds.w	r3, r8, r3
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004150:	462b      	mov	r3, r5
 8004152:	eb49 0303 	adc.w	r3, r9, r3
 8004156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004166:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800416a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800416e:	460b      	mov	r3, r1
 8004170:	18db      	adds	r3, r3, r3
 8004172:	653b      	str	r3, [r7, #80]	@ 0x50
 8004174:	4613      	mov	r3, r2
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	657b      	str	r3, [r7, #84]	@ 0x54
 800417c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004180:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004184:	f7fc f83e 	bl	8000204 <__aeabi_uldivmod>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4b61      	ldr	r3, [pc, #388]	@ (8004314 <UART_SetConfig+0x2d4>)
 800418e:	fba3 2302 	umull	r2, r3, r3, r2
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	011c      	lsls	r4, r3, #4
 8004196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800419a:	2200      	movs	r2, #0
 800419c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041a8:	4642      	mov	r2, r8
 80041aa:	464b      	mov	r3, r9
 80041ac:	1891      	adds	r1, r2, r2
 80041ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b0:	415b      	adcs	r3, r3
 80041b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041b8:	4641      	mov	r1, r8
 80041ba:	eb12 0a01 	adds.w	sl, r2, r1
 80041be:	4649      	mov	r1, r9
 80041c0:	eb43 0b01 	adc.w	fp, r3, r1
 80041c4:	f04f 0200 	mov.w	r2, #0
 80041c8:	f04f 0300 	mov.w	r3, #0
 80041cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d8:	4692      	mov	sl, r2
 80041da:	469b      	mov	fp, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	eb1a 0303 	adds.w	r3, sl, r3
 80041e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041e6:	464b      	mov	r3, r9
 80041e8:	eb4b 0303 	adc.w	r3, fp, r3
 80041ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004204:	460b      	mov	r3, r1
 8004206:	18db      	adds	r3, r3, r3
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
 800420a:	4613      	mov	r3, r2
 800420c:	eb42 0303 	adc.w	r3, r2, r3
 8004210:	647b      	str	r3, [r7, #68]	@ 0x44
 8004212:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004216:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800421a:	f7fb fff3 	bl	8000204 <__aeabi_uldivmod>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4611      	mov	r1, r2
 8004224:	4b3b      	ldr	r3, [pc, #236]	@ (8004314 <UART_SetConfig+0x2d4>)
 8004226:	fba3 2301 	umull	r2, r3, r3, r1
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	2264      	movs	r2, #100	@ 0x64
 800422e:	fb02 f303 	mul.w	r3, r2, r3
 8004232:	1acb      	subs	r3, r1, r3
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800423a:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <UART_SetConfig+0x2d4>)
 800423c:	fba3 2302 	umull	r2, r3, r3, r2
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004248:	441c      	add	r4, r3
 800424a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800424e:	2200      	movs	r2, #0
 8004250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004254:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004258:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800425c:	4642      	mov	r2, r8
 800425e:	464b      	mov	r3, r9
 8004260:	1891      	adds	r1, r2, r2
 8004262:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004264:	415b      	adcs	r3, r3
 8004266:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004268:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800426c:	4641      	mov	r1, r8
 800426e:	1851      	adds	r1, r2, r1
 8004270:	6339      	str	r1, [r7, #48]	@ 0x30
 8004272:	4649      	mov	r1, r9
 8004274:	414b      	adcs	r3, r1
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004284:	4659      	mov	r1, fp
 8004286:	00cb      	lsls	r3, r1, #3
 8004288:	4651      	mov	r1, sl
 800428a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800428e:	4651      	mov	r1, sl
 8004290:	00ca      	lsls	r2, r1, #3
 8004292:	4610      	mov	r0, r2
 8004294:	4619      	mov	r1, r3
 8004296:	4603      	mov	r3, r0
 8004298:	4642      	mov	r2, r8
 800429a:	189b      	adds	r3, r3, r2
 800429c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a0:	464b      	mov	r3, r9
 80042a2:	460a      	mov	r2, r1
 80042a4:	eb42 0303 	adc.w	r3, r2, r3
 80042a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c0:	460b      	mov	r3, r1
 80042c2:	18db      	adds	r3, r3, r3
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c6:	4613      	mov	r3, r2
 80042c8:	eb42 0303 	adc.w	r3, r2, r3
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042d6:	f7fb ff95 	bl	8000204 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <UART_SetConfig+0x2d4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	@ 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	3332      	adds	r3, #50	@ 0x32
 80042f2:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <UART_SetConfig+0x2d4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 0207 	and.w	r2, r3, #7
 80042fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4422      	add	r2, r4
 8004306:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004308:	e106      	b.n	8004518 <UART_SetConfig+0x4d8>
 800430a:	bf00      	nop
 800430c:	40011000 	.word	0x40011000
 8004310:	40011400 	.word	0x40011400
 8004314:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800431c:	2200      	movs	r2, #0
 800431e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004322:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004326:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800432a:	4642      	mov	r2, r8
 800432c:	464b      	mov	r3, r9
 800432e:	1891      	adds	r1, r2, r2
 8004330:	6239      	str	r1, [r7, #32]
 8004332:	415b      	adcs	r3, r3
 8004334:	627b      	str	r3, [r7, #36]	@ 0x24
 8004336:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800433a:	4641      	mov	r1, r8
 800433c:	1854      	adds	r4, r2, r1
 800433e:	4649      	mov	r1, r9
 8004340:	eb43 0501 	adc.w	r5, r3, r1
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	00eb      	lsls	r3, r5, #3
 800434e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004352:	00e2      	lsls	r2, r4, #3
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	4643      	mov	r3, r8
 800435a:	18e3      	adds	r3, r4, r3
 800435c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004360:	464b      	mov	r3, r9
 8004362:	eb45 0303 	adc.w	r3, r5, r3
 8004366:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004376:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004386:	4629      	mov	r1, r5
 8004388:	008b      	lsls	r3, r1, #2
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004390:	4621      	mov	r1, r4
 8004392:	008a      	lsls	r2, r1, #2
 8004394:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004398:	f7fb ff34 	bl	8000204 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4b60      	ldr	r3, [pc, #384]	@ (8004524 <UART_SetConfig+0x4e4>)
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	011c      	lsls	r4, r3, #4
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	61b9      	str	r1, [r7, #24]
 80043c4:	415b      	adcs	r3, r3
 80043c6:	61fb      	str	r3, [r7, #28]
 80043c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043cc:	4641      	mov	r1, r8
 80043ce:	1851      	adds	r1, r2, r1
 80043d0:	6139      	str	r1, [r7, #16]
 80043d2:	4649      	mov	r1, r9
 80043d4:	414b      	adcs	r3, r1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e4:	4659      	mov	r1, fp
 80043e6:	00cb      	lsls	r3, r1, #3
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ee:	4651      	mov	r1, sl
 80043f0:	00ca      	lsls	r2, r1, #3
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	4603      	mov	r3, r0
 80043f8:	4642      	mov	r2, r8
 80043fa:	189b      	adds	r3, r3, r2
 80043fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004400:	464b      	mov	r3, r9
 8004402:	460a      	mov	r2, r1
 8004404:	eb42 0303 	adc.w	r3, r2, r3
 8004408:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004416:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	f04f 0300 	mov.w	r3, #0
 8004420:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004424:	4649      	mov	r1, r9
 8004426:	008b      	lsls	r3, r1, #2
 8004428:	4641      	mov	r1, r8
 800442a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800442e:	4641      	mov	r1, r8
 8004430:	008a      	lsls	r2, r1, #2
 8004432:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004436:	f7fb fee5 	bl	8000204 <__aeabi_uldivmod>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4611      	mov	r1, r2
 8004440:	4b38      	ldr	r3, [pc, #224]	@ (8004524 <UART_SetConfig+0x4e4>)
 8004442:	fba3 2301 	umull	r2, r3, r3, r1
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	2264      	movs	r2, #100	@ 0x64
 800444a:	fb02 f303 	mul.w	r3, r2, r3
 800444e:	1acb      	subs	r3, r1, r3
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	3332      	adds	r3, #50	@ 0x32
 8004454:	4a33      	ldr	r2, [pc, #204]	@ (8004524 <UART_SetConfig+0x4e4>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004460:	441c      	add	r4, r3
 8004462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004466:	2200      	movs	r2, #0
 8004468:	673b      	str	r3, [r7, #112]	@ 0x70
 800446a:	677a      	str	r2, [r7, #116]	@ 0x74
 800446c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	1891      	adds	r1, r2, r2
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	415b      	adcs	r3, r3
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004480:	4641      	mov	r1, r8
 8004482:	1851      	adds	r1, r2, r1
 8004484:	6039      	str	r1, [r7, #0]
 8004486:	4649      	mov	r1, r9
 8004488:	414b      	adcs	r3, r1
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004498:	4659      	mov	r1, fp
 800449a:	00cb      	lsls	r3, r1, #3
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a2:	4651      	mov	r1, sl
 80044a4:	00ca      	lsls	r2, r1, #3
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	4642      	mov	r2, r8
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044b2:	464b      	mov	r3, r9
 80044b4:	460a      	mov	r2, r1
 80044b6:	eb42 0303 	adc.w	r3, r2, r3
 80044ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80044c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044d4:	4649      	mov	r1, r9
 80044d6:	008b      	lsls	r3, r1, #2
 80044d8:	4641      	mov	r1, r8
 80044da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044de:	4641      	mov	r1, r8
 80044e0:	008a      	lsls	r2, r1, #2
 80044e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044e6:	f7fb fe8d 	bl	8000204 <__aeabi_uldivmod>
 80044ea:	4602      	mov	r2, r0
 80044ec:	460b      	mov	r3, r1
 80044ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <UART_SetConfig+0x4e4>)
 80044f0:	fba3 1302 	umull	r1, r3, r3, r2
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	2164      	movs	r1, #100	@ 0x64
 80044f8:	fb01 f303 	mul.w	r3, r1, r3
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	3332      	adds	r3, #50	@ 0x32
 8004502:	4a08      	ldr	r2, [pc, #32]	@ (8004524 <UART_SetConfig+0x4e4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	095b      	lsrs	r3, r3, #5
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4422      	add	r2, r4
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800451e:	46bd      	mov	sp, r7
 8004520:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004524:	51eb851f 	.word	0x51eb851f

08004528 <std>:
 8004528:	2300      	movs	r3, #0
 800452a:	b510      	push	{r4, lr}
 800452c:	4604      	mov	r4, r0
 800452e:	e9c0 3300 	strd	r3, r3, [r0]
 8004532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004536:	6083      	str	r3, [r0, #8]
 8004538:	8181      	strh	r1, [r0, #12]
 800453a:	6643      	str	r3, [r0, #100]	@ 0x64
 800453c:	81c2      	strh	r2, [r0, #14]
 800453e:	6183      	str	r3, [r0, #24]
 8004540:	4619      	mov	r1, r3
 8004542:	2208      	movs	r2, #8
 8004544:	305c      	adds	r0, #92	@ 0x5c
 8004546:	f000 f9e7 	bl	8004918 <memset>
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <std+0x58>)
 800454c:	6263      	str	r3, [r4, #36]	@ 0x24
 800454e:	4b0d      	ldr	r3, [pc, #52]	@ (8004584 <std+0x5c>)
 8004550:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004552:	4b0d      	ldr	r3, [pc, #52]	@ (8004588 <std+0x60>)
 8004554:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <std+0x64>)
 8004558:	6323      	str	r3, [r4, #48]	@ 0x30
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <std+0x68>)
 800455c:	6224      	str	r4, [r4, #32]
 800455e:	429c      	cmp	r4, r3
 8004560:	d006      	beq.n	8004570 <std+0x48>
 8004562:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004566:	4294      	cmp	r4, r2
 8004568:	d002      	beq.n	8004570 <std+0x48>
 800456a:	33d0      	adds	r3, #208	@ 0xd0
 800456c:	429c      	cmp	r4, r3
 800456e:	d105      	bne.n	800457c <std+0x54>
 8004570:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004578:	f000 ba46 	b.w	8004a08 <__retarget_lock_init_recursive>
 800457c:	bd10      	pop	{r4, pc}
 800457e:	bf00      	nop
 8004580:	08004769 	.word	0x08004769
 8004584:	0800478b 	.word	0x0800478b
 8004588:	080047c3 	.word	0x080047c3
 800458c:	080047e7 	.word	0x080047e7
 8004590:	2000012c 	.word	0x2000012c

08004594 <stdio_exit_handler>:
 8004594:	4a02      	ldr	r2, [pc, #8]	@ (80045a0 <stdio_exit_handler+0xc>)
 8004596:	4903      	ldr	r1, [pc, #12]	@ (80045a4 <stdio_exit_handler+0x10>)
 8004598:	4803      	ldr	r0, [pc, #12]	@ (80045a8 <stdio_exit_handler+0x14>)
 800459a:	f000 b869 	b.w	8004670 <_fwalk_sglue>
 800459e:	bf00      	nop
 80045a0:	2000000c 	.word	0x2000000c
 80045a4:	08004d09 	.word	0x08004d09
 80045a8:	2000001c 	.word	0x2000001c

080045ac <cleanup_stdio>:
 80045ac:	6841      	ldr	r1, [r0, #4]
 80045ae:	4b0c      	ldr	r3, [pc, #48]	@ (80045e0 <cleanup_stdio+0x34>)
 80045b0:	4299      	cmp	r1, r3
 80045b2:	b510      	push	{r4, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	d001      	beq.n	80045bc <cleanup_stdio+0x10>
 80045b8:	f000 fba6 	bl	8004d08 <_fflush_r>
 80045bc:	68a1      	ldr	r1, [r4, #8]
 80045be:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <cleanup_stdio+0x38>)
 80045c0:	4299      	cmp	r1, r3
 80045c2:	d002      	beq.n	80045ca <cleanup_stdio+0x1e>
 80045c4:	4620      	mov	r0, r4
 80045c6:	f000 fb9f 	bl	8004d08 <_fflush_r>
 80045ca:	68e1      	ldr	r1, [r4, #12]
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <cleanup_stdio+0x3c>)
 80045ce:	4299      	cmp	r1, r3
 80045d0:	d004      	beq.n	80045dc <cleanup_stdio+0x30>
 80045d2:	4620      	mov	r0, r4
 80045d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045d8:	f000 bb96 	b.w	8004d08 <_fflush_r>
 80045dc:	bd10      	pop	{r4, pc}
 80045de:	bf00      	nop
 80045e0:	2000012c 	.word	0x2000012c
 80045e4:	20000194 	.word	0x20000194
 80045e8:	200001fc 	.word	0x200001fc

080045ec <global_stdio_init.part.0>:
 80045ec:	b510      	push	{r4, lr}
 80045ee:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <global_stdio_init.part.0+0x30>)
 80045f0:	4c0b      	ldr	r4, [pc, #44]	@ (8004620 <global_stdio_init.part.0+0x34>)
 80045f2:	4a0c      	ldr	r2, [pc, #48]	@ (8004624 <global_stdio_init.part.0+0x38>)
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	4620      	mov	r0, r4
 80045f8:	2200      	movs	r2, #0
 80045fa:	2104      	movs	r1, #4
 80045fc:	f7ff ff94 	bl	8004528 <std>
 8004600:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004604:	2201      	movs	r2, #1
 8004606:	2109      	movs	r1, #9
 8004608:	f7ff ff8e 	bl	8004528 <std>
 800460c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004610:	2202      	movs	r2, #2
 8004612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004616:	2112      	movs	r1, #18
 8004618:	f7ff bf86 	b.w	8004528 <std>
 800461c:	20000264 	.word	0x20000264
 8004620:	2000012c 	.word	0x2000012c
 8004624:	08004595 	.word	0x08004595

08004628 <__sfp_lock_acquire>:
 8004628:	4801      	ldr	r0, [pc, #4]	@ (8004630 <__sfp_lock_acquire+0x8>)
 800462a:	f000 b9ee 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	2000026d 	.word	0x2000026d

08004634 <__sfp_lock_release>:
 8004634:	4801      	ldr	r0, [pc, #4]	@ (800463c <__sfp_lock_release+0x8>)
 8004636:	f000 b9e9 	b.w	8004a0c <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	2000026d 	.word	0x2000026d

08004640 <__sinit>:
 8004640:	b510      	push	{r4, lr}
 8004642:	4604      	mov	r4, r0
 8004644:	f7ff fff0 	bl	8004628 <__sfp_lock_acquire>
 8004648:	6a23      	ldr	r3, [r4, #32]
 800464a:	b11b      	cbz	r3, 8004654 <__sinit+0x14>
 800464c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004650:	f7ff bff0 	b.w	8004634 <__sfp_lock_release>
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <__sinit+0x28>)
 8004656:	6223      	str	r3, [r4, #32]
 8004658:	4b04      	ldr	r3, [pc, #16]	@ (800466c <__sinit+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f5      	bne.n	800464c <__sinit+0xc>
 8004660:	f7ff ffc4 	bl	80045ec <global_stdio_init.part.0>
 8004664:	e7f2      	b.n	800464c <__sinit+0xc>
 8004666:	bf00      	nop
 8004668:	080045ad 	.word	0x080045ad
 800466c:	20000264 	.word	0x20000264

08004670 <_fwalk_sglue>:
 8004670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004674:	4607      	mov	r7, r0
 8004676:	4688      	mov	r8, r1
 8004678:	4614      	mov	r4, r2
 800467a:	2600      	movs	r6, #0
 800467c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004680:	f1b9 0901 	subs.w	r9, r9, #1
 8004684:	d505      	bpl.n	8004692 <_fwalk_sglue+0x22>
 8004686:	6824      	ldr	r4, [r4, #0]
 8004688:	2c00      	cmp	r4, #0
 800468a:	d1f7      	bne.n	800467c <_fwalk_sglue+0xc>
 800468c:	4630      	mov	r0, r6
 800468e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004692:	89ab      	ldrh	r3, [r5, #12]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d907      	bls.n	80046a8 <_fwalk_sglue+0x38>
 8004698:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800469c:	3301      	adds	r3, #1
 800469e:	d003      	beq.n	80046a8 <_fwalk_sglue+0x38>
 80046a0:	4629      	mov	r1, r5
 80046a2:	4638      	mov	r0, r7
 80046a4:	47c0      	blx	r8
 80046a6:	4306      	orrs	r6, r0
 80046a8:	3568      	adds	r5, #104	@ 0x68
 80046aa:	e7e9      	b.n	8004680 <_fwalk_sglue+0x10>

080046ac <_puts_r>:
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	b570      	push	{r4, r5, r6, lr}
 80046b0:	6884      	ldr	r4, [r0, #8]
 80046b2:	4605      	mov	r5, r0
 80046b4:	460e      	mov	r6, r1
 80046b6:	b90b      	cbnz	r3, 80046bc <_puts_r+0x10>
 80046b8:	f7ff ffc2 	bl	8004640 <__sinit>
 80046bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046be:	07db      	lsls	r3, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_puts_r+0x22>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	0598      	lsls	r0, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_puts_r+0x22>
 80046c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046ca:	f000 f99e 	bl	8004a0a <__retarget_lock_acquire_recursive>
 80046ce:	89a3      	ldrh	r3, [r4, #12]
 80046d0:	0719      	lsls	r1, r3, #28
 80046d2:	d502      	bpl.n	80046da <_puts_r+0x2e>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d135      	bne.n	8004746 <_puts_r+0x9a>
 80046da:	4621      	mov	r1, r4
 80046dc:	4628      	mov	r0, r5
 80046de:	f000 f8c5 	bl	800486c <__swsetup_r>
 80046e2:	b380      	cbz	r0, 8004746 <_puts_r+0x9a>
 80046e4:	f04f 35ff 	mov.w	r5, #4294967295
 80046e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046ea:	07da      	lsls	r2, r3, #31
 80046ec:	d405      	bmi.n	80046fa <_puts_r+0x4e>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	059b      	lsls	r3, r3, #22
 80046f2:	d402      	bmi.n	80046fa <_puts_r+0x4e>
 80046f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80046f6:	f000 f989 	bl	8004a0c <__retarget_lock_release_recursive>
 80046fa:	4628      	mov	r0, r5
 80046fc:	bd70      	pop	{r4, r5, r6, pc}
 80046fe:	2b00      	cmp	r3, #0
 8004700:	da04      	bge.n	800470c <_puts_r+0x60>
 8004702:	69a2      	ldr	r2, [r4, #24]
 8004704:	429a      	cmp	r2, r3
 8004706:	dc17      	bgt.n	8004738 <_puts_r+0x8c>
 8004708:	290a      	cmp	r1, #10
 800470a:	d015      	beq.n	8004738 <_puts_r+0x8c>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	6022      	str	r2, [r4, #0]
 8004712:	7019      	strb	r1, [r3, #0]
 8004714:	68a3      	ldr	r3, [r4, #8]
 8004716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800471a:	3b01      	subs	r3, #1
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	2900      	cmp	r1, #0
 8004720:	d1ed      	bne.n	80046fe <_puts_r+0x52>
 8004722:	2b00      	cmp	r3, #0
 8004724:	da11      	bge.n	800474a <_puts_r+0x9e>
 8004726:	4622      	mov	r2, r4
 8004728:	210a      	movs	r1, #10
 800472a:	4628      	mov	r0, r5
 800472c:	f000 f85f 	bl	80047ee <__swbuf_r>
 8004730:	3001      	adds	r0, #1
 8004732:	d0d7      	beq.n	80046e4 <_puts_r+0x38>
 8004734:	250a      	movs	r5, #10
 8004736:	e7d7      	b.n	80046e8 <_puts_r+0x3c>
 8004738:	4622      	mov	r2, r4
 800473a:	4628      	mov	r0, r5
 800473c:	f000 f857 	bl	80047ee <__swbuf_r>
 8004740:	3001      	adds	r0, #1
 8004742:	d1e7      	bne.n	8004714 <_puts_r+0x68>
 8004744:	e7ce      	b.n	80046e4 <_puts_r+0x38>
 8004746:	3e01      	subs	r6, #1
 8004748:	e7e4      	b.n	8004714 <_puts_r+0x68>
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	6022      	str	r2, [r4, #0]
 8004750:	220a      	movs	r2, #10
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e7ee      	b.n	8004734 <_puts_r+0x88>
	...

08004758 <puts>:
 8004758:	4b02      	ldr	r3, [pc, #8]	@ (8004764 <puts+0xc>)
 800475a:	4601      	mov	r1, r0
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	f7ff bfa5 	b.w	80046ac <_puts_r>
 8004762:	bf00      	nop
 8004764:	20000018 	.word	0x20000018

08004768 <__sread>:
 8004768:	b510      	push	{r4, lr}
 800476a:	460c      	mov	r4, r1
 800476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004770:	f000 f8fc 	bl	800496c <_read_r>
 8004774:	2800      	cmp	r0, #0
 8004776:	bfab      	itete	ge
 8004778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800477a:	89a3      	ldrhlt	r3, [r4, #12]
 800477c:	181b      	addge	r3, r3, r0
 800477e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004782:	bfac      	ite	ge
 8004784:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004786:	81a3      	strhlt	r3, [r4, #12]
 8004788:	bd10      	pop	{r4, pc}

0800478a <__swrite>:
 800478a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800478e:	461f      	mov	r7, r3
 8004790:	898b      	ldrh	r3, [r1, #12]
 8004792:	05db      	lsls	r3, r3, #23
 8004794:	4605      	mov	r5, r0
 8004796:	460c      	mov	r4, r1
 8004798:	4616      	mov	r6, r2
 800479a:	d505      	bpl.n	80047a8 <__swrite+0x1e>
 800479c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047a0:	2302      	movs	r3, #2
 80047a2:	2200      	movs	r2, #0
 80047a4:	f000 f8d0 	bl	8004948 <_lseek_r>
 80047a8:	89a3      	ldrh	r3, [r4, #12]
 80047aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047b2:	81a3      	strh	r3, [r4, #12]
 80047b4:	4632      	mov	r2, r6
 80047b6:	463b      	mov	r3, r7
 80047b8:	4628      	mov	r0, r5
 80047ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047be:	f000 b8e7 	b.w	8004990 <_write_r>

080047c2 <__sseek>:
 80047c2:	b510      	push	{r4, lr}
 80047c4:	460c      	mov	r4, r1
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 f8bd 	bl	8004948 <_lseek_r>
 80047ce:	1c43      	adds	r3, r0, #1
 80047d0:	89a3      	ldrh	r3, [r4, #12]
 80047d2:	bf15      	itete	ne
 80047d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80047d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80047da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80047de:	81a3      	strheq	r3, [r4, #12]
 80047e0:	bf18      	it	ne
 80047e2:	81a3      	strhne	r3, [r4, #12]
 80047e4:	bd10      	pop	{r4, pc}

080047e6 <__sclose>:
 80047e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ea:	f000 b89d 	b.w	8004928 <_close_r>

080047ee <__swbuf_r>:
 80047ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f0:	460e      	mov	r6, r1
 80047f2:	4614      	mov	r4, r2
 80047f4:	4605      	mov	r5, r0
 80047f6:	b118      	cbz	r0, 8004800 <__swbuf_r+0x12>
 80047f8:	6a03      	ldr	r3, [r0, #32]
 80047fa:	b90b      	cbnz	r3, 8004800 <__swbuf_r+0x12>
 80047fc:	f7ff ff20 	bl	8004640 <__sinit>
 8004800:	69a3      	ldr	r3, [r4, #24]
 8004802:	60a3      	str	r3, [r4, #8]
 8004804:	89a3      	ldrh	r3, [r4, #12]
 8004806:	071a      	lsls	r2, r3, #28
 8004808:	d501      	bpl.n	800480e <__swbuf_r+0x20>
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	b943      	cbnz	r3, 8004820 <__swbuf_r+0x32>
 800480e:	4621      	mov	r1, r4
 8004810:	4628      	mov	r0, r5
 8004812:	f000 f82b 	bl	800486c <__swsetup_r>
 8004816:	b118      	cbz	r0, 8004820 <__swbuf_r+0x32>
 8004818:	f04f 37ff 	mov.w	r7, #4294967295
 800481c:	4638      	mov	r0, r7
 800481e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	6922      	ldr	r2, [r4, #16]
 8004824:	1a98      	subs	r0, r3, r2
 8004826:	6963      	ldr	r3, [r4, #20]
 8004828:	b2f6      	uxtb	r6, r6
 800482a:	4283      	cmp	r3, r0
 800482c:	4637      	mov	r7, r6
 800482e:	dc05      	bgt.n	800483c <__swbuf_r+0x4e>
 8004830:	4621      	mov	r1, r4
 8004832:	4628      	mov	r0, r5
 8004834:	f000 fa68 	bl	8004d08 <_fflush_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	d1ed      	bne.n	8004818 <__swbuf_r+0x2a>
 800483c:	68a3      	ldr	r3, [r4, #8]
 800483e:	3b01      	subs	r3, #1
 8004840:	60a3      	str	r3, [r4, #8]
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	6022      	str	r2, [r4, #0]
 8004848:	701e      	strb	r6, [r3, #0]
 800484a:	6962      	ldr	r2, [r4, #20]
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	429a      	cmp	r2, r3
 8004850:	d004      	beq.n	800485c <__swbuf_r+0x6e>
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d5e1      	bpl.n	800481c <__swbuf_r+0x2e>
 8004858:	2e0a      	cmp	r6, #10
 800485a:	d1df      	bne.n	800481c <__swbuf_r+0x2e>
 800485c:	4621      	mov	r1, r4
 800485e:	4628      	mov	r0, r5
 8004860:	f000 fa52 	bl	8004d08 <_fflush_r>
 8004864:	2800      	cmp	r0, #0
 8004866:	d0d9      	beq.n	800481c <__swbuf_r+0x2e>
 8004868:	e7d6      	b.n	8004818 <__swbuf_r+0x2a>
	...

0800486c <__swsetup_r>:
 800486c:	b538      	push	{r3, r4, r5, lr}
 800486e:	4b29      	ldr	r3, [pc, #164]	@ (8004914 <__swsetup_r+0xa8>)
 8004870:	4605      	mov	r5, r0
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	460c      	mov	r4, r1
 8004876:	b118      	cbz	r0, 8004880 <__swsetup_r+0x14>
 8004878:	6a03      	ldr	r3, [r0, #32]
 800487a:	b90b      	cbnz	r3, 8004880 <__swsetup_r+0x14>
 800487c:	f7ff fee0 	bl	8004640 <__sinit>
 8004880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004884:	0719      	lsls	r1, r3, #28
 8004886:	d422      	bmi.n	80048ce <__swsetup_r+0x62>
 8004888:	06da      	lsls	r2, r3, #27
 800488a:	d407      	bmi.n	800489c <__swsetup_r+0x30>
 800488c:	2209      	movs	r2, #9
 800488e:	602a      	str	r2, [r5, #0]
 8004890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	f04f 30ff 	mov.w	r0, #4294967295
 800489a:	e033      	b.n	8004904 <__swsetup_r+0x98>
 800489c:	0758      	lsls	r0, r3, #29
 800489e:	d512      	bpl.n	80048c6 <__swsetup_r+0x5a>
 80048a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048a2:	b141      	cbz	r1, 80048b6 <__swsetup_r+0x4a>
 80048a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048a8:	4299      	cmp	r1, r3
 80048aa:	d002      	beq.n	80048b2 <__swsetup_r+0x46>
 80048ac:	4628      	mov	r0, r5
 80048ae:	f000 f8af 	bl	8004a10 <_free_r>
 80048b2:	2300      	movs	r3, #0
 80048b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80048bc:	81a3      	strh	r3, [r4, #12]
 80048be:	2300      	movs	r3, #0
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f043 0308 	orr.w	r3, r3, #8
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	6923      	ldr	r3, [r4, #16]
 80048d0:	b94b      	cbnz	r3, 80048e6 <__swsetup_r+0x7a>
 80048d2:	89a3      	ldrh	r3, [r4, #12]
 80048d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80048d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048dc:	d003      	beq.n	80048e6 <__swsetup_r+0x7a>
 80048de:	4621      	mov	r1, r4
 80048e0:	4628      	mov	r0, r5
 80048e2:	f000 fa5f 	bl	8004da4 <__smakebuf_r>
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	f013 0201 	ands.w	r2, r3, #1
 80048ee:	d00a      	beq.n	8004906 <__swsetup_r+0x9a>
 80048f0:	2200      	movs	r2, #0
 80048f2:	60a2      	str	r2, [r4, #8]
 80048f4:	6962      	ldr	r2, [r4, #20]
 80048f6:	4252      	negs	r2, r2
 80048f8:	61a2      	str	r2, [r4, #24]
 80048fa:	6922      	ldr	r2, [r4, #16]
 80048fc:	b942      	cbnz	r2, 8004910 <__swsetup_r+0xa4>
 80048fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004902:	d1c5      	bne.n	8004890 <__swsetup_r+0x24>
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	0799      	lsls	r1, r3, #30
 8004908:	bf58      	it	pl
 800490a:	6962      	ldrpl	r2, [r4, #20]
 800490c:	60a2      	str	r2, [r4, #8]
 800490e:	e7f4      	b.n	80048fa <__swsetup_r+0x8e>
 8004910:	2000      	movs	r0, #0
 8004912:	e7f7      	b.n	8004904 <__swsetup_r+0x98>
 8004914:	20000018 	.word	0x20000018

08004918 <memset>:
 8004918:	4402      	add	r2, r0
 800491a:	4603      	mov	r3, r0
 800491c:	4293      	cmp	r3, r2
 800491e:	d100      	bne.n	8004922 <memset+0xa>
 8004920:	4770      	bx	lr
 8004922:	f803 1b01 	strb.w	r1, [r3], #1
 8004926:	e7f9      	b.n	800491c <memset+0x4>

08004928 <_close_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	@ (8004944 <_close_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fc f8cb 	bl	8000ace <_close>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_close_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_close_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000268 	.word	0x20000268

08004948 <_lseek_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_lseek_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc f8e0 	bl	8000b1c <_lseek>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_lseek_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_lseek_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000268 	.word	0x20000268

0800496c <_read_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_read_r+0x20>)
 8004970:	4604      	mov	r4, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc f86e 	bl	8000a5c <_read>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_read_r+0x1e>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_read_r+0x1e>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000268 	.word	0x20000268

08004990 <_write_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_write_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc f879 	bl	8000a96 <_write>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_write_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_write_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000268 	.word	0x20000268

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000018 	.word	0x20000018

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fa54 	bl	8004e80 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	08004efc 	.word	0x08004efc
 80049fc:	08004efc 	.word	0x08004efc
 8004a00:	08004efc 	.word	0x08004efc
 8004a04:	08004f00 	.word	0x08004f00

08004a08 <__retarget_lock_init_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_acquire_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <__retarget_lock_release_recursive>:
 8004a0c:	4770      	bx	lr
	...

08004a10 <_free_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d041      	beq.n	8004a9c <_free_r+0x8c>
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f0c      	subs	r4, r1, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	18e4      	addlt	r4, r4, r3
 8004a24:	f000 f8e0 	bl	8004be8 <__malloc_lock>
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <_free_r+0x90>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	b933      	cbnz	r3, 8004a3c <_free_r+0x2c>
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	6014      	str	r4, [r2, #0]
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a38:	f000 b8dc 	b.w	8004bf4 <__malloc_unlock>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d908      	bls.n	8004a52 <_free_r+0x42>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	1821      	adds	r1, r4, r0
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf01      	itttt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	e7ed      	b.n	8004a2e <_free_r+0x1e>
 8004a52:	461a      	mov	r2, r3
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b10b      	cbz	r3, 8004a5c <_free_r+0x4c>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d9fa      	bls.n	8004a52 <_free_r+0x42>
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	1850      	adds	r0, r2, r1
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d10b      	bne.n	8004a7c <_free_r+0x6c>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	4401      	add	r1, r0
 8004a68:	1850      	adds	r0, r2, r1
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	d1e0      	bne.n	8004a32 <_free_r+0x22>
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	4408      	add	r0, r1
 8004a78:	6010      	str	r0, [r2, #0]
 8004a7a:	e7da      	b.n	8004a32 <_free_r+0x22>
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d6      	b.n	8004a32 <_free_r+0x22>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf04      	itt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	bf04      	itt	eq
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	6054      	str	r4, [r2, #4]
 8004a9a:	e7ca      	b.n	8004a32 <_free_r+0x22>
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000274 	.word	0x20000274

08004aa4 <sbrk_aligned>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae4 <sbrk_aligned+0x40>)
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	6831      	ldr	r1, [r6, #0]
 8004aac:	4605      	mov	r5, r0
 8004aae:	b911      	cbnz	r1, 8004ab6 <sbrk_aligned+0x12>
 8004ab0:	f000 f9d6 	bl	8004e60 <_sbrk_r>
 8004ab4:	6030      	str	r0, [r6, #0]
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 f9d1 	bl	8004e60 <_sbrk_r>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	d103      	bne.n	8004aca <sbrk_aligned+0x26>
 8004ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	1cc4      	adds	r4, r0, #3
 8004acc:	f024 0403 	bic.w	r4, r4, #3
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d0f8      	beq.n	8004ac6 <sbrk_aligned+0x22>
 8004ad4:	1a21      	subs	r1, r4, r0
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f9c2 	bl	8004e60 <_sbrk_r>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d1f2      	bne.n	8004ac6 <sbrk_aligned+0x22>
 8004ae0:	e7ef      	b.n	8004ac2 <sbrk_aligned+0x1e>
 8004ae2:	bf00      	nop
 8004ae4:	20000270 	.word	0x20000270

08004ae8 <_malloc_r>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	1ccd      	adds	r5, r1, #3
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	4606      	mov	r6, r0
 8004afe:	db01      	blt.n	8004b04 <_malloc_r+0x1c>
 8004b00:	42a9      	cmp	r1, r5
 8004b02:	d904      	bls.n	8004b0e <_malloc_r+0x26>
 8004b04:	230c      	movs	r3, #12
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be4 <_malloc_r+0xfc>
 8004b12:	f000 f869 	bl	8004be8 <__malloc_lock>
 8004b16:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	bb44      	cbnz	r4, 8004b70 <_malloc_r+0x88>
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff ffbf 	bl	8004aa4 <sbrk_aligned>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	4604      	mov	r4, r0
 8004b2a:	d158      	bne.n	8004bde <_malloc_r+0xf6>
 8004b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b30:	4627      	mov	r7, r4
 8004b32:	2f00      	cmp	r7, #0
 8004b34:	d143      	bne.n	8004bbe <_malloc_r+0xd6>
 8004b36:	2c00      	cmp	r4, #0
 8004b38:	d04b      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	4630      	mov	r0, r6
 8004b40:	eb04 0903 	add.w	r9, r4, r3
 8004b44:	f000 f98c 	bl	8004e60 <_sbrk_r>
 8004b48:	4581      	cmp	r9, r0
 8004b4a:	d142      	bne.n	8004bd2 <_malloc_r+0xea>
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	1a6d      	subs	r5, r5, r1
 8004b50:	4629      	mov	r1, r5
 8004b52:	4630      	mov	r0, r6
 8004b54:	f7ff ffa6 	bl	8004aa4 <sbrk_aligned>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d03a      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	442b      	add	r3, r5
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	f8d8 3000 	ldr.w	r3, [r8]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	bb62      	cbnz	r2, 8004bc4 <_malloc_r+0xdc>
 8004b6a:	f8c8 7000 	str.w	r7, [r8]
 8004b6e:	e00f      	b.n	8004b90 <_malloc_r+0xa8>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	1b52      	subs	r2, r2, r5
 8004b74:	d420      	bmi.n	8004bb8 <_malloc_r+0xd0>
 8004b76:	2a0b      	cmp	r2, #11
 8004b78:	d917      	bls.n	8004baa <_malloc_r+0xc2>
 8004b7a:	1961      	adds	r1, r4, r5
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	6025      	str	r5, [r4, #0]
 8004b80:	bf18      	it	ne
 8004b82:	6059      	strne	r1, [r3, #4]
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	bf08      	it	eq
 8004b88:	f8c8 1000 	streq.w	r1, [r8]
 8004b8c:	5162      	str	r2, [r4, r5]
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f82f 	bl	8004bf4 <__malloc_unlock>
 8004b96:	f104 000b 	add.w	r0, r4, #11
 8004b9a:	1d23      	adds	r3, r4, #4
 8004b9c:	f020 0007 	bic.w	r0, r0, #7
 8004ba0:	1ac2      	subs	r2, r0, r3
 8004ba2:	bf1c      	itt	ne
 8004ba4:	1a1b      	subne	r3, r3, r0
 8004ba6:	50a3      	strne	r3, [r4, r2]
 8004ba8:	e7af      	b.n	8004b0a <_malloc_r+0x22>
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	bf0c      	ite	eq
 8004bb0:	f8c8 2000 	streq.w	r2, [r8]
 8004bb4:	605a      	strne	r2, [r3, #4]
 8004bb6:	e7eb      	b.n	8004b90 <_malloc_r+0xa8>
 8004bb8:	4623      	mov	r3, r4
 8004bba:	6864      	ldr	r4, [r4, #4]
 8004bbc:	e7ae      	b.n	8004b1c <_malloc_r+0x34>
 8004bbe:	463c      	mov	r4, r7
 8004bc0:	687f      	ldr	r7, [r7, #4]
 8004bc2:	e7b6      	b.n	8004b32 <_malloc_r+0x4a>
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d1fb      	bne.n	8004bc4 <_malloc_r+0xdc>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e7de      	b.n	8004b90 <_malloc_r+0xa8>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 f80c 	bl	8004bf4 <__malloc_unlock>
 8004bdc:	e794      	b.n	8004b08 <_malloc_r+0x20>
 8004bde:	6005      	str	r5, [r0, #0]
 8004be0:	e7d6      	b.n	8004b90 <_malloc_r+0xa8>
 8004be2:	bf00      	nop
 8004be4:	20000274 	.word	0x20000274

08004be8 <__malloc_lock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	@ (8004bf0 <__malloc_lock+0x8>)
 8004bea:	f7ff bf0e 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 8004bee:	bf00      	nop
 8004bf0:	2000026c 	.word	0x2000026c

08004bf4 <__malloc_unlock>:
 8004bf4:	4801      	ldr	r0, [pc, #4]	@ (8004bfc <__malloc_unlock+0x8>)
 8004bf6:	f7ff bf09 	b.w	8004a0c <__retarget_lock_release_recursive>
 8004bfa:	bf00      	nop
 8004bfc:	2000026c 	.word	0x2000026c

08004c00 <__sflush_r>:
 8004c00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c08:	0716      	lsls	r6, r2, #28
 8004c0a:	4605      	mov	r5, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	d454      	bmi.n	8004cba <__sflush_r+0xba>
 8004c10:	684b      	ldr	r3, [r1, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dc02      	bgt.n	8004c1c <__sflush_r+0x1c>
 8004c16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	dd48      	ble.n	8004cae <__sflush_r+0xae>
 8004c1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c1e:	2e00      	cmp	r6, #0
 8004c20:	d045      	beq.n	8004cae <__sflush_r+0xae>
 8004c22:	2300      	movs	r3, #0
 8004c24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c28:	682f      	ldr	r7, [r5, #0]
 8004c2a:	6a21      	ldr	r1, [r4, #32]
 8004c2c:	602b      	str	r3, [r5, #0]
 8004c2e:	d030      	beq.n	8004c92 <__sflush_r+0x92>
 8004c30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	0759      	lsls	r1, r3, #29
 8004c36:	d505      	bpl.n	8004c44 <__sflush_r+0x44>
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c3e:	b10b      	cbz	r3, 8004c44 <__sflush_r+0x44>
 8004c40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c48:	6a21      	ldr	r1, [r4, #32]
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	47b0      	blx	r6
 8004c4e:	1c43      	adds	r3, r0, #1
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	d106      	bne.n	8004c62 <__sflush_r+0x62>
 8004c54:	6829      	ldr	r1, [r5, #0]
 8004c56:	291d      	cmp	r1, #29
 8004c58:	d82b      	bhi.n	8004cb2 <__sflush_r+0xb2>
 8004c5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004d04 <__sflush_r+0x104>)
 8004c5c:	40ca      	lsrs	r2, r1
 8004c5e:	07d6      	lsls	r6, r2, #31
 8004c60:	d527      	bpl.n	8004cb2 <__sflush_r+0xb2>
 8004c62:	2200      	movs	r2, #0
 8004c64:	6062      	str	r2, [r4, #4]
 8004c66:	04d9      	lsls	r1, r3, #19
 8004c68:	6922      	ldr	r2, [r4, #16]
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	d504      	bpl.n	8004c78 <__sflush_r+0x78>
 8004c6e:	1c42      	adds	r2, r0, #1
 8004c70:	d101      	bne.n	8004c76 <__sflush_r+0x76>
 8004c72:	682b      	ldr	r3, [r5, #0]
 8004c74:	b903      	cbnz	r3, 8004c78 <__sflush_r+0x78>
 8004c76:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c7a:	602f      	str	r7, [r5, #0]
 8004c7c:	b1b9      	cbz	r1, 8004cae <__sflush_r+0xae>
 8004c7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c82:	4299      	cmp	r1, r3
 8004c84:	d002      	beq.n	8004c8c <__sflush_r+0x8c>
 8004c86:	4628      	mov	r0, r5
 8004c88:	f7ff fec2 	bl	8004a10 <_free_r>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c90:	e00d      	b.n	8004cae <__sflush_r+0xae>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b0      	blx	r6
 8004c98:	4602      	mov	r2, r0
 8004c9a:	1c50      	adds	r0, r2, #1
 8004c9c:	d1c9      	bne.n	8004c32 <__sflush_r+0x32>
 8004c9e:	682b      	ldr	r3, [r5, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0c6      	beq.n	8004c32 <__sflush_r+0x32>
 8004ca4:	2b1d      	cmp	r3, #29
 8004ca6:	d001      	beq.n	8004cac <__sflush_r+0xac>
 8004ca8:	2b16      	cmp	r3, #22
 8004caa:	d11e      	bne.n	8004cea <__sflush_r+0xea>
 8004cac:	602f      	str	r7, [r5, #0]
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e022      	b.n	8004cf8 <__sflush_r+0xf8>
 8004cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb6:	b21b      	sxth	r3, r3
 8004cb8:	e01b      	b.n	8004cf2 <__sflush_r+0xf2>
 8004cba:	690f      	ldr	r7, [r1, #16]
 8004cbc:	2f00      	cmp	r7, #0
 8004cbe:	d0f6      	beq.n	8004cae <__sflush_r+0xae>
 8004cc0:	0793      	lsls	r3, r2, #30
 8004cc2:	680e      	ldr	r6, [r1, #0]
 8004cc4:	bf08      	it	eq
 8004cc6:	694b      	ldreq	r3, [r1, #20]
 8004cc8:	600f      	str	r7, [r1, #0]
 8004cca:	bf18      	it	ne
 8004ccc:	2300      	movne	r3, #0
 8004cce:	eba6 0807 	sub.w	r8, r6, r7
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	f1b8 0f00 	cmp.w	r8, #0
 8004cd8:	dde9      	ble.n	8004cae <__sflush_r+0xae>
 8004cda:	6a21      	ldr	r1, [r4, #32]
 8004cdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cde:	4643      	mov	r3, r8
 8004ce0:	463a      	mov	r2, r7
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b0      	blx	r6
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	dc08      	bgt.n	8004cfc <__sflush_r+0xfc>
 8004cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cf2:	81a3      	strh	r3, [r4, #12]
 8004cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cfc:	4407      	add	r7, r0
 8004cfe:	eba8 0800 	sub.w	r8, r8, r0
 8004d02:	e7e7      	b.n	8004cd4 <__sflush_r+0xd4>
 8004d04:	20400001 	.word	0x20400001

08004d08 <_fflush_r>:
 8004d08:	b538      	push	{r3, r4, r5, lr}
 8004d0a:	690b      	ldr	r3, [r1, #16]
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b913      	cbnz	r3, 8004d18 <_fflush_r+0x10>
 8004d12:	2500      	movs	r5, #0
 8004d14:	4628      	mov	r0, r5
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	b118      	cbz	r0, 8004d22 <_fflush_r+0x1a>
 8004d1a:	6a03      	ldr	r3, [r0, #32]
 8004d1c:	b90b      	cbnz	r3, 8004d22 <_fflush_r+0x1a>
 8004d1e:	f7ff fc8f 	bl	8004640 <__sinit>
 8004d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f3      	beq.n	8004d12 <_fflush_r+0xa>
 8004d2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d2c:	07d0      	lsls	r0, r2, #31
 8004d2e:	d404      	bmi.n	8004d3a <_fflush_r+0x32>
 8004d30:	0599      	lsls	r1, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_fflush_r+0x32>
 8004d34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d36:	f7ff fe68 	bl	8004a0a <__retarget_lock_acquire_recursive>
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	f7ff ff5f 	bl	8004c00 <__sflush_r>
 8004d42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d44:	07da      	lsls	r2, r3, #31
 8004d46:	4605      	mov	r5, r0
 8004d48:	d4e4      	bmi.n	8004d14 <_fflush_r+0xc>
 8004d4a:	89a3      	ldrh	r3, [r4, #12]
 8004d4c:	059b      	lsls	r3, r3, #22
 8004d4e:	d4e1      	bmi.n	8004d14 <_fflush_r+0xc>
 8004d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d52:	f7ff fe5b 	bl	8004a0c <__retarget_lock_release_recursive>
 8004d56:	e7dd      	b.n	8004d14 <_fflush_r+0xc>

08004d58 <__swhatbuf_r>:
 8004d58:	b570      	push	{r4, r5, r6, lr}
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d60:	2900      	cmp	r1, #0
 8004d62:	b096      	sub	sp, #88	@ 0x58
 8004d64:	4615      	mov	r5, r2
 8004d66:	461e      	mov	r6, r3
 8004d68:	da0d      	bge.n	8004d86 <__swhatbuf_r+0x2e>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d70:	f04f 0100 	mov.w	r1, #0
 8004d74:	bf14      	ite	ne
 8004d76:	2340      	movne	r3, #64	@ 0x40
 8004d78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	6031      	str	r1, [r6, #0]
 8004d80:	602b      	str	r3, [r5, #0]
 8004d82:	b016      	add	sp, #88	@ 0x58
 8004d84:	bd70      	pop	{r4, r5, r6, pc}
 8004d86:	466a      	mov	r2, sp
 8004d88:	f000 f848 	bl	8004e1c <_fstat_r>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	dbec      	blt.n	8004d6a <__swhatbuf_r+0x12>
 8004d90:	9901      	ldr	r1, [sp, #4]
 8004d92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d9a:	4259      	negs	r1, r3
 8004d9c:	4159      	adcs	r1, r3
 8004d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004da2:	e7eb      	b.n	8004d7c <__swhatbuf_r+0x24>

08004da4 <__smakebuf_r>:
 8004da4:	898b      	ldrh	r3, [r1, #12]
 8004da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004da8:	079d      	lsls	r5, r3, #30
 8004daa:	4606      	mov	r6, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	d507      	bpl.n	8004dc0 <__smakebuf_r+0x1c>
 8004db0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	6123      	str	r3, [r4, #16]
 8004db8:	2301      	movs	r3, #1
 8004dba:	6163      	str	r3, [r4, #20]
 8004dbc:	b003      	add	sp, #12
 8004dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc0:	ab01      	add	r3, sp, #4
 8004dc2:	466a      	mov	r2, sp
 8004dc4:	f7ff ffc8 	bl	8004d58 <__swhatbuf_r>
 8004dc8:	9f00      	ldr	r7, [sp, #0]
 8004dca:	4605      	mov	r5, r0
 8004dcc:	4639      	mov	r1, r7
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f7ff fe8a 	bl	8004ae8 <_malloc_r>
 8004dd4:	b948      	cbnz	r0, 8004dea <__smakebuf_r+0x46>
 8004dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dda:	059a      	lsls	r2, r3, #22
 8004ddc:	d4ee      	bmi.n	8004dbc <__smakebuf_r+0x18>
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	f043 0302 	orr.w	r3, r3, #2
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	e7e2      	b.n	8004db0 <__smakebuf_r+0xc>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	6020      	str	r0, [r4, #0]
 8004dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	9b01      	ldr	r3, [sp, #4]
 8004df6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004dfa:	b15b      	cbz	r3, 8004e14 <__smakebuf_r+0x70>
 8004dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e00:	4630      	mov	r0, r6
 8004e02:	f000 f81d 	bl	8004e40 <_isatty_r>
 8004e06:	b128      	cbz	r0, 8004e14 <__smakebuf_r+0x70>
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	f023 0303 	bic.w	r3, r3, #3
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	431d      	orrs	r5, r3
 8004e18:	81a5      	strh	r5, [r4, #12]
 8004e1a:	e7cf      	b.n	8004dbc <__smakebuf_r+0x18>

08004e1c <_fstat_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d07      	ldr	r5, [pc, #28]	@ (8004e3c <_fstat_r+0x20>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	4611      	mov	r1, r2
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	f7fb fe5c 	bl	8000ae6 <_fstat>
 8004e2e:	1c43      	adds	r3, r0, #1
 8004e30:	d102      	bne.n	8004e38 <_fstat_r+0x1c>
 8004e32:	682b      	ldr	r3, [r5, #0]
 8004e34:	b103      	cbz	r3, 8004e38 <_fstat_r+0x1c>
 8004e36:	6023      	str	r3, [r4, #0]
 8004e38:	bd38      	pop	{r3, r4, r5, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000268 	.word	0x20000268

08004e40 <_isatty_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	@ (8004e5c <_isatty_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb fe5b 	bl	8000b06 <_isatty>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_isatty_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_isatty_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	20000268 	.word	0x20000268

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d06      	ldr	r5, [pc, #24]	@ (8004e7c <_sbrk_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fb fe64 	bl	8000b38 <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20000268 	.word	0x20000268

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
