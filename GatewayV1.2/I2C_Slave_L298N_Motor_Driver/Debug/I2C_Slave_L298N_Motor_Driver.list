
I2C_Slave_L298N_Motor_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080071f0  080071f0  000081f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073f4  080073f4  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080073f4  080073f4  000083f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073fc  080073fc  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073fc  080073fc  000083fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007400  08007400  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007404  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000060  08007464  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003c4  08007464  000093c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001216e  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002627  00000000  00000000  0001b1fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001d828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d78  00000000  00000000  0001e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e15  00000000  00000000  0001f6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156a6  00000000  00000000  000434b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0689  00000000  00000000  00058b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001391e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  00139228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013e024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071d8 	.word	0x080071d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080071d8 	.word	0x080071d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 ff4a 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f84c 	bl	8000690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9fc 	bl	80009f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f9da 	bl	80009b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f9ae 	bl	8000960 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000604:	f000 f908 	bl	8000818 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000608:	f000 f934 	bl	8000874 <MX_TIM2_Init>
  MX_ADC1_Init();
 800060c:	f000 f8b2 	bl	8000774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); //PB10 TIM2 CH3
 8000610:	2108      	movs	r1, #8
 8000612:	4817      	ldr	r0, [pc, #92]	@ (8000670 <main+0x84>)
 8000614:	f004 ff50 	bl	80054b8 <HAL_TIM_PWM_Start>


  // Start I2C reception in interrupt mode
  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&received_angle, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	4916      	ldr	r1, [pc, #88]	@ (8000674 <main+0x88>)
 800061c:	4816      	ldr	r0, [pc, #88]	@ (8000678 <main+0x8c>)
 800061e:	f002 fb0d 	bl	8002c3c <HAL_I2C_Slave_Receive_IT>

      // Notify over UART that system is ready
  HAL_UART_Transmit(&huart2, (uint8_t *)"Waiting for angle...\r\n", 23, 100);
 8000622:	2364      	movs	r3, #100	@ 0x64
 8000624:	2217      	movs	r2, #23
 8000626:	4915      	ldr	r1, [pc, #84]	@ (800067c <main+0x90>)
 8000628:	4815      	ldr	r0, [pc, #84]	@ (8000680 <main+0x94>)
 800062a:	f005 fd79 	bl	8006120 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (do_rotate)
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <main+0x98>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d0fa      	beq.n	800062e <main+0x42>
	  	{
	  		do_rotate = 0;
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <main+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	  		Motor_Rotate_To_Angle(received_angle);
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <main+0x88>)
 8000640:	f993 3000 	ldrsb.w	r3, [r3]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fa59 	bl	8000afc <Motor_Rotate_To_Angle>

	  		sprintf(buffer, "Moved motor to angle: %d\r\n", received_angle);
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <main+0x88>)
 800064c:	f993 3000 	ldrsb.w	r3, [r3]
 8000650:	461a      	mov	r2, r3
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <main+0x9c>)
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <main+0xa0>)
 8000656:	f006 f91f 	bl	8006898 <siprintf>
	  		HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 800065a:	480c      	ldr	r0, [pc, #48]	@ (800068c <main+0xa0>)
 800065c:	f7ff fdd8 	bl	8000210 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	b29a      	uxth	r2, r3
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	4909      	ldr	r1, [pc, #36]	@ (800068c <main+0xa0>)
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <main+0x94>)
 800066a:	f005 fd59 	bl	8006120 <HAL_UART_Transmit>
	  if (do_rotate)
 800066e:	e7de      	b.n	800062e <main+0x42>
 8000670:	20000178 	.word	0x20000178
 8000674:	20000000 	.word	0x20000000
 8000678:	200000c4 	.word	0x200000c4
 800067c:	080071f0 	.word	0x080071f0
 8000680:	200001c0 	.word	0x200001c0
 8000684:	20000270 	.word	0x20000270
 8000688:	08007208 	.word	0x08007208
 800068c:	2000020c 	.word	0x2000020c

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	2234      	movs	r2, #52	@ 0x34
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 f91c 	bl	80068dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a2b      	ldr	r2, [pc, #172]	@ (800076c <SystemClock_Config+0xdc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b29      	ldr	r3, [pc, #164]	@ (800076c <SystemClock_Config+0xdc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <SystemClock_Config+0xe0>)
 80006da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <SystemClock_Config+0xe0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2300      	movs	r3, #0
 80006fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000700:	2308      	movs	r3, #8
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000704:	23b4      	movs	r3, #180	@ 0xb4
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fb87 	bl	8004e2c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 fc54 	bl	8000fd0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000728:	f003 ffe6 	bl	80046f8 <HAL_PWREx_EnableOverDrive>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000732:	f000 fc4d 	bl	8000fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000742:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2105      	movs	r1, #5
 8000754:	4618      	mov	r0, r3
 8000756:	f004 f81f 	bl	8004798 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000760:	f000 fc36 	bl	8000fd0 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	@ 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800077a:	463b      	mov	r3, r7
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000786:	4b21      	ldr	r3, [pc, #132]	@ (800080c <MX_ADC1_Init+0x98>)
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <MX_ADC1_Init+0x9c>)
 800078a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_ADC1_Init+0x98>)
 800078e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000792:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_ADC1_Init+0x98>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ae:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b4:	4b15      	ldr	r3, [pc, #84]	@ (800080c <MX_ADC1_Init+0x98>)
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <MX_ADC1_Init+0xa0>)
 80007b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <MX_ADC1_Init+0x98>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007c6:	4b11      	ldr	r3, [pc, #68]	@ (800080c <MX_ADC1_Init+0x98>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <MX_ADC1_Init+0x98>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_ADC1_Init+0x98>)
 80007d6:	f000 feed 	bl	80015b4 <HAL_ADC_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 fbf6 	bl	8000fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <MX_ADC1_Init+0x98>)
 80007f6:	f001 f8bf 	bl	8001978 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 fbe6 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000007c 	.word	0x2000007c
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	@ (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2210      	movs	r2, #16
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f002 f897 	bl	8002988 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 fbb6 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200000c4 	.word	0x200000c4
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	@ 0x38
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	f107 0320 	add.w	r3, r7, #32
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]
 80008a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a4:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 89;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008ae:	2259      	movs	r2, #89	@ 0x59
 80008b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80008b8:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008ba:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80008be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008cc:	4823      	ldr	r0, [pc, #140]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008ce:	f004 fd4b 	bl	8005368 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008d8:	f000 fb7a 	bl	8000fd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008e6:	4619      	mov	r1, r3
 80008e8:	481c      	ldr	r0, [pc, #112]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008ea:	f004 ff6f 	bl	80057cc <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008f4:	f000 fb6c 	bl	8000fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f8:	4818      	ldr	r0, [pc, #96]	@ (800095c <MX_TIM2_Init+0xe8>)
 80008fa:	f004 fd84 	bl	8005406 <HAL_TIM_PWM_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000904:	f000 fb64 	bl	8000fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4619      	mov	r1, r3
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <MX_TIM2_Init+0xe8>)
 8000918:	f005 fb36 	bl	8005f88 <HAL_TIMEx_MasterConfigSynchronization>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 fb55 	bl	8000fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000926:	2360      	movs	r3, #96	@ 0x60
 8000928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2208      	movs	r2, #8
 800093a:	4619      	mov	r1, r3
 800093c:	4807      	ldr	r0, [pc, #28]	@ (800095c <MX_TIM2_Init+0xe8>)
 800093e:	f004 fe83 	bl	8005648 <HAL_TIM_PWM_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000948:	f000 fb42 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800094c:	4803      	ldr	r0, [pc, #12]	@ (800095c <MX_TIM2_Init+0xe8>)
 800094e:	f000 fc5b 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000952:	bf00      	nop
 8000954:	3738      	adds	r7, #56	@ 0x38
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000178 	.word	0x20000178

08000960 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <MX_USART2_UART_Init+0x50>)
 8000968:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b09      	ldr	r3, [pc, #36]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_USART2_UART_Init+0x4c>)
 8000998:	f005 fb72 	bl	8006080 <HAL_UART_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009a2:	f000 fb15 	bl	8000fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001c0 	.word	0x200001c0
 80009b0:	40004400 	.word	0x40004400

080009b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_DMA_Init+0x3c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <MX_DMA_Init+0x3c>)
 80009c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_DMA_Init+0x3c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	200b      	movs	r0, #11
 80009dc:	f001 fad5 	bl	8001f8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009e0:	200b      	movs	r0, #11
 80009e2:	f001 faee 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	4b37      	ldr	r3, [pc, #220]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a36      	ldr	r2, [pc, #216]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a14:	f043 0304 	orr.w	r3, r3, #4
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b34      	ldr	r3, [pc, #208]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0304 	and.w	r3, r3, #4
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a28      	ldr	r2, [pc, #160]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a4c:	f043 0301 	orr.w	r3, r3, #1
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000aec <MX_GPIO_Init+0xf8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	481c      	ldr	r0, [pc, #112]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000a80:	f001 ff68 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2130      	movs	r1, #48	@ 0x30
 8000a88:	481a      	ldr	r0, [pc, #104]	@ (8000af4 <MX_GPIO_Init+0x100>)
 8000a8a:	f001 ff63 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4814      	ldr	r0, [pc, #80]	@ (8000af8 <MX_GPIO_Init+0x104>)
 8000aa6:	f001 fdc1 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aaa:	2320      	movs	r3, #32
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <MX_GPIO_Init+0xfc>)
 8000ac2:	f001 fdb3 	bl	800262c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ac6:	2330      	movs	r3, #48	@ 0x30
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_GPIO_Init+0x100>)
 8000ade:	f001 fda5 	bl	800262c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40020400 	.word	0x40020400
 8000af8:	40020800 	.word	0x40020800

08000afc <Motor_Rotate_To_Angle>:

/* USER CODE BEGIN 4 */

void Motor_Rotate_To_Angle(int8_t target_angle)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b092      	sub	sp, #72	@ 0x48
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
    const int8_t ANGLE_LIMIT_MIN = -120;
 8000b06:	2388      	movs	r3, #136	@ 0x88
 8000b08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    const int8_t ANGLE_LIMIT_MAX = 120;
 8000b0c:	2378      	movs	r3, #120	@ 0x78
 8000b0e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    char debug[50];

    if (target_angle > ANGLE_LIMIT_MAX) target_angle = ANGLE_LIMIT_MAX;
 8000b12:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b16:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dd02      	ble.n	8000b24 <Motor_Rotate_To_Angle+0x28>
 8000b1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b22:	71fb      	strb	r3, [r7, #7]
    if (target_angle < ANGLE_LIMIT_MIN) target_angle = ANGLE_LIMIT_MIN;
 8000b24:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000b28:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	da02      	bge.n	8000b36 <Motor_Rotate_To_Angle+0x3a>
 8000b30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b34:	71fb      	strb	r3, [r7, #7]

    sprintf(buffer, "Going to angle: %d\r\n", target_angle);
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4981      	ldr	r1, [pc, #516]	@ (8000d44 <Motor_Rotate_To_Angle+0x248>)
 8000b3e:	4882      	ldr	r0, [pc, #520]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000b40:	f005 feaa 	bl	8006898 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000b44:	4880      	ldr	r0, [pc, #512]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000b46:	f7ff fb63 	bl	8000210 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	2364      	movs	r3, #100	@ 0x64
 8000b50:	497d      	ldr	r1, [pc, #500]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000b52:	487e      	ldr	r0, [pc, #504]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000b54:	f005 fae4 	bl	8006120 <HAL_UART_Transmit>

    int attempt = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44

    while (1)
    {
        int8_t current_angle = Get_Actual_Angle();
 8000b5c:	f000 f908 	bl	8000d70 <Get_Actual_Angle>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d


        if (current_angle == -127)
 8000b66:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8000b6a:	f113 0f7f 	cmn.w	r3, #127	@ 0x7f
 8000b6e:	d106      	bne.n	8000b7e <Motor_Rotate_To_Angle+0x82>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)"⚠️ Invalid ADC reading. Skipping movement.\r\n", 44, 100);
 8000b70:	2364      	movs	r3, #100	@ 0x64
 8000b72:	222c      	movs	r2, #44	@ 0x2c
 8000b74:	4976      	ldr	r1, [pc, #472]	@ (8000d50 <Motor_Rotate_To_Angle+0x254>)
 8000b76:	4875      	ldr	r0, [pc, #468]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000b78:	f005 fad2 	bl	8006120 <HAL_UART_Transmit>
            break;
 8000b7c:	e0de      	b.n	8000d3c <Motor_Rotate_To_Angle+0x240>
        }

        sprintf(debug, "Actual Angle: %d\r\n", current_angle);
 8000b7e:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4973      	ldr	r1, [pc, #460]	@ (8000d54 <Motor_Rotate_To_Angle+0x258>)
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f005 fe85 	bl	8006898 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)debug, strlen(debug), 100);
 8000b8e:	f107 0308 	add.w	r3, r7, #8
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fb3c 	bl	8000210 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	f107 0108 	add.w	r1, r7, #8
 8000ba0:	2364      	movs	r3, #100	@ 0x64
 8000ba2:	486a      	ldr	r0, [pc, #424]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000ba4:	f005 fabc 	bl	8006120 <HAL_UART_Transmit>

        int8_t error = target_angle - current_angle;
 8000ba8:	79fa      	ldrb	r2, [r7, #7]
 8000baa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

        if (abs(error) <= 1)
 8000bb6:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	bfb8      	it	lt
 8000bbe:	425b      	neglt	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d811      	bhi.n	8000bea <Motor_Rotate_To_Angle+0xee>
        {
            sprintf(buffer, "✅ Reached: %d\r\n\r\n", current_angle);
 8000bc6:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4962      	ldr	r1, [pc, #392]	@ (8000d58 <Motor_Rotate_To_Angle+0x25c>)
 8000bce:	485e      	ldr	r0, [pc, #376]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000bd0:	f005 fe62 	bl	8006898 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000bd4:	485c      	ldr	r0, [pc, #368]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000bd6:	f7ff fb1b 	bl	8000210 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	4959      	ldr	r1, [pc, #356]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000be2:	485a      	ldr	r0, [pc, #360]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000be4:	f005 fa9c 	bl	8006120 <HAL_UART_Transmit>
            break;
 8000be8:	e0a8      	b.n	8000d3c <Motor_Rotate_To_Angle+0x240>
        }

        if (abs(error) > 180)
 8000bea:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bfb8      	it	lt
 8000bf2:	425b      	neglt	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2bb4      	cmp	r3, #180	@ 0xb4
 8000bf8:	d906      	bls.n	8000c08 <Motor_Rotate_To_Angle+0x10c>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)"❌ Movement too large!\r\n\r\n", 27, 100);
 8000bfa:	2364      	movs	r3, #100	@ 0x64
 8000bfc:	221b      	movs	r2, #27
 8000bfe:	4957      	ldr	r1, [pc, #348]	@ (8000d5c <Motor_Rotate_To_Angle+0x260>)
 8000c00:	4852      	ldr	r0, [pc, #328]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000c02:	f005 fa8d 	bl	8006120 <HAL_UART_Transmit>
 8000c06:	e099      	b.n	8000d3c <Motor_Rotate_To_Angle+0x240>
            return;
        }


        HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_PIN1, (error < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c08:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c0c:	09db      	lsrs	r3, r3, #7
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	2110      	movs	r1, #16
 8000c14:	4852      	ldr	r0, [pc, #328]	@ (8000d60 <Motor_Rotate_To_Angle+0x264>)
 8000c16:	f001 fe9d 	bl	8002954 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_PIN2, (error > 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c1a:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	bfcc      	ite	gt
 8000c22:	2301      	movgt	r3, #1
 8000c24:	2300      	movle	r3, #0
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	461a      	mov	r2, r3
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	484c      	ldr	r0, [pc, #304]	@ (8000d60 <Motor_Rotate_To_Angle+0x264>)
 8000c2e:	f001 fe91 	bl	8002954 <HAL_GPIO_WritePin>

        uint16_t speed;
        uint16_t delay_ms;

        if (abs(error) > 20) {
 8000c32:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bfb8      	it	lt
 8000c3a:	425b      	neglt	r3, r3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b14      	cmp	r3, #20
 8000c40:	d907      	bls.n	8000c52 <Motor_Rotate_To_Angle+0x156>
            speed = 2000;
 8000c42:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000c46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            delay_ms = 25;
 8000c4a:	2319      	movs	r3, #25
 8000c4c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000c50:	e026      	b.n	8000ca0 <Motor_Rotate_To_Angle+0x1a4>
        }
        else if (abs(error) > 10) {
 8000c52:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	bfb8      	it	lt
 8000c5a:	425b      	neglt	r3, r3
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b0a      	cmp	r3, #10
 8000c60:	d907      	bls.n	8000c72 <Motor_Rotate_To_Angle+0x176>
            speed = 1500;
 8000c62:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            delay_ms = 22;
 8000c6a:	2316      	movs	r3, #22
 8000c6c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000c70:	e016      	b.n	8000ca0 <Motor_Rotate_To_Angle+0x1a4>
        }
        else if (abs(error) > 5) {
 8000c72:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	bfb8      	it	lt
 8000c7a:	425b      	neglt	r3, r3
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	d907      	bls.n	8000c92 <Motor_Rotate_To_Angle+0x196>
            speed = 1300;
 8000c82:	f240 5314 	movw	r3, #1300	@ 0x514
 8000c86:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            delay_ms = 20;
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8000c90:	e006      	b.n	8000ca0 <Motor_Rotate_To_Angle+0x1a4>
        }
        else {
            speed = 1000;
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            delay_ms = 17;
 8000c9a:	2311      	movs	r3, #17
 8000c9c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        }

        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, speed);
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <Motor_Rotate_To_Angle+0x268>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8000ca8:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(delay_ms);
 8000caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fc5c 	bl	800156c <HAL_Delay>


        HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_PIN1, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4829      	ldr	r0, [pc, #164]	@ (8000d60 <Motor_Rotate_To_Angle+0x264>)
 8000cba:	f001 fe4b 	bl	8002954 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_PIN2, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	4827      	ldr	r0, [pc, #156]	@ (8000d60 <Motor_Rotate_To_Angle+0x264>)
 8000cc4:	f001 fe46 	bl	8002954 <HAL_GPIO_WritePin>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000cc8:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <Motor_Rotate_To_Angle+0x268>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
        HAL_Delay(50);
 8000cd0:	2032      	movs	r0, #50	@ 0x32
 8000cd2:	f000 fc4b 	bl	800156c <HAL_Delay>

        attempt++;
 8000cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cd8:	3301      	adds	r3, #1
 8000cda:	647b      	str	r3, [r7, #68]	@ 0x44
        if (attempt > 25)
 8000cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000cde:	2b19      	cmp	r3, #25
 8000ce0:	f77f af3c 	ble.w	8000b5c <Motor_Rotate_To_Angle+0x60>
        {

            int8_t final_angle = Get_Actual_Angle();
 8000ce4:	f000 f844 	bl	8000d70 <Get_Actual_Angle>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            int8_t final_error = target_angle - final_angle;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

            if (abs(final_error) <= 1)
 8000cfc:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	bfb8      	it	lt
 8000d04:	425b      	neglt	r3, r3
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d811      	bhi.n	8000d30 <Motor_Rotate_To_Angle+0x234>
            {
                sprintf(buffer, "⚠️ Max attempts, but close enough: %d\r\n", final_angle);
 8000d0c:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8000d10:	461a      	mov	r2, r3
 8000d12:	4915      	ldr	r1, [pc, #84]	@ (8000d68 <Motor_Rotate_To_Angle+0x26c>)
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000d16:	f005 fdbf 	bl	8006898 <siprintf>
                HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000d1a:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000d1c:	f7ff fa78 	bl	8000210 <strlen>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	2364      	movs	r3, #100	@ 0x64
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <Motor_Rotate_To_Angle+0x24c>)
 8000d28:	4808      	ldr	r0, [pc, #32]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000d2a:	f005 f9f9 	bl	8006120 <HAL_UART_Transmit>
            }
            else
            {
                HAL_UART_Transmit(&huart2, (uint8_t *)"❌ Failed to reach target angle.\r\n", 34, 100);
            }
            break;
 8000d2e:	e005      	b.n	8000d3c <Motor_Rotate_To_Angle+0x240>
                HAL_UART_Transmit(&huart2, (uint8_t *)"❌ Failed to reach target angle.\r\n", 34, 100);
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	2222      	movs	r2, #34	@ 0x22
 8000d34:	490d      	ldr	r1, [pc, #52]	@ (8000d6c <Motor_Rotate_To_Angle+0x270>)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <Motor_Rotate_To_Angle+0x250>)
 8000d38:	f005 f9f2 	bl	8006120 <HAL_UART_Transmit>
        }
    }
}
 8000d3c:	3748      	adds	r7, #72	@ 0x48
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08007224 	.word	0x08007224
 8000d48:	2000020c 	.word	0x2000020c
 8000d4c:	200001c0 	.word	0x200001c0
 8000d50:	0800723c 	.word	0x0800723c
 8000d54:	08007270 	.word	0x08007270
 8000d58:	08007284 	.word	0x08007284
 8000d5c:	08007298 	.word	0x08007298
 8000d60:	40020400 	.word	0x40020400
 8000d64:	20000178 	.word	0x20000178
 8000d68:	080072b4 	.word	0x080072b4
 8000d6c:	080072e0 	.word	0x080072e0

08000d70 <Get_Actual_Angle>:
        HAL_Delay(1200);
    }
}
*/
int8_t Get_Actual_Angle(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b09a      	sub	sp, #104	@ 0x68
 8000d74:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)"Reading ADC...\r\n", 17, 100);
 8000d76:	2364      	movs	r3, #100	@ 0x64
 8000d78:	2211      	movs	r2, #17
 8000d7a:	4970      	ldr	r1, [pc, #448]	@ (8000f3c <Get_Actual_Angle+0x1cc>)
 8000d7c:	4870      	ldr	r0, [pc, #448]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000d7e:	f005 f9cf 	bl	8006120 <HAL_UART_Transmit>

    const uint16_t pot_zero  = 2077;
 8000d82:	f640 031d 	movw	r3, #2077	@ 0x81d
 8000d86:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    const uint16_t pot_right = 1530;
 8000d8a:	f240 53fa 	movw	r3, #1530	@ 0x5fa
 8000d8e:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
    const uint16_t pot_left  = 2540;
 8000d92:	f640 13ec 	movw	r3, #2540	@ 0x9ec
 8000d96:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

    int total = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	667b      	str	r3, [r7, #100]	@ 0x64
    for (int i = 0; i < 1; i++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	663b      	str	r3, [r7, #96]	@ 0x60
 8000da2:	e055      	b.n	8000e50 <Get_Actual_Angle+0xe0>
    {
    	HAL_UART_Transmit(&huart2, (uint8_t *)"Start ADC round\r\n", 18, 100);
 8000da4:	2364      	movs	r3, #100	@ 0x64
 8000da6:	2212      	movs	r2, #18
 8000da8:	4966      	ldr	r1, [pc, #408]	@ (8000f44 <Get_Actual_Angle+0x1d4>)
 8000daa:	4865      	ldr	r0, [pc, #404]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000dac:	f005 f9b8 	bl	8006120 <HAL_UART_Transmit>
        HAL_ADC_Start(&hadc1);
 8000db0:	4865      	ldr	r0, [pc, #404]	@ (8000f48 <Get_Actual_Angle+0x1d8>)
 8000db2:	f000 fc43 	bl	800163c <HAL_ADC_Start>

        HAL_UART_Transmit(&huart2, (uint8_t *)"Polling...\r\n", 12, 100);
 8000db6:	2364      	movs	r3, #100	@ 0x64
 8000db8:	220c      	movs	r2, #12
 8000dba:	4964      	ldr	r1, [pc, #400]	@ (8000f4c <Get_Actual_Angle+0x1dc>)
 8000dbc:	4860      	ldr	r0, [pc, #384]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000dbe:	f005 f9af 	bl	8006120 <HAL_UART_Transmit>
        if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000dc2:	2164      	movs	r1, #100	@ 0x64
 8000dc4:	4860      	ldr	r0, [pc, #384]	@ (8000f48 <Get_Actual_Angle+0x1d8>)
 8000dc6:	f000 fd3e 	bl	8001846 <HAL_ADC_PollForConversion>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00b      	beq.n	8000de8 <Get_Actual_Angle+0x78>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)"❌ ADC Poll Timeout!\r\n", 23, 100);
 8000dd0:	2364      	movs	r3, #100	@ 0x64
 8000dd2:	2217      	movs	r2, #23
 8000dd4:	495e      	ldr	r1, [pc, #376]	@ (8000f50 <Get_Actual_Angle+0x1e0>)
 8000dd6:	485a      	ldr	r0, [pc, #360]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000dd8:	f005 f9a2 	bl	8006120 <HAL_UART_Transmit>
            HAL_ADC_Stop(&hadc1);
 8000ddc:	485a      	ldr	r0, [pc, #360]	@ (8000f48 <Get_Actual_Angle+0x1d8>)
 8000dde:	f000 fcff 	bl	80017e0 <HAL_ADC_Stop>
            return -127;
 8000de2:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 8000de6:	e0a5      	b.n	8000f34 <Get_Actual_Angle+0x1c4>
        }

        char val[30];
        readValue = HAL_ADC_GetValue(&hadc1);
 8000de8:	4857      	ldr	r0, [pc, #348]	@ (8000f48 <Get_Actual_Angle+0x1d8>)
 8000dea:	f000 fdb7 	bl	800195c <HAL_ADC_GetValue>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	4b58      	ldr	r3, [pc, #352]	@ (8000f54 <Get_Actual_Angle+0x1e4>)
 8000df4:	801a      	strh	r2, [r3, #0]
        sprintf(val, "ReadValue: %d\r\n", readValue);
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <Get_Actual_Angle+0x1e4>)
 8000df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4955      	ldr	r1, [pc, #340]	@ (8000f58 <Get_Actual_Angle+0x1e8>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f005 fd47 	bl	8006898 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)val, strlen(val), 100);
 8000e0a:	f107 0308 	add.w	r3, r7, #8
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff f9fe 	bl	8000210 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29a      	uxth	r2, r3
 8000e18:	f107 0108 	add.w	r1, r7, #8
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	4848      	ldr	r0, [pc, #288]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000e20:	f005 f97e 	bl	8006120 <HAL_UART_Transmit>



        HAL_UART_Transmit(&huart2, (uint8_t *)"Read Done\r\n", 11, 100);
 8000e24:	2364      	movs	r3, #100	@ 0x64
 8000e26:	220b      	movs	r2, #11
 8000e28:	494c      	ldr	r1, [pc, #304]	@ (8000f5c <Get_Actual_Angle+0x1ec>)
 8000e2a:	4845      	ldr	r0, [pc, #276]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000e2c:	f005 f978 	bl	8006120 <HAL_UART_Transmit>

        HAL_ADC_Stop(&hadc1);
 8000e30:	4845      	ldr	r0, [pc, #276]	@ (8000f48 <Get_Actual_Angle+0x1d8>)
 8000e32:	f000 fcd5 	bl	80017e0 <HAL_ADC_Stop>
        total += readValue;
 8000e36:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <Get_Actual_Angle+0x1e4>)
 8000e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e40:	4413      	add	r3, r2
 8000e42:	667b      	str	r3, [r7, #100]	@ 0x64
        HAL_Delay(5);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f000 fb91 	bl	800156c <HAL_Delay>
    for (int i = 0; i < 1; i++)
 8000e4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8000e50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dda6      	ble.n	8000da4 <Get_Actual_Angle+0x34>
    }

    int average = total / 1;
 8000e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e58:	653b      	str	r3, [r7, #80]	@ 0x50
    float angle = 0;
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    char debug[40];
    sprintf(debug, "Avg ADC = %d\r\n", average);
 8000e60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e66:	493e      	ldr	r1, [pc, #248]	@ (8000f60 <Get_Actual_Angle+0x1f0>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fd15 	bl	8006898 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)debug, strlen(debug), 100);
 8000e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff f9cc 	bl	8000210 <strlen>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000e80:	2364      	movs	r3, #100	@ 0x64
 8000e82:	482f      	ldr	r0, [pc, #188]	@ (8000f40 <Get_Actual_Angle+0x1d0>)
 8000e84:	f005 f94c 	bl	8006120 <HAL_UART_Transmit>

    if (average >= pot_zero)
 8000e88:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000e8c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	db24      	blt.n	8000edc <Get_Actual_Angle+0x16c>
    {
        angle = ((float)(average - pot_zero) / (pot_right - pot_zero)) * 90.0f;
 8000e92:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000e96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	ee07 3a90 	vmov	s15, r3
 8000e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ea2:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8000ea6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	ee07 3a90 	vmov	s15, r3
 8000eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8000f64 <Get_Actual_Angle+0x1f4>
 8000ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        if (angle > 90.0f) angle = 90.0f;
 8000ec4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000ec8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000f64 <Get_Actual_Angle+0x1f4>
 8000ecc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed4:	dd26      	ble.n	8000f24 <Get_Actual_Angle+0x1b4>
 8000ed6:	4b24      	ldr	r3, [pc, #144]	@ (8000f68 <Get_Actual_Angle+0x1f8>)
 8000ed8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000eda:	e023      	b.n	8000f24 <Get_Actual_Angle+0x1b4>
    }
    else
    {
        angle = ((float)(average - pot_zero) / (pot_zero - pot_left)) * 90.0f;
 8000edc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8000ee0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eec:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8000ef0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f02:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8000f64 <Get_Actual_Angle+0x1f4>
 8000f06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0a:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
        if (angle < -90.0f) angle = -90.0f;
 8000f0e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000f12:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000f6c <Get_Actual_Angle+0x1fc>
 8000f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1e:	d501      	bpl.n	8000f24 <Get_Actual_Angle+0x1b4>
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <Get_Actual_Angle+0x200>)
 8000f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    return (int8_t)angle;
 8000f24:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8000f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f30:	793b      	ldrb	r3, [r7, #4]
 8000f32:	b25b      	sxtb	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3768      	adds	r7, #104	@ 0x68
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	08007304 	.word	0x08007304
 8000f40:	200001c0 	.word	0x200001c0
 8000f44:	08007318 	.word	0x08007318
 8000f48:	2000007c 	.word	0x2000007c
 8000f4c:	0800732c 	.word	0x0800732c
 8000f50:	0800733c 	.word	0x0800733c
 8000f54:	20000208 	.word	0x20000208
 8000f58:	08007354 	.word	0x08007354
 8000f5c:	08007364 	.word	0x08007364
 8000f60:	08007370 	.word	0x08007370
 8000f64:	42b40000 	.word	0x42b40000
 8000f68:	42b40000 	.word	0x42b40000
 8000f6c:	c2b40000 	.word	0xc2b40000
 8000f70:	c2b40000 	.word	0xc2b40000

08000f74 <HAL_I2C_SlaveRxCpltCallback>:


void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	sprintf(buffer, "Callback Entered. Angle = %d\r\n", received_angle);
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8000f7e:	f993 3000 	ldrsb.w	r3, [r3]
 8000f82:	461a      	mov	r2, r3
 8000f84:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8000f86:	480e      	ldr	r0, [pc, #56]	@ (8000fc0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000f88:	f005 fc86 	bl	8006898 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000f8c:	480c      	ldr	r0, [pc, #48]	@ (8000fc0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000f8e:	f7ff f93f 	bl	8000210 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	2364      	movs	r3, #100	@ 0x64
 8000f98:	4909      	ldr	r1, [pc, #36]	@ (8000fc0 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8000f9a:	480a      	ldr	r0, [pc, #40]	@ (8000fc4 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8000f9c:	f005 f8c0 	bl	8006120 <HAL_UART_Transmit>

	do_rotate = 1;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t*)&received_angle, 1);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4903      	ldr	r1, [pc, #12]	@ (8000fb8 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8000faa:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <HAL_I2C_SlaveRxCpltCallback+0x58>)
 8000fac:	f001 fe46 	bl	8002c3c <HAL_I2C_Slave_Receive_IT>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	08007380 	.word	0x08007380
 8000fc0:	2000020c 	.word	0x2000020c
 8000fc4:	200001c0 	.word	0x200001c0
 8000fc8:	20000270 	.word	0x20000270
 8000fcc:	200000c4 	.word	0x200000c4

08000fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd4:	b672      	cpsid	i
}
 8000fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <Error_Handler+0x8>

08000fdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	@ (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101a:	2007      	movs	r0, #7
 800101c:	f000 ffaa 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_ADC_MspInit+0x7c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d127      	bne.n	800109e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001056:	4a15      	ldr	r2, [pc, #84]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105c:	6453      	str	r3, [r2, #68]	@ 0x44
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <HAL_ADC_MspInit+0x80>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108a:	2303      	movs	r3, #3
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_ADC_MspInit+0x84>)
 800109a:	f001 fac7 	bl	800262c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	@ 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40012000 	.word	0x40012000
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000

080010b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a38      	ldr	r2, [pc, #224]	@ (80011b4 <HAL_I2C_MspInit+0x100>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d16a      	bne.n	80011ac <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b37      	ldr	r3, [pc, #220]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a36      	ldr	r2, [pc, #216]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001104:	2304      	movs	r3, #4
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	482b      	ldr	r0, [pc, #172]	@ (80011bc <HAL_I2C_MspInit+0x108>)
 8001110:	f001 fa8c 	bl	800262c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111c:	4a26      	ldr	r2, [pc, #152]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 800111e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001122:	6413      	str	r3, [r2, #64]	@ 0x40
 8001124:	4b24      	ldr	r3, [pc, #144]	@ (80011b8 <HAL_I2C_MspInit+0x104>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001130:	4b23      	ldr	r3, [pc, #140]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001132:	4a24      	ldr	r2, [pc, #144]	@ (80011c4 <HAL_I2C_MspInit+0x110>)
 8001134:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001136:	4b22      	ldr	r3, [pc, #136]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001138:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800113c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800113e:	4b20      	ldr	r3, [pc, #128]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001144:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800114a:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 800114c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001150:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001170:	4813      	ldr	r0, [pc, #76]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001172:	f000 ff41 	bl	8001ff8 <HAL_DMA_Init>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800117c:	f7ff ff28 	bl	8000fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001184:	639a      	str	r2, [r3, #56]	@ 0x38
 8001186:	4a0e      	ldr	r2, [pc, #56]	@ (80011c0 <HAL_I2C_MspInit+0x10c>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	201f      	movs	r0, #31
 8001192:	f000 fefa 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001196:	201f      	movs	r0, #31
 8001198:	f000 ff13 	bl	8001fc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2020      	movs	r0, #32
 80011a2:	f000 fef2 	bl	8001f8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011a6:	2020      	movs	r0, #32
 80011a8:	f000 ff0b 	bl	8001fc2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40005400 	.word	0x40005400
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020400 	.word	0x40020400
 80011c0:	20000118 	.word	0x20000118
 80011c4:	40026010 	.word	0x40026010

080011c8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011d8:	d10d      	bne.n	80011f6 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b09      	ldr	r3, [pc, #36]	@ (8001204 <HAL_TIM_Base_MspInit+0x3c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <HAL_TIM_Base_MspInit+0x3c>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <HAL_TIM_Base_MspInit+0x3c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001228:	d11e      	bne.n	8001268 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <HAL_TIM_MspPostInit+0x68>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a0f      	ldr	r2, [pc, #60]	@ (8001270 <HAL_TIM_MspPostInit+0x68>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b0d      	ldr	r3, [pc, #52]	@ (8001270 <HAL_TIM_MspPostInit+0x68>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800124a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001258:	2301      	movs	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4804      	ldr	r0, [pc, #16]	@ (8001274 <HAL_TIM_MspPostInit+0x6c>)
 8001264:	f001 f9e2 	bl	800262c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020400 	.word	0x40020400

08001278 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	@ (80012fc <HAL_UART_MspInit+0x84>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12b      	bne.n	80012f2 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b18      	ldr	r3, [pc, #96]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a2:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012aa:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001300 <HAL_UART_MspInit+0x88>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012d2:	230c      	movs	r3, #12
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012e2:	2307      	movs	r3, #7
 80012e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4805      	ldr	r0, [pc, #20]	@ (8001304 <HAL_UART_MspInit+0x8c>)
 80012ee:	f001 f99d 	bl	800262c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	@ 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40004400 	.word	0x40004400
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000

08001308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800130c:	bf00      	nop
 800130e:	e7fd      	b.n	800130c <NMI_Handler+0x4>

08001310 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <MemManage_Handler+0x4>

08001320 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <UsageFault_Handler+0x4>

08001330 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800135e:	f000 f8e5 	bl	800152c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <DMA1_Stream0_IRQHandler+0x10>)
 800136e:	f000 ff13 	bl	8002198 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000118 	.word	0x20000118

0800137c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <I2C1_EV_IRQHandler+0x10>)
 8001382:	f001 fccb 	bl	8002d1c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200000c4 	.word	0x200000c4

08001390 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <I2C1_ER_IRQHandler+0x10>)
 8001396:	f001 fe32 	bl	8002ffe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200000c4 	.word	0x200000c4

080013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013ac:	4a14      	ldr	r2, [pc, #80]	@ (8001400 <_sbrk+0x5c>)
 80013ae:	4b15      	ldr	r3, [pc, #84]	@ (8001404 <_sbrk+0x60>)
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013b8:	4b13      	ldr	r3, [pc, #76]	@ (8001408 <_sbrk+0x64>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <_sbrk+0x64>)
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <_sbrk+0x68>)
 80013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d207      	bcs.n	80013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013d4:	f005 fa8a 	bl	80068ec <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	220c      	movs	r2, #12
 80013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
 80013e2:	e009      	b.n	80013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <_sbrk+0x64>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ea:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <_sbrk+0x64>)
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4413      	add	r3, r2
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <_sbrk+0x64>)
 80013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013f6:	68fb      	ldr	r3, [r7, #12]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20020000 	.word	0x20020000
 8001404:	00000400 	.word	0x00000400
 8001408:	20000274 	.word	0x20000274
 800140c:	200003c8 	.word	0x200003c8

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	@ (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800146c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001438:	f7ff ffea 	bl	8001410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	@ (8001470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	@ (8001474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	@ (8001480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001462:	f005 fa49 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001466:	f7ff f8c1 	bl	80005ec <main>
  bx  lr    
 800146a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800146c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001478:	08007404 	.word	0x08007404
  ldr r2, =_sbss
 800147c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001480:	200003c4 	.word	0x200003c4

08001484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0d      	ldr	r2, [pc, #52]	@ (80014c8 <HAL_Init+0x40>)
 8001492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_Init+0x40>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_Init+0x40>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_Init+0x40>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b0:	2003      	movs	r0, #3
 80014b2:	f000 fd5f 	bl	8001f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f000 f808 	bl	80014cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014bc:	f7ff fd8e 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023c00 	.word	0x40023c00

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d4:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <HAL_InitTick+0x54>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <HAL_InitTick+0x58>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f000 fd77 	bl	8001fde <HAL_SYSTICK_Config>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00e      	b.n	8001518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b0f      	cmp	r3, #15
 80014fe:	d80a      	bhi.n	8001516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001500:	2200      	movs	r2, #0
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	f04f 30ff 	mov.w	r0, #4294967295
 8001508:	f000 fd3f 	bl	8001f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800150c:	4a06      	ldr	r2, [pc, #24]	@ (8001528 <HAL_InitTick+0x5c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000004 	.word	0x20000004
 8001524:	2000000c 	.word	0x2000000c
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000000c 	.word	0x2000000c
 8001550:	20000278 	.word	0x20000278

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000278 	.word	0x20000278

0800156c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001574:	f7ff ffee 	bl	8001554 <HAL_GetTick>
 8001578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001584:	d005      	beq.n	8001592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001586:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <HAL_Delay+0x44>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4413      	add	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001592:	bf00      	nop
 8001594:	f7ff ffde 	bl	8001554 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d8f7      	bhi.n	8001594 <HAL_Delay+0x28>
  {
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000000c 	.word	0x2000000c

080015b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e033      	b.n	8001632 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fd2a 	bl	800102c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d118      	bne.n	8001624 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015fa:	f023 0302 	bic.w	r3, r3, #2
 80015fe:	f043 0202 	orr.w	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fae8 	bl	8001bdc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f023 0303 	bic.w	r3, r3, #3
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	641a      	str	r2, [r3, #64]	@ 0x40
 8001622:	e001      	b.n	8001628 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_ADC_Start+0x1a>
 8001652:	2302      	movs	r3, #2
 8001654:	e0b2      	b.n	80017bc <HAL_ADC_Start+0x180>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b01      	cmp	r3, #1
 800166a:	d018      	beq.n	800169e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800167c:	4b52      	ldr	r3, [pc, #328]	@ (80017c8 <HAL_ADC_Start+0x18c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_ADC_Start+0x190>)
 8001682:	fba2 2303 	umull	r2, r3, r2, r3
 8001686:	0c9a      	lsrs	r2, r3, #18
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001690:	e002      	b.n	8001698 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3b01      	subs	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f9      	bne.n	8001692 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d17a      	bne.n	80017a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ea:	d106      	bne.n	80016fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f0:	f023 0206 	bic.w	r2, r3, #6
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	645a      	str	r2, [r3, #68]	@ 0x44
 80016f8:	e002      	b.n	8001700 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001708:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_ADC_Start+0x194>)
 800170a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001714:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 031f 	and.w	r3, r3, #31
 800171e:	2b00      	cmp	r3, #0
 8001720:	d12a      	bne.n	8001778 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a2b      	ldr	r2, [pc, #172]	@ (80017d4 <HAL_ADC_Start+0x198>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d015      	beq.n	8001758 <HAL_ADC_Start+0x11c>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a29      	ldr	r2, [pc, #164]	@ (80017d8 <HAL_ADC_Start+0x19c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d105      	bne.n	8001742 <HAL_ADC_Start+0x106>
 8001736:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <HAL_ADC_Start+0x194>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00a      	beq.n	8001758 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a25      	ldr	r2, [pc, #148]	@ (80017dc <HAL_ADC_Start+0x1a0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d136      	bne.n	80017ba <HAL_ADC_Start+0x17e>
 800174c:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_ADC_Start+0x194>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0310 	and.w	r3, r3, #16
 8001754:	2b00      	cmp	r3, #0
 8001756:	d130      	bne.n	80017ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d129      	bne.n	80017ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	e020      	b.n	80017ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a15      	ldr	r2, [pc, #84]	@ (80017d4 <HAL_ADC_Start+0x198>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d11b      	bne.n	80017ba <HAL_ADC_Start+0x17e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d114      	bne.n	80017ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	e00b      	b.n	80017ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	f043 0210 	orr.w	r2, r3, #16
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20000004 	.word	0x20000004
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	40012300 	.word	0x40012300
 80017d4:	40012000 	.word	0x40012000
 80017d8:	40012100 	.word	0x40012100
 80017dc:	40012200 	.word	0x40012200

080017e0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_ADC_Stop+0x16>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e021      	b.n	800183a <HAL_ADC_Stop+0x5a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d109      	bne.n	8001830 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b084      	sub	sp, #16
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800185e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001862:	d113      	bne.n	800188c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800186e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001872:	d10b      	bne.n	800188c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e063      	b.n	8001954 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fe62 	bl	8001554 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001892:	e021      	b.n	80018d8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189a:	d01d      	beq.n	80018d8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_ADC_PollForConversion+0x6c>
 80018a2:	f7ff fe57 	bl	8001554 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d212      	bcs.n	80018d8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d00b      	beq.n	80018d8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	f043 0204 	orr.w	r2, r3, #4
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e03d      	b.n	8001954 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d1d6      	bne.n	8001894 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 0212 	mvn.w	r2, #18
 80018ee:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d123      	bne.n	8001952 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	d11f      	bne.n	8001952 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001918:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191c:	2b00      	cmp	r3, #0
 800191e:	d006      	beq.n	800192e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800192a:	2b00      	cmp	r3, #0
 800192c:	d111      	bne.n	8001952 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800198c:	2b01      	cmp	r3, #1
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1c>
 8001990:	2302      	movs	r3, #2
 8001992:	e113      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x244>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d925      	bls.n	80019f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	461a      	mov	r2, r3
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	3b1e      	subs	r3, #30
 80019ba:	2207      	movs	r2, #7
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43da      	mvns	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	400a      	ands	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68d9      	ldr	r1, [r3, #12]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	4603      	mov	r3, r0
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4403      	add	r3, r0
 80019e2:	3b1e      	subs	r3, #30
 80019e4:	409a      	lsls	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	e022      	b.n	8001a36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6919      	ldr	r1, [r3, #16]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	461a      	mov	r2, r3
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	2207      	movs	r2, #7
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	400a      	ands	r2, r1
 8001a12:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6919      	ldr	r1, [r3, #16]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4403      	add	r3, r0
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b06      	cmp	r3, #6
 8001a3c:	d824      	bhi.n	8001a88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b05      	subs	r3, #5
 8001a50:	221f      	movs	r2, #31
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	3b05      	subs	r3, #5
 8001a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a86:	e04c      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b0c      	cmp	r3, #12
 8001a8e:	d824      	bhi.n	8001ada <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3b23      	subs	r3, #35	@ 0x23
 8001aa2:	221f      	movs	r2, #31
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43da      	mvns	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	3b23      	subs	r3, #35	@ 0x23
 8001acc:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ad8:	e023      	b.n	8001b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	3b41      	subs	r3, #65	@ 0x41
 8001aec:	221f      	movs	r2, #31
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	400a      	ands	r2, r1
 8001afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	4618      	mov	r0, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	3b41      	subs	r3, #65	@ 0x41
 8001b16:	fa00 f203 	lsl.w	r2, r0, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b22:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_ADC_ConfigChannel+0x250>)
 8001b24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a28      	ldr	r2, [pc, #160]	@ (8001bcc <HAL_ADC_ConfigChannel+0x254>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d10f      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1d8>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b12      	cmp	r3, #18
 8001b36:	d10b      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a1d      	ldr	r2, [pc, #116]	@ (8001bcc <HAL_ADC_ConfigChannel+0x254>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12b      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x23a>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001bd0 <HAL_ADC_ConfigChannel+0x258>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_ADC_ConfigChannel+0x1f4>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b11      	cmp	r3, #17
 8001b6a:	d122      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a11      	ldr	r2, [pc, #68]	@ (8001bd0 <HAL_ADC_ConfigChannel+0x258>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d111      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_ADC_ConfigChannel+0x25c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_ADC_ConfigChannel+0x260>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	0c9a      	lsrs	r2, r3, #18
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ba4:	e002      	b.n	8001bac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	10000012 	.word	0x10000012
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	431bde83 	.word	0x431bde83

08001bdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001be4:	4b79      	ldr	r3, [pc, #484]	@ (8001dcc <ADC_Init+0x1f0>)
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	021a      	lsls	r2, r3, #8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6859      	ldr	r1, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6899      	ldr	r1, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	4a58      	ldr	r2, [pc, #352]	@ (8001dd0 <ADC_Init+0x1f4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d022      	beq.n	8001cba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6899      	ldr	r1, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e00f      	b.n	8001cda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001cd8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0202 	bic.w	r2, r2, #2
 8001ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6899      	ldr	r1, [r3, #8]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e1b      	ldrb	r3, [r3, #24]
 8001cf4:	005a      	lsls	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d01b      	beq.n	8001d40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6859      	ldr	r1, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	3b01      	subs	r3, #1
 8001d34:	035a      	lsls	r2, r3, #13
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	e007      	b.n	8001d50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	051a      	lsls	r2, r3, #20
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6899      	ldr	r1, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d92:	025a      	lsls	r2, r3, #9
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6899      	ldr	r1, [r3, #8]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	029a      	lsls	r2, r3, #10
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40012300 	.word	0x40012300
 8001dd0:	0f000001 	.word	0x0f000001

08001dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de4:	4b0c      	ldr	r3, [pc, #48]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001df0:	4013      	ands	r3, r2
 8001df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e06:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <__NVIC_SetPriorityGrouping+0x44>)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	60d3      	str	r3, [r2, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e20:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <__NVIC_GetPriorityGrouping+0x18>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f003 0307 	and.w	r3, r3, #7
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	db0b      	blt.n	8001e62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	f003 021f 	and.w	r2, r3, #31
 8001e50:	4907      	ldr	r1, [pc, #28]	@ (8001e70 <__NVIC_EnableIRQ+0x38>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	2001      	movs	r0, #1
 8001e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	6039      	str	r1, [r7, #0]
 8001e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	db0a      	blt.n	8001e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	490c      	ldr	r1, [pc, #48]	@ (8001ec0 <__NVIC_SetPriority+0x4c>)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9c:	e00a      	b.n	8001eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4908      	ldr	r1, [pc, #32]	@ (8001ec4 <__NVIC_SetPriority+0x50>)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	3b04      	subs	r3, #4
 8001eac:	0112      	lsls	r2, r2, #4
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	761a      	strb	r2, [r3, #24]
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000e100 	.word	0xe000e100
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	f1c3 0307 	rsb	r3, r3, #7
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	bf28      	it	cs
 8001ee6:	2304      	movcs	r3, #4
 8001ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3304      	adds	r3, #4
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d902      	bls.n	8001ef8 <NVIC_EncodePriority+0x30>
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	e000      	b.n	8001efa <NVIC_EncodePriority+0x32>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	401a      	ands	r2, r3
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f10:	f04f 31ff 	mov.w	r1, #4294967295
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	43d9      	mvns	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	4313      	orrs	r3, r2
         );
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	@ 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f40:	d301      	bcc.n	8001f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00f      	b.n	8001f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f46:	4a0a      	ldr	r2, [pc, #40]	@ (8001f70 <SysTick_Config+0x40>)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4e:	210f      	movs	r1, #15
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f7ff ff8e 	bl	8001e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <SysTick_Config+0x40>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5e:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <SysTick_Config+0x40>)
 8001f60:	2207      	movs	r2, #7
 8001f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	e000e010 	.word	0xe000e010

08001f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff ff29 	bl	8001dd4 <__NVIC_SetPriorityGrouping>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f9c:	f7ff ff3e 	bl	8001e1c <__NVIC_GetPriorityGrouping>
 8001fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68b9      	ldr	r1, [r7, #8]
 8001fa6:	6978      	ldr	r0, [r7, #20]
 8001fa8:	f7ff ff8e 	bl	8001ec8 <NVIC_EncodePriority>
 8001fac:	4602      	mov	r2, r0
 8001fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff5d 	bl	8001e74 <__NVIC_SetPriority>
}
 8001fba:	bf00      	nop
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff31 	bl	8001e38 <__NVIC_EnableIRQ>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffa2 	bl	8001f30 <SysTick_Config>
 8001fec:	4603      	mov	r3, r0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff faa6 	bl	8001554 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e099      	b.n	8002148 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002034:	e00f      	b.n	8002056 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002036:	f7ff fa8d 	bl	8001554 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b05      	cmp	r3, #5
 8002042:	d908      	bls.n	8002056 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e078      	b.n	8002148 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e8      	bne.n	8002036 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	4b38      	ldr	r3, [pc, #224]	@ (8002150 <HAL_DMA_Init+0x158>)
 8002070:	4013      	ands	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002082:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	4313      	orrs	r3, r2
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f023 0307 	bic.w	r3, r3, #7
 80020d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d117      	bne.n	800211a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 fa19 	bl	8002534 <DMA_CheckFifoParam>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2240      	movs	r2, #64	@ 0x40
 800210c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002116:	2301      	movs	r3, #1
 8002118:	e016      	b.n	8002148 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f9d0 	bl	80024c8 <DMA_CalcBaseAndBitshift>
 8002128:	4603      	mov	r3, r0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002130:	223f      	movs	r2, #63	@ 0x3f
 8002132:	409a      	lsls	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	f010803f 	.word	0xf010803f

08002154 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d004      	beq.n	8002172 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00c      	b.n	800218c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2205      	movs	r2, #5
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021a4:	4b8e      	ldr	r3, [pc, #568]	@ (80023e0 <HAL_DMA_IRQHandler+0x248>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a8e      	ldr	r2, [pc, #568]	@ (80023e4 <HAL_DMA_IRQHandler+0x24c>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a9b      	lsrs	r3, r3, #10
 80021b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	2208      	movs	r2, #8
 80021c4:	409a      	lsls	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01a      	beq.n	8002204 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d013      	beq.n	8002204 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0204 	bic.w	r2, r2, #4
 80021ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f0:	2208      	movs	r2, #8
 80021f2:	409a      	lsls	r2, r3
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	f043 0201 	orr.w	r2, r3, #1
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	2201      	movs	r2, #1
 800220a:	409a      	lsls	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d012      	beq.n	800223a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	2201      	movs	r2, #1
 8002228:	409a      	lsls	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002232:	f043 0202 	orr.w	r2, r3, #2
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	2204      	movs	r2, #4
 8002240:	409a      	lsls	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d012      	beq.n	8002270 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225c:	2204      	movs	r2, #4
 800225e:	409a      	lsls	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002274:	2210      	movs	r2, #16
 8002276:	409a      	lsls	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4013      	ands	r3, r2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d043      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d03c      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002292:	2210      	movs	r2, #16
 8002294:	409a      	lsls	r2, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d024      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4798      	blx	r3
 80022c6:	e01f      	b.n	8002308 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01b      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
 80022d8:	e016      	b.n	8002308 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d107      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 0208 	bic.w	r2, r2, #8
 80022f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800230c:	2220      	movs	r2, #32
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 808f 	beq.w	8002438 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8087 	beq.w	8002438 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232e:	2220      	movs	r2, #32
 8002330:	409a      	lsls	r2, r3
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b05      	cmp	r3, #5
 8002340:	d136      	bne.n	80023b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0216 	bic.w	r2, r2, #22
 8002350:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002360:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <HAL_DMA_IRQHandler+0x1da>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0208 	bic.w	r2, r2, #8
 8002380:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	223f      	movs	r2, #63	@ 0x3f
 8002388:	409a      	lsls	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d07e      	beq.n	80024a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	4798      	blx	r3
        }
        return;
 80023ae:	e079      	b.n	80024a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d01d      	beq.n	80023fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10d      	bne.n	80023e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d031      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e02c      	b.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
 80023de:	bf00      	nop
 80023e0:	20000004 	.word	0x20000004
 80023e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d023      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	4798      	blx	r3
 80023f8:	e01e      	b.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d10f      	bne.n	8002428 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0210 	bic.w	r2, r2, #16
 8002416:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	2b00      	cmp	r3, #0
 800243e:	d032      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d022      	beq.n	8002492 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2205      	movs	r2, #5
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3301      	adds	r3, #1
 8002468:	60bb      	str	r3, [r7, #8]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	d307      	bcc.n	8002480 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f2      	bne.n	8002464 <HAL_DMA_IRQHandler+0x2cc>
 800247e:	e000      	b.n	8002482 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002480:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	4798      	blx	r3
 80024a2:	e000      	b.n	80024a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024a4:	bf00      	nop
    }
  }
}
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ba:	b2db      	uxtb	r3, r3
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	3b10      	subs	r3, #16
 80024d8:	4a14      	ldr	r2, [pc, #80]	@ (800252c <DMA_CalcBaseAndBitshift+0x64>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024e2:	4a13      	ldr	r2, [pc, #76]	@ (8002530 <DMA_CalcBaseAndBitshift+0x68>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d909      	bls.n	800250a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80024fe:	f023 0303 	bic.w	r3, r3, #3
 8002502:	1d1a      	adds	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	659a      	str	r2, [r3, #88]	@ 0x58
 8002508:	e007      	b.n	800251a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	aaaaaaab 	.word	0xaaaaaaab
 8002530:	080073b8 	.word	0x080073b8

08002534 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11f      	bne.n	800258e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d856      	bhi.n	8002602 <DMA_CheckFifoParam+0xce>
 8002554:	a201      	add	r2, pc, #4	@ (adr r2, 800255c <DMA_CheckFifoParam+0x28>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	0800256d 	.word	0x0800256d
 8002560:	0800257f 	.word	0x0800257f
 8002564:	0800256d 	.word	0x0800256d
 8002568:	08002603 	.word	0x08002603
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d046      	beq.n	8002606 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257c:	e043      	b.n	8002606 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002582:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002586:	d140      	bne.n	800260a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800258c:	e03d      	b.n	800260a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002596:	d121      	bne.n	80025dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b03      	cmp	r3, #3
 800259c:	d837      	bhi.n	800260e <DMA_CheckFifoParam+0xda>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <DMA_CheckFifoParam+0x70>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025bb 	.word	0x080025bb
 80025ac:	080025b5 	.word	0x080025b5
 80025b0:	080025cd 	.word	0x080025cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e030      	b.n	800261c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d025      	beq.n	8002612 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ca:	e022      	b.n	8002612 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d4:	d11f      	bne.n	8002616 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025da:	e01c      	b.n	8002616 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d903      	bls.n	80025ea <DMA_CheckFifoParam+0xb6>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d003      	beq.n	80025f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025e8:	e018      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      break;
 80025ee:	e015      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00e      	beq.n	800261a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e00b      	b.n	800261a <DMA_CheckFifoParam+0xe6>
      break;
 8002602:	bf00      	nop
 8002604:	e00a      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 8002606:	bf00      	nop
 8002608:	e008      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e006      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e004      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e002      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;   
 8002616:	bf00      	nop
 8002618:	e000      	b.n	800261c <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
    }
  } 
  
  return status; 
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop

0800262c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	e165      	b.n	8002914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002648:	2201      	movs	r2, #1
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	429a      	cmp	r2, r3
 8002662:	f040 8154 	bne.w	800290e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d005      	beq.n	800267e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800267a:	2b02      	cmp	r3, #2
 800267c:	d130      	bne.n	80026e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	f003 0201 	and.w	r2, r3, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d017      	beq.n	800271c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	2203      	movs	r2, #3
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43db      	mvns	r3, r3
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	4013      	ands	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	4013      	ands	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80ae 	beq.w	800290e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b5d      	ldr	r3, [pc, #372]	@ (800292c <HAL_GPIO_Init+0x300>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	4a5c      	ldr	r2, [pc, #368]	@ (800292c <HAL_GPIO_Init+0x300>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c2:	4b5a      	ldr	r3, [pc, #360]	@ (800292c <HAL_GPIO_Init+0x300>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ce:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <HAL_GPIO_Init+0x304>)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	3302      	adds	r3, #2
 80027d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002934 <HAL_GPIO_Init+0x308>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d025      	beq.n	8002846 <HAL_GPIO_Init+0x21a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002938 <HAL_GPIO_Init+0x30c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01f      	beq.n	8002842 <HAL_GPIO_Init+0x216>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a4d      	ldr	r2, [pc, #308]	@ (800293c <HAL_GPIO_Init+0x310>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x212>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a4c      	ldr	r2, [pc, #304]	@ (8002940 <HAL_GPIO_Init+0x314>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4b      	ldr	r2, [pc, #300]	@ (8002944 <HAL_GPIO_Init+0x318>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x20a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a4a      	ldr	r2, [pc, #296]	@ (8002948 <HAL_GPIO_Init+0x31c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x206>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a49      	ldr	r2, [pc, #292]	@ (800294c <HAL_GPIO_Init+0x320>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x202>
 800282a:	2306      	movs	r3, #6
 800282c:	e00c      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 800282e:	2307      	movs	r3, #7
 8002830:	e00a      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 8002832:	2305      	movs	r3, #5
 8002834:	e008      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 8002836:	2304      	movs	r3, #4
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 800283a:	2303      	movs	r3, #3
 800283c:	e004      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 800283e:	2302      	movs	r3, #2
 8002840:	e002      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_GPIO_Init+0x21c>
 8002846:	2300      	movs	r3, #0
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	f002 0203 	and.w	r2, r2, #3
 800284e:	0092      	lsls	r2, r2, #2
 8002850:	4093      	lsls	r3, r2
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002858:	4935      	ldr	r1, [pc, #212]	@ (8002930 <HAL_GPIO_Init+0x304>)
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	089b      	lsrs	r3, r3, #2
 800285e:	3302      	adds	r3, #2
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <HAL_GPIO_Init+0x324>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a31      	ldr	r2, [pc, #196]	@ (8002950 <HAL_GPIO_Init+0x324>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b2f      	ldr	r3, [pc, #188]	@ (8002950 <HAL_GPIO_Init+0x324>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a26      	ldr	r2, [pc, #152]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ba:	4b25      	ldr	r3, [pc, #148]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028de:	4a1c      	ldr	r2, [pc, #112]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002950 <HAL_GPIO_Init+0x324>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002908:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <HAL_GPIO_Init+0x324>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3301      	adds	r3, #1
 8002912:	61fb      	str	r3, [r7, #28]
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0f      	cmp	r3, #15
 8002918:	f67f ae96 	bls.w	8002648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800291c:	bf00      	nop
 800291e:	bf00      	nop
 8002920:	3724      	adds	r7, #36	@ 0x24
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	40013800 	.word	0x40013800
 8002934:	40020000 	.word	0x40020000
 8002938:	40020400 	.word	0x40020400
 800293c:	40020800 	.word	0x40020800
 8002940:	40020c00 	.word	0x40020c00
 8002944:	40021000 	.word	0x40021000
 8002948:	40021400 	.word	0x40021400
 800294c:	40021800 	.word	0x40021800
 8002950:	40013c00 	.word	0x40013c00

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002970:	e003      	b.n	800297a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	041a      	lsls	r2, r3, #16
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	619a      	str	r2, [r3, #24]
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e12b      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fb80 	bl	80010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	@ 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029ec:	f001 ffc6 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 80029f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a81      	ldr	r2, [pc, #516]	@ (8002bfc <HAL_I2C_Init+0x274>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d807      	bhi.n	8002a0c <HAL_I2C_Init+0x84>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4a80      	ldr	r2, [pc, #512]	@ (8002c00 <HAL_I2C_Init+0x278>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	bf94      	ite	ls
 8002a04:	2301      	movls	r3, #1
 8002a06:	2300      	movhi	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e006      	b.n	8002a1a <HAL_I2C_Init+0x92>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c04 <HAL_I2C_Init+0x27c>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0e7      	b.n	8002bf2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a78      	ldr	r2, [pc, #480]	@ (8002c08 <HAL_I2C_Init+0x280>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	0c9b      	lsrs	r3, r3, #18
 8002a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d802      	bhi.n	8002a5c <HAL_I2C_Init+0xd4>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	e009      	b.n	8002a70 <HAL_I2C_Init+0xe8>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	4a69      	ldr	r2, [pc, #420]	@ (8002c0c <HAL_I2C_Init+0x284>)
 8002a68:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6c:	099b      	lsrs	r3, r3, #6
 8002a6e:	3301      	adds	r3, #1
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6812      	ldr	r2, [r2, #0]
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	495c      	ldr	r1, [pc, #368]	@ (8002bfc <HAL_I2C_Init+0x274>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d819      	bhi.n	8002ac4 <HAL_I2C_Init+0x13c>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e59      	subs	r1, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_I2C_Init+0x138>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1e59      	subs	r1, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abe:	e051      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e04f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <HAL_I2C_Init+0x168>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	440b      	add	r3, r1
 8002ada:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	e012      	b.n	8002b16 <HAL_I2C_Init+0x18e>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	0099      	lsls	r1, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b06:	3301      	adds	r3, #1
 8002b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Init+0x196>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e022      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <HAL_I2C_Init+0x1bc>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e58      	subs	r0, r3, #1
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6859      	ldr	r1, [r3, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	440b      	add	r3, r1
 8002b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b42:	e00f      	b.n	8002b64 <HAL_I2C_Init+0x1dc>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e58      	subs	r0, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6859      	ldr	r1, [r3, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	0099      	lsls	r1, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	6809      	ldr	r1, [r1, #0]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69da      	ldr	r2, [r3, #28]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6911      	ldr	r1, [r2, #16]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	68d2      	ldr	r2, [r2, #12]
 8002b9e:	4311      	orrs	r1, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	430b      	orrs	r3, r1
 8002ba6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	000186a0 	.word	0x000186a0
 8002c00:	001e847f 	.word	0x001e847f
 8002c04:	003d08ff 	.word	0x003d08ff
 8002c08:	431bde83 	.word	0x431bde83
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c22:	2b80      	cmp	r3, #128	@ 0x80
 8002c24:	d103      	bne.n	8002c2e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  }
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d158      	bne.n	8002d08 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <HAL_I2C_Slave_Receive_IT+0x26>
 8002c5c:	88fb      	ldrh	r3, [r7, #6]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e051      	b.n	8002d0a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_I2C_Slave_Receive_IT+0x38>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e04a      	b.n	8002d0a <HAL_I2C_Slave_Receive_IT+0xce>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d007      	beq.n	8002c9a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0201 	orr.w	r2, r2, #1
 8002c98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2222      	movs	r2, #34	@ 0x22
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4a0f      	ldr	r2, [pc, #60]	@ (8002d18 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8002cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002d02:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e000      	b.n	8002d0a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	ffff0000 	.word	0xffff0000

08002d1c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d3c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d44:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d003      	beq.n	8002d54 <HAL_I2C_EV_IRQHandler+0x38>
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b40      	cmp	r3, #64	@ 0x40
 8002d50:	f040 80c1 	bne.w	8002ed6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10d      	bne.n	8002d8a <HAL_I2C_EV_IRQHandler+0x6e>
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002d74:	d003      	beq.n	8002d7e <HAL_I2C_EV_IRQHandler+0x62>
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_EV_IRQHandler+0x66>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_I2C_EV_IRQHandler+0x68>
 8002d82:	2300      	movs	r3, #0
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f000 8132 	beq.w	8002fee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0x92>
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	0a5b      	lsrs	r3, r3, #9
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d006      	beq.n	8002dae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f001 fc8d 	bl	80046c0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fd91 	bl	80038ce <I2C_Master_SB>
 8002dac:	e092      	b.n	8002ed4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	08db      	lsrs	r3, r3, #3
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0xb2>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	0a5b      	lsrs	r3, r3, #9
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fe07 	bl	80039da <I2C_Master_ADD10>
 8002dcc:	e082      	b.n	8002ed4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	085b      	lsrs	r3, r3, #1
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0xd2>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	0a5b      	lsrs	r3, r3, #9
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fe21 	bl	8003a2e <I2C_Master_ADDR>
 8002dec:	e072      	b.n	8002ed4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03b      	beq.n	8002e72 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e08:	f000 80f3 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	09db      	lsrs	r3, r3, #7
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00f      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	0a9b      	lsrs	r3, r3, #10
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_I2C_EV_IRQHandler+0x11c>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	089b      	lsrs	r3, r3, #2
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f9e9 	bl	8003208 <I2C_MasterTransmit_TXE>
 8002e36:	e04d      	b.n	8002ed4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80d6 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80cf 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002e54:	7bbb      	ldrb	r3, [r7, #14]
 8002e56:	2b21      	cmp	r3, #33	@ 0x21
 8002e58:	d103      	bne.n	8002e62 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa70 	bl	8003340 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e60:	e0c7      	b.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	f040 80c4 	bne.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fade 	bl	800342c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002e70:	e0bf      	b.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e80:	f000 80b7 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00f      	beq.n	8002eb0 <HAL_I2C_EV_IRQHandler+0x194>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	0a9b      	lsrs	r3, r3, #10
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_I2C_EV_IRQHandler+0x194>
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	089b      	lsrs	r3, r3, #2
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fb57 	bl	800355c <I2C_MasterReceive_RXNE>
 8002eae:	e011      	b.n	8002ed4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	089b      	lsrs	r3, r3, #2
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 809a 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	0a5b      	lsrs	r3, r3, #9
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8093 	beq.w	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 fc0d 	bl	80036ec <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ed2:	e08e      	b.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002ed4:	e08d      	b.n	8002ff2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	e007      	b.n	8002ef8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x20e>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	0a5b      	lsrs	r3, r3, #9
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00c      	beq.n	8002f2a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002f20:	69b9      	ldr	r1, [r7, #24]
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 ffd2 	bl	8003ecc <I2C_Slave_ADDR>
 8002f28:	e066      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	091b      	lsrs	r3, r3, #4
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x22e>
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	0a5b      	lsrs	r3, r3, #9
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f001 f80c 	bl	8003f60 <I2C_Slave_STOPF>
 8002f48:	e056      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f4a:	7bbb      	ldrb	r3, [r7, #14]
 8002f4c:	2b21      	cmp	r3, #33	@ 0x21
 8002f4e:	d002      	beq.n	8002f56 <HAL_I2C_EV_IRQHandler+0x23a>
 8002f50:	7bbb      	ldrb	r3, [r7, #14]
 8002f52:	2b29      	cmp	r3, #41	@ 0x29
 8002f54:	d125      	bne.n	8002fa2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	09db      	lsrs	r3, r3, #7
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00f      	beq.n	8002f82 <HAL_I2C_EV_IRQHandler+0x266>
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	0a9b      	lsrs	r3, r3, #10
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_I2C_EV_IRQHandler+0x266>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	089b      	lsrs	r3, r3, #2
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d103      	bne.n	8002f82 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fee8 	bl	8003d50 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002f80:	e039      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d033      	beq.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2da>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	0a5b      	lsrs	r3, r3, #9
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02d      	beq.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 ff15 	bl	8003dca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa0:	e029      	b.n	8002ff6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	099b      	lsrs	r3, r3, #6
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00f      	beq.n	8002fce <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	0a9b      	lsrs	r3, r3, #10
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_I2C_EV_IRQHandler+0x2b2>
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 ff20 	bl	8003e0c <I2C_SlaveReceive_RXNE>
 8002fcc:	e014      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	0a5b      	lsrs	r3, r3, #9
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 ff4e 	bl	8003e88 <I2C_SlaveReceive_BTF>
 8002fec:	e004      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002ff6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b08a      	sub	sp, #40	@ 0x28
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003020:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	0a1b      	lsrs	r3, r3, #8
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <HAL_I2C_ER_IRQHandler+0x4e>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800303a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800304a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800304c:	6a3b      	ldr	r3, [r7, #32]
 800304e:	0a5b      	lsrs	r3, r3, #9
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00e      	beq.n	8003076 <HAL_I2C_ER_IRQHandler+0x78>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	f043 0302 	orr.w	r3, r3, #2
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003074:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003076:	6a3b      	ldr	r3, [r7, #32]
 8003078:	0a9b      	lsrs	r3, r3, #10
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03f      	beq.n	8003102 <HAL_I2C_ER_IRQHandler+0x104>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d039      	beq.n	8003102 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800308e:	7efb      	ldrb	r3, [r7, #27]
 8003090:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80030a8:	7ebb      	ldrb	r3, [r7, #26]
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	d112      	bne.n	80030d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_I2C_ER_IRQHandler+0xd6>
 80030b4:	7cfb      	ldrb	r3, [r7, #19]
 80030b6:	2b21      	cmp	r3, #33	@ 0x21
 80030b8:	d008      	beq.n	80030cc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b29      	cmp	r3, #41	@ 0x29
 80030be:	d005      	beq.n	80030cc <HAL_I2C_ER_IRQHandler+0xce>
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	2b28      	cmp	r3, #40	@ 0x28
 80030c4:	d106      	bne.n	80030d4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b21      	cmp	r3, #33	@ 0x21
 80030ca:	d103      	bne.n	80030d4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f001 f877 	bl	80041c0 <I2C_Slave_AF>
 80030d2:	e016      	b.n	8003102 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030dc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030e6:	7efb      	ldrb	r3, [r7, #27]
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d002      	beq.n	80030f2 <HAL_I2C_ER_IRQHandler+0xf4>
 80030ec:	7efb      	ldrb	r3, [r7, #27]
 80030ee:	2b40      	cmp	r3, #64	@ 0x40
 80030f0:	d107      	bne.n	8003102 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003100:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	0adb      	lsrs	r3, r3, #11
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <HAL_I2C_ER_IRQHandler+0x12e>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	f043 0308 	orr.w	r3, r3, #8
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800312a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800312c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f001 f8b2 	bl	80042a8 <I2C_ITError>
  }
}
 8003144:	bf00      	nop
 8003146:	3728      	adds	r7, #40	@ 0x28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	70fb      	strb	r3, [r7, #3]
 8003194:	4613      	mov	r3, r2
 8003196:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003216:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800321e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322a:	2b00      	cmp	r3, #0
 800322c:	d150      	bne.n	80032d0 <I2C_MasterTransmit_TXE+0xc8>
 800322e:	7bfb      	ldrb	r3, [r7, #15]
 8003230:	2b21      	cmp	r3, #33	@ 0x21
 8003232:	d14d      	bne.n	80032d0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b08      	cmp	r3, #8
 8003238:	d01d      	beq.n	8003276 <I2C_MasterTransmit_TXE+0x6e>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b20      	cmp	r3, #32
 800323e:	d01a      	beq.n	8003276 <I2C_MasterTransmit_TXE+0x6e>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003246:	d016      	beq.n	8003276 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003256:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2211      	movs	r2, #17
 800325c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff ff6c 	bl	800314c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003274:	e060      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003284:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003294:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d107      	bne.n	80032c0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff7d 	bl	80031b8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032be:	e03b      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff3f 	bl	800314c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032ce:	e033      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b21      	cmp	r3, #33	@ 0x21
 80032d4:	d005      	beq.n	80032e2 <I2C_MasterTransmit_TXE+0xda>
 80032d6:	7bbb      	ldrb	r3, [r7, #14]
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d12d      	bne.n	8003338 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80032dc:	7bfb      	ldrb	r3, [r7, #15]
 80032de:	2b22      	cmp	r3, #34	@ 0x22
 80032e0:	d12a      	bne.n	8003338 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d108      	bne.n	80032fe <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032fa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80032fc:	e01c      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b40      	cmp	r3, #64	@ 0x40
 8003308:	d103      	bne.n	8003312 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f88e 	bl	800342c <I2C_MemoryTransmit_TXE_BTF>
}
 8003310:	e012      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003336:	e7ff      	b.n	8003338 <I2C_MasterTransmit_TXE+0x130>
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b21      	cmp	r3, #33	@ 0x21
 8003358:	d164      	bne.n	8003424 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003388:	e04c      	b.n	8003424 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d01d      	beq.n	80033cc <I2C_MasterTransmit_BTF+0x8c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b20      	cmp	r3, #32
 8003394:	d01a      	beq.n	80033cc <I2C_MasterTransmit_BTF+0x8c>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800339c:	d016      	beq.n	80033cc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ac:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2211      	movs	r2, #17
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fec1 	bl	800314c <HAL_I2C_MasterTxCpltCallback>
}
 80033ca:	e02b      	b.n	8003424 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033da:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d107      	bne.n	8003416 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fed2 	bl	80031b8 <HAL_I2C_MemTxCpltCallback>
}
 8003414:	e006      	b.n	8003424 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff fe94 	bl	800314c <HAL_I2C_MasterTxCpltCallback>
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003440:	2b00      	cmp	r3, #0
 8003442:	d11d      	bne.n	8003480 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d10b      	bne.n	8003464 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003462:	e077      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003468:	b29b      	uxth	r3, r3
 800346a:	121b      	asrs	r3, r3, #8
 800346c:	b2da      	uxtb	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800347e:	e069      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10b      	bne.n	80034a0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348c:	b2da      	uxtb	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800349e:	e059      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d152      	bne.n	800354e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b22      	cmp	r3, #34	@ 0x22
 80034ac:	d10d      	bne.n	80034ca <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034bc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80034c8:	e044      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b21      	cmp	r3, #33	@ 0x21
 80034d8:	d112      	bne.n	8003500 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	781a      	ldrb	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80034fe:	e029      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d124      	bne.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800350a:	7bfb      	ldrb	r3, [r7, #15]
 800350c:	2b21      	cmp	r3, #33	@ 0x21
 800350e:	d121      	bne.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685a      	ldr	r2, [r3, #4]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800351e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800352e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe36 	bl	80031b8 <HAL_I2C_MemTxCpltCallback>
}
 800354c:	e002      	b.n	8003554 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff fb5e 	bl	8002c10 <I2C_Flush_DR>
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b22      	cmp	r3, #34	@ 0x22
 800356e:	f040 80b9 	bne.w	80036e4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d921      	bls.n	80035ca <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f040 8096 	bne.w	80036e4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80035c8:	e08c      	b.n	80036e4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d07f      	beq.n	80036d2 <I2C_MasterReceive_RXNE+0x176>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d002      	beq.n	80035de <I2C_MasterReceive_RXNE+0x82>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d179      	bne.n	80036d2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f001 f83c 	bl	800465c <I2C_WaitOnSTOPRequestThroughIT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d14c      	bne.n	8003684 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003608:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b40      	cmp	r3, #64	@ 0x40
 8003642:	d10a      	bne.n	800365a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fdba 	bl	80031cc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003658:	e044      	b.n	80036e4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d002      	beq.n	800366e <I2C_MasterReceive_RXNE+0x112>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d103      	bne.n	8003676 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
 8003674:	e002      	b.n	800367c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2212      	movs	r2, #18
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fd6f 	bl	8003160 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003682:	e02f      	b.n	80036e4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2220      	movs	r2, #32
 80036be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fd88 	bl	80031e0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80036d0:	e008      	b.n	80036e4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036e0:	605a      	str	r2, [r3, #4]
}
 80036e2:	e7ff      	b.n	80036e4 <I2C_MasterReceive_RXNE+0x188>
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003712:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800373a:	e0c4      	b.n	80038c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003740:	b29b      	uxth	r3, r3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d129      	bne.n	800379a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003754:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d00a      	beq.n	8003772 <I2C_MasterReceive_BTF+0x86>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d007      	beq.n	8003772 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003770:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003798:	e095      	b.n	80038c6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d17d      	bne.n	80038a0 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d002      	beq.n	80037b0 <I2C_MasterReceive_BTF+0xc4>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d108      	bne.n	80037c2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e016      	b.n	80037f0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d002      	beq.n	80037ce <I2C_MasterReceive_BTF+0xe2>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d108      	bne.n	80037e0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e007      	b.n	80037f0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ee:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	b2d2      	uxtb	r2, r2
 80037fc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003820:	b2d2      	uxtb	r2, r2
 8003822:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800384a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b40      	cmp	r3, #64	@ 0x40
 800385e:	d10a      	bne.n	8003876 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fcac 	bl	80031cc <HAL_I2C_MemRxCpltCallback>
}
 8003874:	e027      	b.n	80038c6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d002      	beq.n	800388a <I2C_MasterReceive_BTF+0x19e>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b20      	cmp	r3, #32
 8003888:	d103      	bne.n	8003892 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003890:	e002      	b.n	8003898 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2212      	movs	r2, #18
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fc61 	bl	8003160 <HAL_I2C_MasterRxCpltCallback>
}
 800389e:	e012      	b.n	80038c6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b40      	cmp	r3, #64	@ 0x40
 80038e0:	d117      	bne.n	8003912 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80038fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80038fc:	e067      	b.n	80039ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	b2db      	uxtb	r3, r3
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
}
 8003910:	e05d      	b.n	80039ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800391a:	d133      	bne.n	8003984 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b21      	cmp	r3, #33	@ 0x21
 8003926:	d109      	bne.n	800393c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	e008      	b.n	800394e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003940:	b2db      	uxtb	r3, r3
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <I2C_Master_SB+0x92>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395c:	2b00      	cmp	r3, #0
 800395e:	d108      	bne.n	8003972 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003964:	2b00      	cmp	r3, #0
 8003966:	d032      	beq.n	80039ce <I2C_Master_SB+0x100>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d02d      	beq.n	80039ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003980:	605a      	str	r2, [r3, #4]
}
 8003982:	e024      	b.n	80039ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10e      	bne.n	80039aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003990:	b29b      	uxth	r3, r3
 8003992:	11db      	asrs	r3, r3, #7
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0306 	and.w	r3, r3, #6
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f063 030f 	orn	r3, r3, #15
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	611a      	str	r2, [r3, #16]
}
 80039a8:	e011      	b.n	80039ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d10d      	bne.n	80039ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	11db      	asrs	r3, r3, #7
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	f003 0306 	and.w	r3, r3, #6
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	f063 030e 	orn	r3, r3, #14
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d004      	beq.n	8003a00 <I2C_Master_ADD10+0x26>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d108      	bne.n	8003a12 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00c      	beq.n	8003a22 <I2C_Master_ADD10+0x48>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d007      	beq.n	8003a22 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a20:	605a      	str	r2, [r3, #4]
  }
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b091      	sub	sp, #68	@ 0x44
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b22      	cmp	r3, #34	@ 0x22
 8003a56:	f040 8169 	bne.w	8003d2c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <I2C_Master_ADDR+0x54>
 8003a62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003a66:	2b40      	cmp	r3, #64	@ 0x40
 8003a68:	d10b      	bne.n	8003a82 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a80:	e160      	b.n	8003d44 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <I2C_Master_ADDR+0x98>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003a92:	d118      	bne.n	8003ac6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a94:	2300      	movs	r3, #0
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ac4:	e13e      	b.n	8003d44 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d113      	bne.n	8003af8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	e115      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f040 808a 	bne.w	8003c18 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b0a:	d137      	bne.n	8003b7c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b1a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b2a:	d113      	bne.n	8003b54 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b3a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b52:	e0e7      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b54:	2300      	movs	r3, #0
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	623b      	str	r3, [r7, #32]
 8003b68:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	e0d3      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d02e      	beq.n	8003be0 <I2C_Master_ADDR+0x1b2>
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d02b      	beq.n	8003be0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8a:	2b12      	cmp	r3, #18
 8003b8c:	d102      	bne.n	8003b94 <I2C_Master_ADDR+0x166>
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d125      	bne.n	8003be0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00e      	beq.n	8003bb8 <I2C_Master_ADDR+0x18a>
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d00b      	beq.n	8003bb8 <I2C_Master_ADDR+0x18a>
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d008      	beq.n	8003bb8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e007      	b.n	8003bc8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003bc6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	e0a1      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	61bb      	str	r3, [r7, #24]
 8003c04:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	e085      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d14d      	bne.n	8003cbe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d016      	beq.n	8003c56 <I2C_Master_ADDR+0x228>
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d013      	beq.n	8003c56 <I2C_Master_ADDR+0x228>
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	2b10      	cmp	r3, #16
 8003c32:	d010      	beq.n	8003c56 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c42:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	e007      	b.n	8003c66 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c64:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c74:	d117      	bne.n	8003ca6 <I2C_Master_ADDR+0x278>
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c7c:	d00b      	beq.n	8003c96 <I2C_Master_ADDR+0x268>
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d008      	beq.n	8003c96 <I2C_Master_ADDR+0x268>
 8003c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d005      	beq.n	8003c96 <I2C_Master_ADDR+0x268>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8c:	2b10      	cmp	r3, #16
 8003c8e:	d002      	beq.n	8003c96 <I2C_Master_ADDR+0x268>
 8003c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d107      	bne.n	8003ca6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ca4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	e032      	b.n	8003d24 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cdc:	d117      	bne.n	8003d0e <I2C_Master_ADDR+0x2e0>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ce4:	d00b      	beq.n	8003cfe <I2C_Master_ADDR+0x2d0>
 8003ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d008      	beq.n	8003cfe <I2C_Master_ADDR+0x2d0>
 8003cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d005      	beq.n	8003cfe <I2C_Master_ADDR+0x2d0>
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d002      	beq.n	8003cfe <I2C_Master_ADDR+0x2d0>
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d107      	bne.n	8003d0e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	613b      	str	r3, [r7, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003d2a:	e00b      	b.n	8003d44 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
}
 8003d42:	e7ff      	b.n	8003d44 <I2C_Master_ADDR+0x316>
 8003d44:	bf00      	nop
 8003d46:	3744      	adds	r7, #68	@ 0x44
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d5e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d02b      	beq.n	8003dc2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d114      	bne.n	8003dc2 <I2C_SlaveTransmit_TXE+0x72>
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b29      	cmp	r3, #41	@ 0x29
 8003d9c:	d111      	bne.n	8003dc2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2221      	movs	r2, #33	@ 0x21
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2228      	movs	r2, #40	@ 0x28
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f9d9 	bl	8003174 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d011      	beq.n	8003e00 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e1a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d02c      	beq.n	8003e80 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d114      	bne.n	8003e80 <I2C_SlaveReceive_RXNE+0x74>
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
 8003e58:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e5a:	d111      	bne.n	8003e80 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2222      	movs	r2, #34	@ 0x22
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2228      	movs	r2, #40	@ 0x28
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fd f87a 	bl	8000f74 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d012      	beq.n	8003ec0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ee6:	2b28      	cmp	r3, #40	@ 0x28
 8003ee8:	d127      	bne.n	8003f3a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ef8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	089b      	lsrs	r3, r3, #2
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	09db      	lsrs	r3, r3, #7
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d103      	bne.n	8003f1e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	81bb      	strh	r3, [r7, #12]
 8003f1c:	e002      	b.n	8003f24 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003f2c:	89ba      	ldrh	r2, [r7, #12]
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	4619      	mov	r1, r3
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7ff f928 	bl	8003188 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f38:	e00e      	b.n	8003f58 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	60bb      	str	r3, [r7, #8]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003f80:	2300      	movs	r3, #0
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	60bb      	str	r3, [r7, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fbc:	d172      	bne.n	80040a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b22      	cmp	r3, #34	@ 0x22
 8003fc2:	d002      	beq.n	8003fca <I2C_Slave_STOPF+0x6a>
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fc8:	d135      	bne.n	8004036 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	f043 0204 	orr.w	r2, r3, #4
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ffc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004002:	4618      	mov	r0, r3
 8004004:	f7fe fa52 	bl	80024ac <HAL_DMA_GetState>
 8004008:	4603      	mov	r3, r0
 800400a:	2b01      	cmp	r3, #1
 800400c:	d049      	beq.n	80040a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004012:	4a69      	ldr	r2, [pc, #420]	@ (80041b8 <I2C_Slave_STOPF+0x258>)
 8004014:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe f89a 	bl	8002154 <HAL_DMA_Abort_IT>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d03d      	beq.n	80040a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004030:	4610      	mov	r0, r2
 8004032:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004034:	e035      	b.n	80040a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f043 0204 	orr.w	r2, r3, #4
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004068:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe fa1c 	bl	80024ac <HAL_DMA_GetState>
 8004074:	4603      	mov	r3, r0
 8004076:	2b01      	cmp	r3, #1
 8004078:	d014      	beq.n	80040a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407e:	4a4e      	ldr	r2, [pc, #312]	@ (80041b8 <I2C_Slave_STOPF+0x258>)
 8004080:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe f864 	bl	8002154 <HAL_DMA_Abort_IT>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800409c:	4610      	mov	r0, r2
 800409e:	4798      	blx	r3
 80040a0:	e000      	b.n	80040a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03e      	beq.n	800412c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d112      	bne.n	80040e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b40      	cmp	r3, #64	@ 0x40
 80040ee:	d112      	bne.n	8004116 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004124:	f043 0204 	orr.w	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f8b7 	bl	80042a8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800413a:	e039      	b.n	80041b0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800413c:	7bfb      	ldrb	r3, [r7, #15]
 800413e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004140:	d109      	bne.n	8004156 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2228      	movs	r2, #40	@ 0x28
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fc ff0f 	bl	8000f74 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b28      	cmp	r3, #40	@ 0x28
 8004160:	d111      	bne.n	8004186 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <I2C_Slave_STOPF+0x25c>)
 8004166:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff f810 	bl	80031a4 <HAL_I2C_ListenCpltCallback>
}
 8004184:	e014      	b.n	80041b0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	2b22      	cmp	r3, #34	@ 0x22
 800418c:	d002      	beq.n	8004194 <I2C_Slave_STOPF+0x234>
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b22      	cmp	r3, #34	@ 0x22
 8004192:	d10d      	bne.n	80041b0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fc fee2 	bl	8000f74 <HAL_I2C_SlaveRxCpltCallback>
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	0800450d 	.word	0x0800450d
 80041bc:	ffff0000 	.word	0xffff0000

080041c0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ce:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b08      	cmp	r3, #8
 80041da:	d002      	beq.n	80041e2 <I2C_Slave_AF+0x22>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d129      	bne.n	8004236 <I2C_Slave_AF+0x76>
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	2b28      	cmp	r3, #40	@ 0x28
 80041e6:	d126      	bne.n	8004236 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a2e      	ldr	r2, [pc, #184]	@ (80042a4 <I2C_Slave_AF+0xe4>)
 80041ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041fc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004206:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2220      	movs	r2, #32
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fe ffb8 	bl	80031a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004234:	e031      	b.n	800429a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	2b21      	cmp	r3, #33	@ 0x21
 800423a:	d129      	bne.n	8004290 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a19      	ldr	r2, [pc, #100]	@ (80042a4 <I2C_Slave_AF+0xe4>)
 8004240:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2221      	movs	r2, #33	@ 0x21
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004266:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004270:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe fcc4 	bl	8002c10 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fe ff73 	bl	8003174 <HAL_I2C_SlaveTxCpltCallback>
}
 800428e:	e004      	b.n	800429a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004298:	615a      	str	r2, [r3, #20]
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	ffff0000 	.word	0xffff0000

080042a8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042be:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80042c0:	7bbb      	ldrb	r3, [r7, #14]
 80042c2:	2b10      	cmp	r3, #16
 80042c4:	d002      	beq.n	80042cc <I2C_ITError+0x24>
 80042c6:	7bbb      	ldrb	r3, [r7, #14]
 80042c8:	2b40      	cmp	r3, #64	@ 0x40
 80042ca:	d10a      	bne.n	80042e2 <I2C_ITError+0x3a>
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b22      	cmp	r3, #34	@ 0x22
 80042d0:	d107      	bne.n	80042e2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042e0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042e8:	2b28      	cmp	r3, #40	@ 0x28
 80042ea:	d107      	bne.n	80042fc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2228      	movs	r2, #40	@ 0x28
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042fa:	e015      	b.n	8004328 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430a:	d00a      	beq.n	8004322 <I2C_ITError+0x7a>
 800430c:	7bfb      	ldrb	r3, [r7, #15]
 800430e:	2b60      	cmp	r3, #96	@ 0x60
 8004310:	d007      	beq.n	8004322 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d162      	bne.n	80043fe <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685a      	ldr	r2, [r3, #4]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004346:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800434c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d020      	beq.n	8004398 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800435a:	4a6a      	ldr	r2, [pc, #424]	@ (8004504 <I2C_ITError+0x25c>)
 800435c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fef6 	bl	8002154 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8089 	beq.w	8004482 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800438c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004392:	4610      	mov	r0, r2
 8004394:	4798      	blx	r3
 8004396:	e074      	b.n	8004482 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439c:	4a59      	ldr	r2, [pc, #356]	@ (8004504 <I2C_ITError+0x25c>)
 800439e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fd fed5 	bl	8002154 <HAL_DMA_Abort_IT>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d068      	beq.n	8004482 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d10b      	bne.n	80043d6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043f8:	4610      	mov	r0, r2
 80043fa:	4798      	blx	r3
 80043fc:	e041      	b.n	8004482 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b60      	cmp	r3, #96	@ 0x60
 8004408:	d125      	bne.n	8004456 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d10b      	bne.n	800443e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0201 	bic.w	r2, r2, #1
 800444c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fe fed0 	bl	80031f4 <HAL_I2C_AbortCpltCallback>
 8004454:	e015      	b.n	8004482 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004460:	2b40      	cmp	r3, #64	@ 0x40
 8004462:	d10b      	bne.n	800447c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7fe feaf 	bl	80031e0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004486:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10e      	bne.n	80044b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d113      	bne.n	80044fc <I2C_ITError+0x254>
 80044d4:	7bfb      	ldrb	r3, [r7, #15]
 80044d6:	2b28      	cmp	r3, #40	@ 0x28
 80044d8:	d110      	bne.n	80044fc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004508 <I2C_ITError+0x260>)
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe fe54 	bl	80031a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80044fc:	bf00      	nop
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	0800450d 	.word	0x0800450d
 8004508:	ffff0000 	.word	0xffff0000

0800450c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004524:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004526:	4b4b      	ldr	r3, [pc, #300]	@ (8004654 <I2C_DMAAbort+0x148>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	08db      	lsrs	r3, r3, #3
 800452c:	4a4a      	ldr	r2, [pc, #296]	@ (8004658 <I2C_DMAAbort+0x14c>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	0a1a      	lsrs	r2, r3, #8
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00da      	lsls	r2, r3, #3
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f043 0220 	orr.w	r2, r3, #32
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004552:	e00a      	b.n	800456a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3b01      	subs	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004568:	d0ea      	beq.n	8004540 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004576:	2200      	movs	r2, #0
 8004578:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004586:	2200      	movs	r2, #0
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004598:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2200      	movs	r2, #0
 800459e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	2200      	movs	r2, #0
 80045ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045bc:	2200      	movs	r2, #0
 80045be:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b60      	cmp	r3, #96	@ 0x60
 80045da:	d10e      	bne.n	80045fa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2220      	movs	r2, #32
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2200      	movs	r2, #0
 80045f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f7fe fdfe 	bl	80031f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045f8:	e027      	b.n	800464a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045fa:	7cfb      	ldrb	r3, [r7, #19]
 80045fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004600:	2b28      	cmp	r3, #40	@ 0x28
 8004602:	d117      	bne.n	8004634 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004622:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2228      	movs	r2, #40	@ 0x28
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004632:	e007      	b.n	8004644 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004644:	6978      	ldr	r0, [r7, #20]
 8004646:	f7fe fdcb 	bl	80031e0 <HAL_I2C_ErrorCallback>
}
 800464a:	bf00      	nop
 800464c:	3718      	adds	r7, #24
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000004 	.word	0x20000004
 8004658:	14f8b589 	.word	0x14f8b589

0800465c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004668:	4b13      	ldr	r3, [pc, #76]	@ (80046b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	4a13      	ldr	r2, [pc, #76]	@ (80046bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004670:	fba2 2303 	umull	r2, r3, r2, r3
 8004674:	0a1a      	lsrs	r2, r3, #8
 8004676:	4613      	mov	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b01      	subs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d107      	bne.n	800469a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e008      	b.n	80046ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a8:	d0e9      	beq.n	800467e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	20000004 	.word	0x20000004
 80046bc:	14f8b589 	.word	0x14f8b589

080046c0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80046d0:	d103      	bne.n	80046da <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80046d8:	e007      	b.n	80046ea <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80046e2:	d102      	bne.n	80046ea <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2208      	movs	r2, #8
 80046e8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4b20      	ldr	r3, [pc, #128]	@ (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 800470c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	@ 0x40
 8004712:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <HAL_PWREx_EnableOverDrive+0x90>)
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_PWREx_EnableOverDrive+0x94>)
 8004720:	2201      	movs	r2, #1
 8004722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004724:	f7fc ff16 	bl	8001554 <HAL_GetTick>
 8004728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800472a:	e009      	b.n	8004740 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800472c:	f7fc ff12 	bl	8001554 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800473a:	d901      	bls.n	8004740 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e01f      	b.n	8004780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <HAL_PWREx_EnableOverDrive+0x98>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d1ee      	bne.n	800472c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800474e:	4b11      	ldr	r3, [pc, #68]	@ (8004794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004754:	f7fc fefe 	bl	8001554 <HAL_GetTick>
 8004758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800475a:	e009      	b.n	8004770 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800475c:	f7fc fefa 	bl	8001554 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800476a:	d901      	bls.n	8004770 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e007      	b.n	8004780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004770:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <HAL_PWREx_EnableOverDrive+0x98>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004778:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800477c:	d1ee      	bne.n	800475c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40023800 	.word	0x40023800
 800478c:	420e0040 	.word	0x420e0040
 8004790:	40007000 	.word	0x40007000
 8004794:	420e0044 	.word	0x420e0044

08004798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0cc      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b68      	ldr	r3, [pc, #416]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d90c      	bls.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b65      	ldr	r3, [pc, #404]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0b8      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d020      	beq.n	8004822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a58      	ldr	r2, [pc, #352]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004804:	4b53      	ldr	r3, [pc, #332]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a52      	ldr	r2, [pc, #328]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800480e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004810:	4b50      	ldr	r3, [pc, #320]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	494d      	ldr	r1, [pc, #308]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d044      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d107      	bne.n	8004846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b47      	ldr	r3, [pc, #284]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d119      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e07f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d003      	beq.n	8004856 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b3f      	ldr	r3, [pc, #252]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e067      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b37      	ldr	r3, [pc, #220]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4934      	ldr	r1, [pc, #208]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004888:	f7fc fe64 	bl	8001554 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fc fe60 	bl	8001554 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e04f      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b25      	ldr	r3, [pc, #148]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d20c      	bcs.n	80048e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b22      	ldr	r3, [pc, #136]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b20      	ldr	r3, [pc, #128]	@ (8004950 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 030f 	and.w	r3, r3, #15
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d001      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e032      	b.n	8004946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ec:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4916      	ldr	r1, [pc, #88]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	490e      	ldr	r1, [pc, #56]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491e:	f000 f855 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 8004922:	4602      	mov	r2, r0
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	490a      	ldr	r1, [pc, #40]	@ (8004958 <HAL_RCC_ClockConfig+0x1c0>)
 8004930:	5ccb      	ldrb	r3, [r1, r3]
 8004932:	fa22 f303 	lsr.w	r3, r2, r3
 8004936:	4a09      	ldr	r2, [pc, #36]	@ (800495c <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800493a:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_ClockConfig+0x1c8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fdc4 	bl	80014cc <HAL_InitTick>

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	40023c00 	.word	0x40023c00
 8004954:	40023800 	.word	0x40023800
 8004958:	080073a0 	.word	0x080073a0
 800495c:	20000004 	.word	0x20000004
 8004960:	20000008 	.word	0x20000008

08004964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004968:	4b03      	ldr	r3, [pc, #12]	@ (8004978 <HAL_RCC_GetHCLKFreq+0x14>)
 800496a:	681b      	ldr	r3, [r3, #0]
}
 800496c:	4618      	mov	r0, r3
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004980:	f7ff fff0 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 8004984:	4602      	mov	r2, r0
 8004986:	4b05      	ldr	r3, [pc, #20]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	0a9b      	lsrs	r3, r3, #10
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004992:	5ccb      	ldrb	r3, [r1, r3]
 8004994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004998:	4618      	mov	r0, r3
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40023800 	.word	0x40023800
 80049a0:	080073b0 	.word	0x080073b0

080049a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049a8:	f7ff ffdc 	bl	8004964 <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0b5b      	lsrs	r3, r3, #13
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4903      	ldr	r1, [pc, #12]	@ (80049c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40023800 	.word	0x40023800
 80049c8:	080073b0 	.word	0x080073b0

080049cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d0:	b0ae      	sub	sp, #184	@ 0xb8
 80049d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80049e6:	2300      	movs	r3, #0
 80049e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f2:	4bcb      	ldr	r3, [pc, #812]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b0c      	cmp	r3, #12
 80049fc:	f200 8206 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x440>
 8004a00:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a3d 	.word	0x08004a3d
 8004a0c:	08004e0d 	.word	0x08004e0d
 8004a10:	08004e0d 	.word	0x08004e0d
 8004a14:	08004e0d 	.word	0x08004e0d
 8004a18:	08004a45 	.word	0x08004a45
 8004a1c:	08004e0d 	.word	0x08004e0d
 8004a20:	08004e0d 	.word	0x08004e0d
 8004a24:	08004e0d 	.word	0x08004e0d
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004e0d 	.word	0x08004e0d
 8004a30:	08004e0d 	.word	0x08004e0d
 8004a34:	08004e0d 	.word	0x08004e0d
 8004a38:	08004c3d 	.word	0x08004c3d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a3c:	4bb9      	ldr	r3, [pc, #740]	@ (8004d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8004a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a42:	e1e7      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a44:	4bb8      	ldr	r3, [pc, #736]	@ (8004d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004a46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a4a:	e1e3      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a4c:	4bb4      	ldr	r3, [pc, #720]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a58:	4bb1      	ldr	r3, [pc, #708]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d071      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a64:	4bae      	ldr	r3, [pc, #696]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	099b      	lsrs	r3, r3, #6
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a70:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004a74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a80:	2300      	movs	r3, #0
 8004a82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a8a:	4622      	mov	r2, r4
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	1a51      	subs	r1, r2, r1
 8004aa6:	6439      	str	r1, [r7, #64]	@ 0x40
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8004aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	f04f 0300 	mov.w	r3, #0
 8004ab8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004abc:	4649      	mov	r1, r9
 8004abe:	018b      	lsls	r3, r1, #6
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ac6:	4641      	mov	r1, r8
 8004ac8:	018a      	lsls	r2, r1, #6
 8004aca:	4641      	mov	r1, r8
 8004acc:	1a51      	subs	r1, r2, r1
 8004ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	00cb      	lsls	r3, r1, #3
 8004ae8:	4641      	mov	r1, r8
 8004aea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aee:	4641      	mov	r1, r8
 8004af0:	00ca      	lsls	r2, r1, #3
 8004af2:	4610      	mov	r0, r2
 8004af4:	4619      	mov	r1, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	4622      	mov	r2, r4
 8004afa:	189b      	adds	r3, r3, r2
 8004afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004afe:	462b      	mov	r3, r5
 8004b00:	460a      	mov	r2, r1
 8004b02:	eb42 0303 	adc.w	r3, r2, r3
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b14:	4629      	mov	r1, r5
 8004b16:	024b      	lsls	r3, r1, #9
 8004b18:	4621      	mov	r1, r4
 8004b1a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b1e:	4621      	mov	r1, r4
 8004b20:	024a      	lsls	r2, r1, #9
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b34:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b38:	f7fb fbc2 	bl	80002c0 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4613      	mov	r3, r2
 8004b42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b46:	e067      	b.n	8004c18 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b48:	4b75      	ldr	r3, [pc, #468]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	099b      	lsrs	r3, r3, #6
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b54:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b62:	2300      	movs	r3, #0
 8004b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b66:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004b6a:	4622      	mov	r2, r4
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	f04f 0000 	mov.w	r0, #0
 8004b72:	f04f 0100 	mov.w	r1, #0
 8004b76:	0159      	lsls	r1, r3, #5
 8004b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b7c:	0150      	lsls	r0, r2, #5
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	4621      	mov	r1, r4
 8004b84:	1a51      	subs	r1, r2, r1
 8004b86:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004b88:	4629      	mov	r1, r5
 8004b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	018b      	lsls	r3, r1, #6
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	018a      	lsls	r2, r1, #6
 8004baa:	4641      	mov	r1, r8
 8004bac:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bb0:	4649      	mov	r1, r9
 8004bb2:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bc2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bca:	4692      	mov	sl, r2
 8004bcc:	469b      	mov	fp, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb1a 0303 	adds.w	r3, sl, r3
 8004bd4:	623b      	str	r3, [r7, #32]
 8004bd6:	462b      	mov	r3, r5
 8004bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004bea:	4629      	mov	r1, r5
 8004bec:	028b      	lsls	r3, r1, #10
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	028a      	lsls	r2, r1, #10
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c00:	2200      	movs	r2, #0
 8004c02:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c04:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c0a:	f7fb fb59 	bl	80002c0 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4613      	mov	r3, r2
 8004c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c18:	4b41      	ldr	r3, [pc, #260]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	0c1b      	lsrs	r3, r3, #16
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	3301      	adds	r3, #1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004c3a:	e0eb      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c3c:	4b38      	ldr	r3, [pc, #224]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c48:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d06b      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c54:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c68:	2300      	movs	r3, #0
 8004c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c6c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004c70:	4622      	mov	r2, r4
 8004c72:	462b      	mov	r3, r5
 8004c74:	f04f 0000 	mov.w	r0, #0
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	0159      	lsls	r1, r3, #5
 8004c7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c82:	0150      	lsls	r0, r2, #5
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4621      	mov	r1, r4
 8004c8a:	1a51      	subs	r1, r2, r1
 8004c8c:	61b9      	str	r1, [r7, #24]
 8004c8e:	4629      	mov	r1, r5
 8004c90:	eb63 0301 	sbc.w	r3, r3, r1
 8004c94:	61fb      	str	r3, [r7, #28]
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004ca2:	4659      	mov	r1, fp
 8004ca4:	018b      	lsls	r3, r1, #6
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cac:	4651      	mov	r1, sl
 8004cae:	018a      	lsls	r2, r1, #6
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	ebb2 0801 	subs.w	r8, r2, r1
 8004cb6:	4659      	mov	r1, fp
 8004cb8:	eb63 0901 	sbc.w	r9, r3, r1
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cc8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ccc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd0:	4690      	mov	r8, r2
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	eb18 0303 	adds.w	r3, r8, r3
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	462b      	mov	r3, r5
 8004cde:	eb49 0303 	adc.w	r3, r9, r3
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	f04f 0300 	mov.w	r3, #0
 8004cec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	024b      	lsls	r3, r1, #9
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	024a      	lsls	r2, r1, #9
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d06:	2200      	movs	r2, #0
 8004d08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d0a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d0c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d10:	f7fb fad6 	bl	80002c0 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d1e:	e065      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x420>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	00f42400 	.word	0x00f42400
 8004d28:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	2200      	movs	r2, #0
 8004d34:	4618      	mov	r0, r3
 8004d36:	4611      	mov	r1, r2
 8004d38:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3e:	2300      	movs	r3, #0
 8004d40:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d42:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004d46:	4642      	mov	r2, r8
 8004d48:	464b      	mov	r3, r9
 8004d4a:	f04f 0000 	mov.w	r0, #0
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	0159      	lsls	r1, r3, #5
 8004d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d58:	0150      	lsls	r0, r2, #5
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4641      	mov	r1, r8
 8004d60:	1a51      	subs	r1, r2, r1
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	4649      	mov	r1, r9
 8004d66:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	018b      	lsls	r3, r1, #6
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d82:	4651      	mov	r1, sl
 8004d84:	018a      	lsls	r2, r1, #6
 8004d86:	4651      	mov	r1, sl
 8004d88:	1a54      	subs	r4, r2, r1
 8004d8a:	4659      	mov	r1, fp
 8004d8c:	eb63 0501 	sbc.w	r5, r3, r1
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	00eb      	lsls	r3, r5, #3
 8004d9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d9e:	00e2      	lsls	r2, r4, #3
 8004da0:	4614      	mov	r4, r2
 8004da2:	461d      	mov	r5, r3
 8004da4:	4643      	mov	r3, r8
 8004da6:	18e3      	adds	r3, r4, r3
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	464b      	mov	r3, r9
 8004dac:	eb45 0303 	adc.w	r3, r5, r3
 8004db0:	607b      	str	r3, [r7, #4]
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	028b      	lsls	r3, r1, #10
 8004dc2:	4621      	mov	r1, r4
 8004dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dc8:	4621      	mov	r1, r4
 8004dca:	028a      	lsls	r2, r1, #10
 8004dcc:	4610      	mov	r0, r2
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004dda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004dde:	f7fb fa6f 	bl	80002c0 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4613      	mov	r3, r2
 8004de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004dec:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x458>)
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	0f1b      	lsrs	r3, r3, #28
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004dfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004dfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e0a:	e003      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	37b8      	adds	r7, #184	@ 0xb8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e22:	bf00      	nop
 8004e24:	40023800 	.word	0x40023800
 8004e28:	00f42400 	.word	0x00f42400

08004e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e28d      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8083 	beq.w	8004f52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004e4c:	4b94      	ldr	r3, [pc, #592]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d019      	beq.n	8004e8c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e58:	4b91      	ldr	r3, [pc, #580]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 030c 	and.w	r3, r3, #12
        || \
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e64:	4b8e      	ldr	r3, [pc, #568]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e70:	d00c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b8b      	ldr	r3, [pc, #556]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d112      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4b88      	ldr	r3, [pc, #544]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	4b84      	ldr	r3, [pc, #528]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x124>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d157      	bne.n	8004f50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e25a      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x90>
 8004eae:	4b7c      	ldr	r3, [pc, #496]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7b      	ldr	r2, [pc, #492]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xcc>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xb4>
 8004ec6:	4b76      	ldr	r3, [pc, #472]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a75      	ldr	r2, [pc, #468]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b73      	ldr	r3, [pc, #460]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a72      	ldr	r2, [pc, #456]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xcc>
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6e      	ldr	r2, [pc, #440]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b6c      	ldr	r3, [pc, #432]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6b      	ldr	r2, [pc, #428]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fc fb28 	bl	8001554 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fc fb24 	bl	8001554 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	@ 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e21f      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b61      	ldr	r3, [pc, #388]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xdc>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fc fb14 	bl	8001554 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fc fb10 	bl	8001554 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	@ 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e20b      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	4b57      	ldr	r3, [pc, #348]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x104>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d06f      	beq.n	800503e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004f5e:	4b50      	ldr	r3, [pc, #320]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d017      	beq.n	8004f9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d105      	bne.n	8004f82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f76:	4b4a      	ldr	r3, [pc, #296]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f82:	4b47      	ldr	r3, [pc, #284]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004f8a:	2b0c      	cmp	r3, #12
 8004f8c:	d11c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8e:	4b44      	ldr	r3, [pc, #272]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d116      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	4b41      	ldr	r3, [pc, #260]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x186>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e1d3      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4937      	ldr	r1, [pc, #220]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	e03a      	b.n	800503e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd0:	4b34      	ldr	r3, [pc, #208]	@ (80050a4 <HAL_RCC_OscConfig+0x278>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fc fabd 	bl	8001554 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fc fab9 	bl	8001554 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1b4      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffc:	4b28      	ldr	r3, [pc, #160]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4925      	ldr	r1, [pc, #148]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]
 8005010:	e015      	b.n	800503e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005012:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <HAL_RCC_OscConfig+0x278>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fc fa9c 	bl	8001554 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005020:	f7fc fa98 	bl	8001554 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e193      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005032:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d036      	beq.n	80050b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005052:	4b15      	ldr	r3, [pc, #84]	@ (80050a8 <HAL_RCC_OscConfig+0x27c>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fc fa7c 	bl	8001554 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005060:	f7fc fa78 	bl	8001554 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e173      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <HAL_RCC_OscConfig+0x274>)
 8005074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x234>
 800507e:	e01b      	b.n	80050b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_OscConfig+0x27c>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005086:	f7fc fa65 	bl	8001554 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	e00e      	b.n	80050ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508e:	f7fc fa61 	bl	8001554 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d907      	bls.n	80050ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e15c      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	42470000 	.word	0x42470000
 80050a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	4b8a      	ldr	r3, [pc, #552]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ea      	bne.n	800508e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8097 	beq.w	80051f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b83      	ldr	r3, [pc, #524]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	4b7f      	ldr	r3, [pc, #508]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050de:	4a7e      	ldr	r2, [pc, #504]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050e6:	4b7c      	ldr	r3, [pc, #496]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	4b79      	ldr	r3, [pc, #484]	@ (80052dc <HAL_RCC_OscConfig+0x4b0>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d118      	bne.n	8005134 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005102:	4b76      	ldr	r3, [pc, #472]	@ (80052dc <HAL_RCC_OscConfig+0x4b0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a75      	ldr	r2, [pc, #468]	@ (80052dc <HAL_RCC_OscConfig+0x4b0>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800510c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510e:	f7fc fa21 	bl	8001554 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fc fa1d 	bl	8001554 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e118      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	4b6c      	ldr	r3, [pc, #432]	@ (80052dc <HAL_RCC_OscConfig+0x4b0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d106      	bne.n	800514a <HAL_RCC_OscConfig+0x31e>
 800513c:	4b66      	ldr	r3, [pc, #408]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005140:	4a65      	ldr	r2, [pc, #404]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	@ 0x70
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x358>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b05      	cmp	r3, #5
 8005150:	d10c      	bne.n	800516c <HAL_RCC_OscConfig+0x340>
 8005152:	4b61      	ldr	r3, [pc, #388]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005156:	4a60      	ldr	r2, [pc, #384]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	@ 0x70
 800515e:	4b5e      	ldr	r3, [pc, #376]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005162:	4a5d      	ldr	r2, [pc, #372]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6713      	str	r3, [r2, #112]	@ 0x70
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0x358>
 800516c:	4b5a      	ldr	r3, [pc, #360]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a59      	ldr	r2, [pc, #356]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	4b57      	ldr	r3, [pc, #348]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517c:	4a56      	ldr	r2, [pc, #344]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 800517e:	f023 0304 	bic.w	r3, r3, #4
 8005182:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fc f9e2 	bl	8001554 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fc f9de 	bl	8001554 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0d7      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051aa:	4b4b      	ldr	r3, [pc, #300]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ee      	beq.n	8005194 <HAL_RCC_OscConfig+0x368>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fc f9cc 	bl	8001554 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fc f9c8 	bl	8001554 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0c1      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d6:	4b40      	ldr	r3, [pc, #256]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ee      	bne.n	80051c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e8:	4b3b      	ldr	r3, [pc, #236]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	4a3a      	ldr	r2, [pc, #232]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80ad 	beq.w	8005358 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051fe:	4b36      	ldr	r3, [pc, #216]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b08      	cmp	r3, #8
 8005208:	d060      	beq.n	80052cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d145      	bne.n	800529e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b33      	ldr	r3, [pc, #204]	@ (80052e0 <HAL_RCC_OscConfig+0x4b4>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fc f99c 	bl	8001554 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005220:	f7fc f998 	bl	8001554 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e093      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	4b29      	ldr	r3, [pc, #164]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	3b01      	subs	r3, #1
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	071b      	lsls	r3, r3, #28
 800526a:	491b      	ldr	r1, [pc, #108]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005270:	4b1b      	ldr	r3, [pc, #108]	@ (80052e0 <HAL_RCC_OscConfig+0x4b4>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005276:	f7fc f96d 	bl	8001554 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527e:	f7fc f969 	bl	8001554 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e064      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005290:	4b11      	ldr	r3, [pc, #68]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x452>
 800529c:	e05c      	b.n	8005358 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800529e:	4b10      	ldr	r3, [pc, #64]	@ (80052e0 <HAL_RCC_OscConfig+0x4b4>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fc f956 	bl	8001554 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ac:	f7fc f952 	bl	8001554 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e04d      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052be:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <HAL_RCC_OscConfig+0x4ac>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x480>
 80052ca:	e045      	b.n	8005358 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e040      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
 80052d8:	40023800 	.word	0x40023800
 80052dc:	40007000 	.word	0x40007000
 80052e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005364 <HAL_RCC_OscConfig+0x538>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d030      	beq.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d129      	bne.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530a:	429a      	cmp	r2, r3
 800530c:	d122      	bne.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005314:	4013      	ands	r3, r2
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800531a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	4293      	cmp	r3, r2
 800531e:	d119      	bne.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	3b01      	subs	r3, #1
 800532e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005330:	429a      	cmp	r2, r3
 8005332:	d10f      	bne.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	429a      	cmp	r2, r3
 8005342:	d107      	bne.n	8005354 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d001      	beq.n	8005358 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	40023800 	.word	0x40023800

08005368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e041      	b.n	80053fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d106      	bne.n	8005394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7fb ff1a 	bl	80011c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f000 fad8 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b082      	sub	sp, #8
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e041      	b.n	800549c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d106      	bne.n	8005432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f839 	bl	80054a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2202      	movs	r2, #2
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	4619      	mov	r1, r3
 8005444:	4610      	mov	r0, r2
 8005446:	f000 fa89 	bl	800595c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <HAL_TIM_PWM_Start+0x24>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	bf14      	ite	ne
 80054d4:	2301      	movne	r3, #1
 80054d6:	2300      	moveq	r3, #0
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	e022      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d109      	bne.n	80054f6 <HAL_TIM_PWM_Start+0x3e>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e015      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d109      	bne.n	8005510 <HAL_TIM_PWM_Start+0x58>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e008      	b.n	8005522 <HAL_TIM_PWM_Start+0x6a>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b01      	cmp	r3, #1
 800551a:	bf14      	ite	ne
 800551c:	2301      	movne	r3, #1
 800551e:	2300      	moveq	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07c      	b.n	8005624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0x82>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005538:	e013      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0x92>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005548:	e00b      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b08      	cmp	r3, #8
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xa2>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005558:	e003      	b.n	8005562 <HAL_TIM_PWM_Start+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2202      	movs	r2, #2
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	6839      	ldr	r1, [r7, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fce6 	bl	8005f3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <HAL_TIM_PWM_Start+0x174>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_TIM_PWM_Start+0xcc>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	@ (8005630 <HAL_TIM_PWM_Start+0x178>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d101      	bne.n	8005588 <HAL_TIM_PWM_Start+0xd0>
 8005584:	2301      	movs	r3, #1
 8005586:	e000      	b.n	800558a <HAL_TIM_PWM_Start+0xd2>
 8005588:	2300      	movs	r3, #0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800559c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a22      	ldr	r2, [pc, #136]	@ (800562c <HAL_TIM_PWM_Start+0x174>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b0:	d01d      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005634 <HAL_TIM_PWM_Start+0x17c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005638 <HAL_TIM_PWM_Start+0x180>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a1c      	ldr	r2, [pc, #112]	@ (800563c <HAL_TIM_PWM_Start+0x184>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a16      	ldr	r2, [pc, #88]	@ (8005630 <HAL_TIM_PWM_Start+0x178>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a18      	ldr	r2, [pc, #96]	@ (8005640 <HAL_TIM_PWM_Start+0x188>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_TIM_PWM_Start+0x136>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	@ (8005644 <HAL_TIM_PWM_Start+0x18c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d010      	beq.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	e007      	b.n	8005622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40001800 	.word	0x40001800

08005648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e0ae      	b.n	80057c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b0c      	cmp	r3, #12
 8005672:	f200 809f 	bhi.w	80057b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005676:	a201      	add	r2, pc, #4	@ (adr r2, 800567c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	080056b1 	.word	0x080056b1
 8005680:	080057b5 	.word	0x080057b5
 8005684:	080057b5 	.word	0x080057b5
 8005688:	080057b5 	.word	0x080057b5
 800568c:	080056f1 	.word	0x080056f1
 8005690:	080057b5 	.word	0x080057b5
 8005694:	080057b5 	.word	0x080057b5
 8005698:	080057b5 	.word	0x080057b5
 800569c:	08005733 	.word	0x08005733
 80056a0:	080057b5 	.word	0x080057b5
 80056a4:	080057b5 	.word	0x080057b5
 80056a8:	080057b5 	.word	0x080057b5
 80056ac:	08005773 	.word	0x08005773
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f9f6 	bl	8005aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f042 0208 	orr.w	r2, r2, #8
 80056ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0204 	bic.w	r2, r2, #4
 80056da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	619a      	str	r2, [r3, #24]
      break;
 80056ee:	e064      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68b9      	ldr	r1, [r7, #8]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 fa46 	bl	8005b88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800570a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	699a      	ldr	r2, [r3, #24]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6999      	ldr	r1, [r3, #24]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	021a      	lsls	r2, r3, #8
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	619a      	str	r2, [r3, #24]
      break;
 8005730:	e043      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fa9b 	bl	8005c74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0208 	orr.w	r2, r2, #8
 800574c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0204 	bic.w	r2, r2, #4
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691a      	ldr	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	430a      	orrs	r2, r1
 800576e:	61da      	str	r2, [r3, #28]
      break;
 8005770:	e023      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 faef 	bl	8005d5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800578c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69d9      	ldr	r1, [r3, #28]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	021a      	lsls	r2, r3, #8
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	61da      	str	r2, [r3, #28]
      break;
 80057b2:	e002      	b.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	75fb      	strb	r3, [r7, #23]
      break;
 80057b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_ConfigClockSource+0x1c>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e0b4      	b.n	8005952 <HAL_TIM_ConfigClockSource+0x186>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800580e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005820:	d03e      	beq.n	80058a0 <HAL_TIM_ConfigClockSource+0xd4>
 8005822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005826:	f200 8087 	bhi.w	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 800582a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582e:	f000 8086 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x172>
 8005832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005836:	d87f      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d01a      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0xa6>
 800583c:	2b70      	cmp	r3, #112	@ 0x70
 800583e:	d87b      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d050      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x11a>
 8005844:	2b60      	cmp	r3, #96	@ 0x60
 8005846:	d877      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d03c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0xfa>
 800584c:	2b50      	cmp	r3, #80	@ 0x50
 800584e:	d873      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d058      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0x13a>
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d86f      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d064      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x15a>
 800585c:	2b30      	cmp	r3, #48	@ 0x30
 800585e:	d86b      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d060      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x15a>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d867      	bhi.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05c      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x15a>
 800586c:	2b10      	cmp	r3, #16
 800586e:	d05a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x15a>
 8005870:	e062      	b.n	8005938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005882:	f000 fb3b 	bl	8005efc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	609a      	str	r2, [r3, #8]
      break;
 800589e:	e04f      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058b0:	f000 fb24 	bl	8005efc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689a      	ldr	r2, [r3, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058c2:	609a      	str	r2, [r3, #8]
      break;
 80058c4:	e03c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 fa98 	bl	8005e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2150      	movs	r1, #80	@ 0x50
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 faf1 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 80058e4:	e02c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f2:	461a      	mov	r2, r3
 80058f4:	f000 fab7 	bl	8005e66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2160      	movs	r1, #96	@ 0x60
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fae1 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005904:	e01c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005912:	461a      	mov	r2, r3
 8005914:	f000 fa78 	bl	8005e08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2140      	movs	r1, #64	@ 0x40
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fad1 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005924:	e00c      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f000 fac8 	bl	8005ec6 <TIM_ITRx_SetConfig>
      break;
 8005936:	e003      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
      break;
 800593c:	e000      	b.n	8005940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800593e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a43      	ldr	r2, [pc, #268]	@ (8005a7c <TIM_Base_SetConfig+0x120>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d013      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597a:	d00f      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a40      	ldr	r2, [pc, #256]	@ (8005a80 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00b      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a3f      	ldr	r2, [pc, #252]	@ (8005a84 <TIM_Base_SetConfig+0x128>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d007      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a88 <TIM_Base_SetConfig+0x12c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d003      	beq.n	800599c <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a3d      	ldr	r2, [pc, #244]	@ (8005a8c <TIM_Base_SetConfig+0x130>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d108      	bne.n	80059ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a32      	ldr	r2, [pc, #200]	@ (8005a7c <TIM_Base_SetConfig+0x120>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d02b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059bc:	d027      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2f      	ldr	r2, [pc, #188]	@ (8005a80 <TIM_Base_SetConfig+0x124>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d023      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a84 <TIM_Base_SetConfig+0x128>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d01f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005a88 <TIM_Base_SetConfig+0x12c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a2c      	ldr	r2, [pc, #176]	@ (8005a8c <TIM_Base_SetConfig+0x130>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d017      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a90 <TIM_Base_SetConfig+0x134>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005a94 <TIM_Base_SetConfig+0x138>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d00f      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a29      	ldr	r2, [pc, #164]	@ (8005a98 <TIM_Base_SetConfig+0x13c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a28      	ldr	r2, [pc, #160]	@ (8005a9c <TIM_Base_SetConfig+0x140>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a27      	ldr	r2, [pc, #156]	@ (8005aa0 <TIM_Base_SetConfig+0x144>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a26      	ldr	r2, [pc, #152]	@ (8005aa4 <TIM_Base_SetConfig+0x148>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d108      	bne.n	8005a20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0e      	ldr	r2, [pc, #56]	@ (8005a7c <TIM_Base_SetConfig+0x120>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_Base_SetConfig+0xf2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <TIM_Base_SetConfig+0x130>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d103      	bne.n	8005a56 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691a      	ldr	r2, [r3, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f043 0204 	orr.w	r2, r3, #4
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	601a      	str	r2, [r3, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40000400 	.word	0x40000400
 8005a84:	40000800 	.word	0x40000800
 8005a88:	40000c00 	.word	0x40000c00
 8005a8c:	40010400 	.word	0x40010400
 8005a90:	40014000 	.word	0x40014000
 8005a94:	40014400 	.word	0x40014400
 8005a98:	40014800 	.word	0x40014800
 8005a9c:	40001800 	.word	0x40001800
 8005aa0:	40001c00 	.word	0x40001c00
 8005aa4:	40002000 	.word	0x40002000

08005aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f023 0201 	bic.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0303 	bic.w	r3, r3, #3
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a20      	ldr	r2, [pc, #128]	@ (8005b80 <TIM_OC1_SetConfig+0xd8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC1_SetConfig+0x64>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a1f      	ldr	r2, [pc, #124]	@ (8005b84 <TIM_OC1_SetConfig+0xdc>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d10c      	bne.n	8005b26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0308 	bic.w	r3, r3, #8
 8005b12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f023 0304 	bic.w	r3, r3, #4
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a15      	ldr	r2, [pc, #84]	@ (8005b80 <TIM_OC1_SetConfig+0xd8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC1_SetConfig+0x8e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a14      	ldr	r2, [pc, #80]	@ (8005b84 <TIM_OC1_SetConfig+0xdc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d111      	bne.n	8005b5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	bf00      	nop
 8005b76:	371c      	adds	r7, #28
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	40010000 	.word	0x40010000
 8005b84:	40010400 	.word	0x40010400

08005b88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 0210 	bic.w	r2, r3, #16
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	021b      	lsls	r3, r3, #8
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	f023 0320 	bic.w	r3, r3, #32
 8005bd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a22      	ldr	r2, [pc, #136]	@ (8005c6c <TIM_OC2_SetConfig+0xe4>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d003      	beq.n	8005bf0 <TIM_OC2_SetConfig+0x68>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a21      	ldr	r2, [pc, #132]	@ (8005c70 <TIM_OC2_SetConfig+0xe8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10d      	bne.n	8005c0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a17      	ldr	r2, [pc, #92]	@ (8005c6c <TIM_OC2_SetConfig+0xe4>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d003      	beq.n	8005c1c <TIM_OC2_SetConfig+0x94>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a16      	ldr	r2, [pc, #88]	@ (8005c70 <TIM_OC2_SetConfig+0xe8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d113      	bne.n	8005c44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40010400 	.word	0x40010400

08005c74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a21      	ldr	r2, [pc, #132]	@ (8005d54 <TIM_OC3_SetConfig+0xe0>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d003      	beq.n	8005cda <TIM_OC3_SetConfig+0x66>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a20      	ldr	r2, [pc, #128]	@ (8005d58 <TIM_OC3_SetConfig+0xe4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d10d      	bne.n	8005cf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a16      	ldr	r2, [pc, #88]	@ (8005d54 <TIM_OC3_SetConfig+0xe0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d003      	beq.n	8005d06 <TIM_OC3_SetConfig+0x92>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a15      	ldr	r2, [pc, #84]	@ (8005d58 <TIM_OC3_SetConfig+0xe4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d113      	bne.n	8005d2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	621a      	str	r2, [r3, #32]
}
 8005d48:	bf00      	nop
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40010400 	.word	0x40010400

08005d5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	021b      	lsls	r3, r3, #8
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	031b      	lsls	r3, r3, #12
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a12      	ldr	r2, [pc, #72]	@ (8005e00 <TIM_OC4_SetConfig+0xa4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d003      	beq.n	8005dc4 <TIM_OC4_SetConfig+0x68>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a11      	ldr	r2, [pc, #68]	@ (8005e04 <TIM_OC4_SetConfig+0xa8>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d109      	bne.n	8005dd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	019b      	lsls	r3, r3, #6
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40010000 	.word	0x40010000
 8005e04:	40010400 	.word	0x40010400

08005e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f023 0201 	bic.w	r2, r3, #1
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f023 030a 	bic.w	r3, r3, #10
 8005e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	621a      	str	r2, [r3, #32]
}
 8005e5a:	bf00      	nop
 8005e5c:	371c      	adds	r7, #28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6a1b      	ldr	r3, [r3, #32]
 8005e7c:	f023 0210 	bic.w	r2, r3, #16
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	031b      	lsls	r3, r3, #12
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	621a      	str	r2, [r3, #32]
}
 8005eba:	bf00      	nop
 8005ebc:	371c      	adds	r7, #28
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f043 0307 	orr.w	r3, r3, #7
 8005ee8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	609a      	str	r2, [r3, #8]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	021a      	lsls	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	371c      	adds	r7, #28
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 031f 	and.w	r3, r3, #31
 8005f4e:	2201      	movs	r2, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a1a      	ldr	r2, [r3, #32]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	401a      	ands	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6a1a      	ldr	r2, [r3, #32]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	fa01 f303 	lsl.w	r3, r1, r3
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	621a      	str	r2, [r3, #32]
}
 8005f7a:	bf00      	nop
 8005f7c:	371c      	adds	r7, #28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d101      	bne.n	8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	e05a      	b.n	8006056 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a21      	ldr	r2, [pc, #132]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d022      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d01d      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d018      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800606c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d013      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1a      	ldr	r2, [pc, #104]	@ (8006070 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00e      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a18      	ldr	r2, [pc, #96]	@ (8006074 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d009      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a17      	ldr	r2, [pc, #92]	@ (8006078 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d004      	beq.n	800602a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a15      	ldr	r2, [pc, #84]	@ (800607c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10c      	bne.n	8006044 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	4313      	orrs	r3, r2
 800603a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40010400 	.word	0x40010400
 8006078:	40014000 	.word	0x40014000
 800607c:	40001800 	.word	0x40001800

08006080 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e042      	b.n	8006118 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d106      	bne.n	80060ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fb f8e6 	bl	8001278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2224      	movs	r2, #36	@ 0x24
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f973 	bl	80063b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695a      	ldr	r2, [r3, #20]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08a      	sub	sp, #40	@ 0x28
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b20      	cmp	r3, #32
 800613e:	d175      	bne.n	800622c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d002      	beq.n	800614c <HAL_UART_Transmit+0x2c>
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e06e      	b.n	800622e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2221      	movs	r2, #33	@ 0x21
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800615e:	f7fb f9f9 	bl	8001554 <HAL_GetTick>
 8006162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	88fa      	ldrh	r2, [r7, #6]
 8006168:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	88fa      	ldrh	r2, [r7, #6]
 800616e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006178:	d108      	bne.n	800618c <HAL_UART_Transmit+0x6c>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d104      	bne.n	800618c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	61bb      	str	r3, [r7, #24]
 800618a:	e003      	b.n	8006194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006190:	2300      	movs	r3, #0
 8006192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006194:	e02e      	b.n	80061f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	@ 0x80
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f848 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e03a      	b.n	800622e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	3302      	adds	r3, #2
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	e007      	b.n	80061e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	781a      	ldrb	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	3301      	adds	r3, #1
 80061e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1cb      	bne.n	8006196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2200      	movs	r2, #0
 8006206:	2140      	movs	r1, #64	@ 0x40
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f814 	bl	8006236 <UART_WaitOnFlagUntilTimeout>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800622c:	2302      	movs	r3, #2
  }
}
 800622e:	4618      	mov	r0, r3
 8006230:	3720      	adds	r7, #32
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b086      	sub	sp, #24
 800623a:	af00      	add	r7, sp, #0
 800623c:	60f8      	str	r0, [r7, #12]
 800623e:	60b9      	str	r1, [r7, #8]
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006246:	e03b      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800624e:	d037      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006250:	f7fb f980 	bl	8001554 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	6a3a      	ldr	r2, [r7, #32]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <UART_WaitOnFlagUntilTimeout+0x30>
 8006260:	6a3b      	ldr	r3, [r7, #32]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e03a      	b.n	80062e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d023      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b80      	cmp	r3, #128	@ 0x80
 800627c:	d020      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d01d      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b08      	cmp	r3, #8
 8006290:	d116      	bne.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f81d 	bl	80062e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2208      	movs	r2, #8
 80062b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e00f      	b.n	80062e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d0b4      	beq.n	8006248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b095      	sub	sp, #84	@ 0x54
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	330c      	adds	r3, #12
 80062f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	330c      	adds	r3, #12
 800630e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006310:	643a      	str	r2, [r7, #64]	@ 0x40
 8006312:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006316:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800631e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3314      	adds	r3, #20
 800632a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	e853 3f00 	ldrex	r3, [r3]
 8006332:	61fb      	str	r3, [r7, #28]
   return(result);
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	f023 0301 	bic.w	r3, r3, #1
 800633a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006344:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006346:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800634a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e5      	bne.n	8006324 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635c:	2b01      	cmp	r3, #1
 800635e:	d119      	bne.n	8006394 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	330c      	adds	r3, #12
 8006366:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f023 0310 	bic.w	r3, r3, #16
 8006376:	647b      	str	r3, [r7, #68]	@ 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	330c      	adds	r3, #12
 800637e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006380:	61ba      	str	r2, [r7, #24]
 8006382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6979      	ldr	r1, [r7, #20]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	613b      	str	r3, [r7, #16]
   return(result);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80063a2:	bf00      	nop
 80063a4:	3754      	adds	r7, #84	@ 0x54
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063b4:	b0c0      	sub	sp, #256	@ 0x100
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	68d9      	ldr	r1, [r3, #12]
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	ea40 0301 	orr.w	r3, r0, r1
 80063d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f4:	69db      	ldr	r3, [r3, #28]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006408:	f021 010c 	bic.w	r1, r1, #12
 800640c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006416:	430b      	orrs	r3, r1
 8006418:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800641a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642a:	6999      	ldr	r1, [r3, #24]
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	ea40 0301 	orr.w	r3, r0, r1
 8006436:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b8f      	ldr	r3, [pc, #572]	@ (800667c <UART_SetConfig+0x2cc>)
 8006440:	429a      	cmp	r2, r3
 8006442:	d005      	beq.n	8006450 <UART_SetConfig+0xa0>
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006448:	681a      	ldr	r2, [r3, #0]
 800644a:	4b8d      	ldr	r3, [pc, #564]	@ (8006680 <UART_SetConfig+0x2d0>)
 800644c:	429a      	cmp	r2, r3
 800644e:	d104      	bne.n	800645a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006450:	f7fe faa8 	bl	80049a4 <HAL_RCC_GetPCLK2Freq>
 8006454:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006458:	e003      	b.n	8006462 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800645a:	f7fe fa8f 	bl	800497c <HAL_RCC_GetPCLK1Freq>
 800645e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800646c:	f040 810c 	bne.w	8006688 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006474:	2200      	movs	r2, #0
 8006476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800647a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800647e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006482:	4622      	mov	r2, r4
 8006484:	462b      	mov	r3, r5
 8006486:	1891      	adds	r1, r2, r2
 8006488:	65b9      	str	r1, [r7, #88]	@ 0x58
 800648a:	415b      	adcs	r3, r3
 800648c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800648e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006492:	4621      	mov	r1, r4
 8006494:	eb12 0801 	adds.w	r8, r2, r1
 8006498:	4629      	mov	r1, r5
 800649a:	eb43 0901 	adc.w	r9, r3, r1
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064b2:	4690      	mov	r8, r2
 80064b4:	4699      	mov	r9, r3
 80064b6:	4623      	mov	r3, r4
 80064b8:	eb18 0303 	adds.w	r3, r8, r3
 80064bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064c0:	462b      	mov	r3, r5
 80064c2:	eb49 0303 	adc.w	r3, r9, r3
 80064c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80064d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80064da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80064de:	460b      	mov	r3, r1
 80064e0:	18db      	adds	r3, r3, r3
 80064e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80064e4:	4613      	mov	r3, r2
 80064e6:	eb42 0303 	adc.w	r3, r2, r3
 80064ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80064ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80064f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80064f4:	f7f9 fee4 	bl	80002c0 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4b61      	ldr	r3, [pc, #388]	@ (8006684 <UART_SetConfig+0x2d4>)
 80064fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	011c      	lsls	r4, r3, #4
 8006506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800650a:	2200      	movs	r2, #0
 800650c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006510:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006514:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006518:	4642      	mov	r2, r8
 800651a:	464b      	mov	r3, r9
 800651c:	1891      	adds	r1, r2, r2
 800651e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006520:	415b      	adcs	r3, r3
 8006522:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006524:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006528:	4641      	mov	r1, r8
 800652a:	eb12 0a01 	adds.w	sl, r2, r1
 800652e:	4649      	mov	r1, r9
 8006530:	eb43 0b01 	adc.w	fp, r3, r1
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006540:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006548:	4692      	mov	sl, r2
 800654a:	469b      	mov	fp, r3
 800654c:	4643      	mov	r3, r8
 800654e:	eb1a 0303 	adds.w	r3, sl, r3
 8006552:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006556:	464b      	mov	r3, r9
 8006558:	eb4b 0303 	adc.w	r3, fp, r3
 800655c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800656c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006570:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006574:	460b      	mov	r3, r1
 8006576:	18db      	adds	r3, r3, r3
 8006578:	643b      	str	r3, [r7, #64]	@ 0x40
 800657a:	4613      	mov	r3, r2
 800657c:	eb42 0303 	adc.w	r3, r2, r3
 8006580:	647b      	str	r3, [r7, #68]	@ 0x44
 8006582:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006586:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800658a:	f7f9 fe99 	bl	80002c0 <__aeabi_uldivmod>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	4611      	mov	r1, r2
 8006594:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <UART_SetConfig+0x2d4>)
 8006596:	fba3 2301 	umull	r2, r3, r3, r1
 800659a:	095b      	lsrs	r3, r3, #5
 800659c:	2264      	movs	r2, #100	@ 0x64
 800659e:	fb02 f303 	mul.w	r3, r2, r3
 80065a2:	1acb      	subs	r3, r1, r3
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065aa:	4b36      	ldr	r3, [pc, #216]	@ (8006684 <UART_SetConfig+0x2d4>)
 80065ac:	fba3 2302 	umull	r2, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065b8:	441c      	add	r4, r3
 80065ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065cc:	4642      	mov	r2, r8
 80065ce:	464b      	mov	r3, r9
 80065d0:	1891      	adds	r1, r2, r2
 80065d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80065d4:	415b      	adcs	r3, r3
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80065dc:	4641      	mov	r1, r8
 80065de:	1851      	adds	r1, r2, r1
 80065e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80065e2:	4649      	mov	r1, r9
 80065e4:	414b      	adcs	r3, r1
 80065e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80065f4:	4659      	mov	r1, fp
 80065f6:	00cb      	lsls	r3, r1, #3
 80065f8:	4651      	mov	r1, sl
 80065fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fe:	4651      	mov	r1, sl
 8006600:	00ca      	lsls	r2, r1, #3
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	4603      	mov	r3, r0
 8006608:	4642      	mov	r2, r8
 800660a:	189b      	adds	r3, r3, r2
 800660c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006610:	464b      	mov	r3, r9
 8006612:	460a      	mov	r2, r1
 8006614:	eb42 0303 	adc.w	r3, r2, r3
 8006618:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006628:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800662c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006630:	460b      	mov	r3, r1
 8006632:	18db      	adds	r3, r3, r3
 8006634:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006636:	4613      	mov	r3, r2
 8006638:	eb42 0303 	adc.w	r3, r2, r3
 800663c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006642:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006646:	f7f9 fe3b 	bl	80002c0 <__aeabi_uldivmod>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <UART_SetConfig+0x2d4>)
 8006650:	fba3 1302 	umull	r1, r3, r3, r2
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	2164      	movs	r1, #100	@ 0x64
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	3332      	adds	r3, #50	@ 0x32
 8006662:	4a08      	ldr	r2, [pc, #32]	@ (8006684 <UART_SetConfig+0x2d4>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	095b      	lsrs	r3, r3, #5
 800666a:	f003 0207 	and.w	r2, r3, #7
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4422      	add	r2, r4
 8006676:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006678:	e106      	b.n	8006888 <UART_SetConfig+0x4d8>
 800667a:	bf00      	nop
 800667c:	40011000 	.word	0x40011000
 8006680:	40011400 	.word	0x40011400
 8006684:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800668c:	2200      	movs	r2, #0
 800668e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006696:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	1891      	adds	r1, r2, r2
 80066a0:	6239      	str	r1, [r7, #32]
 80066a2:	415b      	adcs	r3, r3
 80066a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066aa:	4641      	mov	r1, r8
 80066ac:	1854      	adds	r4, r2, r1
 80066ae:	4649      	mov	r1, r9
 80066b0:	eb43 0501 	adc.w	r5, r3, r1
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	00eb      	lsls	r3, r5, #3
 80066be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066c2:	00e2      	lsls	r2, r4, #3
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	4643      	mov	r3, r8
 80066ca:	18e3      	adds	r3, r4, r3
 80066cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066d0:	464b      	mov	r3, r9
 80066d2:	eb45 0303 	adc.w	r3, r5, r3
 80066d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80066e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80066f6:	4629      	mov	r1, r5
 80066f8:	008b      	lsls	r3, r1, #2
 80066fa:	4621      	mov	r1, r4
 80066fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006700:	4621      	mov	r1, r4
 8006702:	008a      	lsls	r2, r1, #2
 8006704:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006708:	f7f9 fdda 	bl	80002c0 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4b60      	ldr	r3, [pc, #384]	@ (8006894 <UART_SetConfig+0x4e4>)
 8006712:	fba3 2302 	umull	r2, r3, r3, r2
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	011c      	lsls	r4, r3, #4
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006724:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006728:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800672c:	4642      	mov	r2, r8
 800672e:	464b      	mov	r3, r9
 8006730:	1891      	adds	r1, r2, r2
 8006732:	61b9      	str	r1, [r7, #24]
 8006734:	415b      	adcs	r3, r3
 8006736:	61fb      	str	r3, [r7, #28]
 8006738:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800673c:	4641      	mov	r1, r8
 800673e:	1851      	adds	r1, r2, r1
 8006740:	6139      	str	r1, [r7, #16]
 8006742:	4649      	mov	r1, r9
 8006744:	414b      	adcs	r3, r1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006754:	4659      	mov	r1, fp
 8006756:	00cb      	lsls	r3, r1, #3
 8006758:	4651      	mov	r1, sl
 800675a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800675e:	4651      	mov	r1, sl
 8006760:	00ca      	lsls	r2, r1, #3
 8006762:	4610      	mov	r0, r2
 8006764:	4619      	mov	r1, r3
 8006766:	4603      	mov	r3, r0
 8006768:	4642      	mov	r2, r8
 800676a:	189b      	adds	r3, r3, r2
 800676c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006770:	464b      	mov	r3, r9
 8006772:	460a      	mov	r2, r1
 8006774:	eb42 0303 	adc.w	r3, r2, r3
 8006778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006786:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006794:	4649      	mov	r1, r9
 8006796:	008b      	lsls	r3, r1, #2
 8006798:	4641      	mov	r1, r8
 800679a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800679e:	4641      	mov	r1, r8
 80067a0:	008a      	lsls	r2, r1, #2
 80067a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067a6:	f7f9 fd8b 	bl	80002c0 <__aeabi_uldivmod>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4611      	mov	r1, r2
 80067b0:	4b38      	ldr	r3, [pc, #224]	@ (8006894 <UART_SetConfig+0x4e4>)
 80067b2:	fba3 2301 	umull	r2, r3, r3, r1
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	2264      	movs	r2, #100	@ 0x64
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	1acb      	subs	r3, r1, r3
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	3332      	adds	r3, #50	@ 0x32
 80067c4:	4a33      	ldr	r2, [pc, #204]	@ (8006894 <UART_SetConfig+0x4e4>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80067d0:	441c      	add	r4, r3
 80067d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d6:	2200      	movs	r2, #0
 80067d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80067da:	677a      	str	r2, [r7, #116]	@ 0x74
 80067dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	415b      	adcs	r3, r3
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067f0:	4641      	mov	r1, r8
 80067f2:	1851      	adds	r1, r2, r1
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	4649      	mov	r1, r9
 80067f8:	414b      	adcs	r3, r1
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006808:	4659      	mov	r1, fp
 800680a:	00cb      	lsls	r3, r1, #3
 800680c:	4651      	mov	r1, sl
 800680e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006812:	4651      	mov	r1, sl
 8006814:	00ca      	lsls	r2, r1, #3
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	4603      	mov	r3, r0
 800681c:	4642      	mov	r2, r8
 800681e:	189b      	adds	r3, r3, r2
 8006820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006822:	464b      	mov	r3, r9
 8006824:	460a      	mov	r2, r1
 8006826:	eb42 0303 	adc.w	r3, r2, r3
 800682a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	663b      	str	r3, [r7, #96]	@ 0x60
 8006836:	667a      	str	r2, [r7, #100]	@ 0x64
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	f04f 0300 	mov.w	r3, #0
 8006840:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006844:	4649      	mov	r1, r9
 8006846:	008b      	lsls	r3, r1, #2
 8006848:	4641      	mov	r1, r8
 800684a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800684e:	4641      	mov	r1, r8
 8006850:	008a      	lsls	r2, r1, #2
 8006852:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006856:	f7f9 fd33 	bl	80002c0 <__aeabi_uldivmod>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <UART_SetConfig+0x4e4>)
 8006860:	fba3 1302 	umull	r1, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	2164      	movs	r1, #100	@ 0x64
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	3332      	adds	r3, #50	@ 0x32
 8006872:	4a08      	ldr	r2, [pc, #32]	@ (8006894 <UART_SetConfig+0x4e4>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	f003 020f 	and.w	r2, r3, #15
 800687e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4422      	add	r2, r4
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800688e:	46bd      	mov	sp, r7
 8006890:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006894:	51eb851f 	.word	0x51eb851f

08006898 <siprintf>:
 8006898:	b40e      	push	{r1, r2, r3}
 800689a:	b510      	push	{r4, lr}
 800689c:	b09d      	sub	sp, #116	@ 0x74
 800689e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068a0:	9002      	str	r0, [sp, #8]
 80068a2:	9006      	str	r0, [sp, #24]
 80068a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068a8:	480a      	ldr	r0, [pc, #40]	@ (80068d4 <siprintf+0x3c>)
 80068aa:	9107      	str	r1, [sp, #28]
 80068ac:	9104      	str	r1, [sp, #16]
 80068ae:	490a      	ldr	r1, [pc, #40]	@ (80068d8 <siprintf+0x40>)
 80068b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	2400      	movs	r4, #0
 80068b8:	a902      	add	r1, sp, #8
 80068ba:	6800      	ldr	r0, [r0, #0]
 80068bc:	9301      	str	r3, [sp, #4]
 80068be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80068c0:	f000 f994 	bl	8006bec <_svfiprintf_r>
 80068c4:	9b02      	ldr	r3, [sp, #8]
 80068c6:	701c      	strb	r4, [r3, #0]
 80068c8:	b01d      	add	sp, #116	@ 0x74
 80068ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ce:	b003      	add	sp, #12
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	20000010 	.word	0x20000010
 80068d8:	ffff0208 	.word	0xffff0208

080068dc <memset>:
 80068dc:	4402      	add	r2, r0
 80068de:	4603      	mov	r3, r0
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d100      	bne.n	80068e6 <memset+0xa>
 80068e4:	4770      	bx	lr
 80068e6:	f803 1b01 	strb.w	r1, [r3], #1
 80068ea:	e7f9      	b.n	80068e0 <memset+0x4>

080068ec <__errno>:
 80068ec:	4b01      	ldr	r3, [pc, #4]	@ (80068f4 <__errno+0x8>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000010 	.word	0x20000010

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4d0d      	ldr	r5, [pc, #52]	@ (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006934 <__libc_init_array+0x3c>)
 80068fe:	1b64      	subs	r4, r4, r5
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2600      	movs	r6, #0
 8006904:	42a6      	cmp	r6, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4d0b      	ldr	r5, [pc, #44]	@ (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	@ (800693c <__libc_init_array+0x44>)
 800690c:	f000 fc64 	bl	80071d8 <_init>
 8006910:	1b64      	subs	r4, r4, r5
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2600      	movs	r6, #0
 8006916:	42a6      	cmp	r6, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006920:	4798      	blx	r3
 8006922:	3601      	adds	r6, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f855 3b04 	ldr.w	r3, [r5], #4
 800692a:	4798      	blx	r3
 800692c:	3601      	adds	r6, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	080073fc 	.word	0x080073fc
 8006934:	080073fc 	.word	0x080073fc
 8006938:	080073fc 	.word	0x080073fc
 800693c:	08007400 	.word	0x08007400

08006940 <__retarget_lock_acquire_recursive>:
 8006940:	4770      	bx	lr

08006942 <__retarget_lock_release_recursive>:
 8006942:	4770      	bx	lr

08006944 <_free_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	2900      	cmp	r1, #0
 800694a:	d041      	beq.n	80069d0 <_free_r+0x8c>
 800694c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006950:	1f0c      	subs	r4, r1, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfb8      	it	lt
 8006956:	18e4      	addlt	r4, r4, r3
 8006958:	f000 f8e0 	bl	8006b1c <__malloc_lock>
 800695c:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <_free_r+0x90>)
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	b933      	cbnz	r3, 8006970 <_free_r+0x2c>
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	6014      	str	r4, [r2, #0]
 8006966:	4628      	mov	r0, r5
 8006968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696c:	f000 b8dc 	b.w	8006b28 <__malloc_unlock>
 8006970:	42a3      	cmp	r3, r4
 8006972:	d908      	bls.n	8006986 <_free_r+0x42>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	1821      	adds	r1, r4, r0
 8006978:	428b      	cmp	r3, r1
 800697a:	bf01      	itttt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	1809      	addeq	r1, r1, r0
 8006982:	6021      	streq	r1, [r4, #0]
 8006984:	e7ed      	b.n	8006962 <_free_r+0x1e>
 8006986:	461a      	mov	r2, r3
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b10b      	cbz	r3, 8006990 <_free_r+0x4c>
 800698c:	42a3      	cmp	r3, r4
 800698e:	d9fa      	bls.n	8006986 <_free_r+0x42>
 8006990:	6811      	ldr	r1, [r2, #0]
 8006992:	1850      	adds	r0, r2, r1
 8006994:	42a0      	cmp	r0, r4
 8006996:	d10b      	bne.n	80069b0 <_free_r+0x6c>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4401      	add	r1, r0
 800699c:	1850      	adds	r0, r2, r1
 800699e:	4283      	cmp	r3, r0
 80069a0:	6011      	str	r1, [r2, #0]
 80069a2:	d1e0      	bne.n	8006966 <_free_r+0x22>
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	6053      	str	r3, [r2, #4]
 80069aa:	4408      	add	r0, r1
 80069ac:	6010      	str	r0, [r2, #0]
 80069ae:	e7da      	b.n	8006966 <_free_r+0x22>
 80069b0:	d902      	bls.n	80069b8 <_free_r+0x74>
 80069b2:	230c      	movs	r3, #12
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	e7d6      	b.n	8006966 <_free_r+0x22>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	1821      	adds	r1, r4, r0
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf04      	itt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	6063      	str	r3, [r4, #4]
 80069c6:	bf04      	itt	eq
 80069c8:	1809      	addeq	r1, r1, r0
 80069ca:	6021      	streq	r1, [r4, #0]
 80069cc:	6054      	str	r4, [r2, #4]
 80069ce:	e7ca      	b.n	8006966 <_free_r+0x22>
 80069d0:	bd38      	pop	{r3, r4, r5, pc}
 80069d2:	bf00      	nop
 80069d4:	200003c0 	.word	0x200003c0

080069d8 <sbrk_aligned>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	4e0f      	ldr	r6, [pc, #60]	@ (8006a18 <sbrk_aligned+0x40>)
 80069dc:	460c      	mov	r4, r1
 80069de:	6831      	ldr	r1, [r6, #0]
 80069e0:	4605      	mov	r5, r0
 80069e2:	b911      	cbnz	r1, 80069ea <sbrk_aligned+0x12>
 80069e4:	f000 fba4 	bl	8007130 <_sbrk_r>
 80069e8:	6030      	str	r0, [r6, #0]
 80069ea:	4621      	mov	r1, r4
 80069ec:	4628      	mov	r0, r5
 80069ee:	f000 fb9f 	bl	8007130 <_sbrk_r>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d103      	bne.n	80069fe <sbrk_aligned+0x26>
 80069f6:	f04f 34ff 	mov.w	r4, #4294967295
 80069fa:	4620      	mov	r0, r4
 80069fc:	bd70      	pop	{r4, r5, r6, pc}
 80069fe:	1cc4      	adds	r4, r0, #3
 8006a00:	f024 0403 	bic.w	r4, r4, #3
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d0f8      	beq.n	80069fa <sbrk_aligned+0x22>
 8006a08:	1a21      	subs	r1, r4, r0
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fb90 	bl	8007130 <_sbrk_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d1f2      	bne.n	80069fa <sbrk_aligned+0x22>
 8006a14:	e7ef      	b.n	80069f6 <sbrk_aligned+0x1e>
 8006a16:	bf00      	nop
 8006a18:	200003bc 	.word	0x200003bc

08006a1c <_malloc_r>:
 8006a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a20:	1ccd      	adds	r5, r1, #3
 8006a22:	f025 0503 	bic.w	r5, r5, #3
 8006a26:	3508      	adds	r5, #8
 8006a28:	2d0c      	cmp	r5, #12
 8006a2a:	bf38      	it	cc
 8006a2c:	250c      	movcc	r5, #12
 8006a2e:	2d00      	cmp	r5, #0
 8006a30:	4606      	mov	r6, r0
 8006a32:	db01      	blt.n	8006a38 <_malloc_r+0x1c>
 8006a34:	42a9      	cmp	r1, r5
 8006a36:	d904      	bls.n	8006a42 <_malloc_r+0x26>
 8006a38:	230c      	movs	r3, #12
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b18 <_malloc_r+0xfc>
 8006a46:	f000 f869 	bl	8006b1c <__malloc_lock>
 8006a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a4e:	461c      	mov	r4, r3
 8006a50:	bb44      	cbnz	r4, 8006aa4 <_malloc_r+0x88>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4630      	mov	r0, r6
 8006a56:	f7ff ffbf 	bl	80069d8 <sbrk_aligned>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	d158      	bne.n	8006b12 <_malloc_r+0xf6>
 8006a60:	f8d8 4000 	ldr.w	r4, [r8]
 8006a64:	4627      	mov	r7, r4
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	d143      	bne.n	8006af2 <_malloc_r+0xd6>
 8006a6a:	2c00      	cmp	r4, #0
 8006a6c:	d04b      	beq.n	8006b06 <_malloc_r+0xea>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	4639      	mov	r1, r7
 8006a72:	4630      	mov	r0, r6
 8006a74:	eb04 0903 	add.w	r9, r4, r3
 8006a78:	f000 fb5a 	bl	8007130 <_sbrk_r>
 8006a7c:	4581      	cmp	r9, r0
 8006a7e:	d142      	bne.n	8006b06 <_malloc_r+0xea>
 8006a80:	6821      	ldr	r1, [r4, #0]
 8006a82:	1a6d      	subs	r5, r5, r1
 8006a84:	4629      	mov	r1, r5
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7ff ffa6 	bl	80069d8 <sbrk_aligned>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d03a      	beq.n	8006b06 <_malloc_r+0xea>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	442b      	add	r3, r5
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	bb62      	cbnz	r2, 8006af8 <_malloc_r+0xdc>
 8006a9e:	f8c8 7000 	str.w	r7, [r8]
 8006aa2:	e00f      	b.n	8006ac4 <_malloc_r+0xa8>
 8006aa4:	6822      	ldr	r2, [r4, #0]
 8006aa6:	1b52      	subs	r2, r2, r5
 8006aa8:	d420      	bmi.n	8006aec <_malloc_r+0xd0>
 8006aaa:	2a0b      	cmp	r2, #11
 8006aac:	d917      	bls.n	8006ade <_malloc_r+0xc2>
 8006aae:	1961      	adds	r1, r4, r5
 8006ab0:	42a3      	cmp	r3, r4
 8006ab2:	6025      	str	r5, [r4, #0]
 8006ab4:	bf18      	it	ne
 8006ab6:	6059      	strne	r1, [r3, #4]
 8006ab8:	6863      	ldr	r3, [r4, #4]
 8006aba:	bf08      	it	eq
 8006abc:	f8c8 1000 	streq.w	r1, [r8]
 8006ac0:	5162      	str	r2, [r4, r5]
 8006ac2:	604b      	str	r3, [r1, #4]
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f000 f82f 	bl	8006b28 <__malloc_unlock>
 8006aca:	f104 000b 	add.w	r0, r4, #11
 8006ace:	1d23      	adds	r3, r4, #4
 8006ad0:	f020 0007 	bic.w	r0, r0, #7
 8006ad4:	1ac2      	subs	r2, r0, r3
 8006ad6:	bf1c      	itt	ne
 8006ad8:	1a1b      	subne	r3, r3, r0
 8006ada:	50a3      	strne	r3, [r4, r2]
 8006adc:	e7af      	b.n	8006a3e <_malloc_r+0x22>
 8006ade:	6862      	ldr	r2, [r4, #4]
 8006ae0:	42a3      	cmp	r3, r4
 8006ae2:	bf0c      	ite	eq
 8006ae4:	f8c8 2000 	streq.w	r2, [r8]
 8006ae8:	605a      	strne	r2, [r3, #4]
 8006aea:	e7eb      	b.n	8006ac4 <_malloc_r+0xa8>
 8006aec:	4623      	mov	r3, r4
 8006aee:	6864      	ldr	r4, [r4, #4]
 8006af0:	e7ae      	b.n	8006a50 <_malloc_r+0x34>
 8006af2:	463c      	mov	r4, r7
 8006af4:	687f      	ldr	r7, [r7, #4]
 8006af6:	e7b6      	b.n	8006a66 <_malloc_r+0x4a>
 8006af8:	461a      	mov	r2, r3
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	42a3      	cmp	r3, r4
 8006afe:	d1fb      	bne.n	8006af8 <_malloc_r+0xdc>
 8006b00:	2300      	movs	r3, #0
 8006b02:	6053      	str	r3, [r2, #4]
 8006b04:	e7de      	b.n	8006ac4 <_malloc_r+0xa8>
 8006b06:	230c      	movs	r3, #12
 8006b08:	6033      	str	r3, [r6, #0]
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f000 f80c 	bl	8006b28 <__malloc_unlock>
 8006b10:	e794      	b.n	8006a3c <_malloc_r+0x20>
 8006b12:	6005      	str	r5, [r0, #0]
 8006b14:	e7d6      	b.n	8006ac4 <_malloc_r+0xa8>
 8006b16:	bf00      	nop
 8006b18:	200003c0 	.word	0x200003c0

08006b1c <__malloc_lock>:
 8006b1c:	4801      	ldr	r0, [pc, #4]	@ (8006b24 <__malloc_lock+0x8>)
 8006b1e:	f7ff bf0f 	b.w	8006940 <__retarget_lock_acquire_recursive>
 8006b22:	bf00      	nop
 8006b24:	200003b8 	.word	0x200003b8

08006b28 <__malloc_unlock>:
 8006b28:	4801      	ldr	r0, [pc, #4]	@ (8006b30 <__malloc_unlock+0x8>)
 8006b2a:	f7ff bf0a 	b.w	8006942 <__retarget_lock_release_recursive>
 8006b2e:	bf00      	nop
 8006b30:	200003b8 	.word	0x200003b8

08006b34 <__ssputs_r>:
 8006b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	688e      	ldr	r6, [r1, #8]
 8006b3a:	461f      	mov	r7, r3
 8006b3c:	42be      	cmp	r6, r7
 8006b3e:	680b      	ldr	r3, [r1, #0]
 8006b40:	4682      	mov	sl, r0
 8006b42:	460c      	mov	r4, r1
 8006b44:	4690      	mov	r8, r2
 8006b46:	d82d      	bhi.n	8006ba4 <__ssputs_r+0x70>
 8006b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b50:	d026      	beq.n	8006ba0 <__ssputs_r+0x6c>
 8006b52:	6965      	ldr	r5, [r4, #20]
 8006b54:	6909      	ldr	r1, [r1, #16]
 8006b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b5a:	eba3 0901 	sub.w	r9, r3, r1
 8006b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b62:	1c7b      	adds	r3, r7, #1
 8006b64:	444b      	add	r3, r9
 8006b66:	106d      	asrs	r5, r5, #1
 8006b68:	429d      	cmp	r5, r3
 8006b6a:	bf38      	it	cc
 8006b6c:	461d      	movcc	r5, r3
 8006b6e:	0553      	lsls	r3, r2, #21
 8006b70:	d527      	bpl.n	8006bc2 <__ssputs_r+0x8e>
 8006b72:	4629      	mov	r1, r5
 8006b74:	f7ff ff52 	bl	8006a1c <_malloc_r>
 8006b78:	4606      	mov	r6, r0
 8006b7a:	b360      	cbz	r0, 8006bd6 <__ssputs_r+0xa2>
 8006b7c:	6921      	ldr	r1, [r4, #16]
 8006b7e:	464a      	mov	r2, r9
 8006b80:	f000 fae6 	bl	8007150 <memcpy>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	6126      	str	r6, [r4, #16]
 8006b92:	6165      	str	r5, [r4, #20]
 8006b94:	444e      	add	r6, r9
 8006b96:	eba5 0509 	sub.w	r5, r5, r9
 8006b9a:	6026      	str	r6, [r4, #0]
 8006b9c:	60a5      	str	r5, [r4, #8]
 8006b9e:	463e      	mov	r6, r7
 8006ba0:	42be      	cmp	r6, r7
 8006ba2:	d900      	bls.n	8006ba6 <__ssputs_r+0x72>
 8006ba4:	463e      	mov	r6, r7
 8006ba6:	6820      	ldr	r0, [r4, #0]
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4641      	mov	r1, r8
 8006bac:	f000 faa6 	bl	80070fc <memmove>
 8006bb0:	68a3      	ldr	r3, [r4, #8]
 8006bb2:	1b9b      	subs	r3, r3, r6
 8006bb4:	60a3      	str	r3, [r4, #8]
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	4433      	add	r3, r6
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	f000 fad2 	bl	800716c <_realloc_r>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1e0      	bne.n	8006b90 <__ssputs_r+0x5c>
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f7ff feb7 	bl	8006944 <_free_r>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	f8ca 3000 	str.w	r3, [sl]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be2:	81a3      	strh	r3, [r4, #12]
 8006be4:	f04f 30ff 	mov.w	r0, #4294967295
 8006be8:	e7e9      	b.n	8006bbe <__ssputs_r+0x8a>
	...

08006bec <_svfiprintf_r>:
 8006bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf0:	4698      	mov	r8, r3
 8006bf2:	898b      	ldrh	r3, [r1, #12]
 8006bf4:	061b      	lsls	r3, r3, #24
 8006bf6:	b09d      	sub	sp, #116	@ 0x74
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	4614      	mov	r4, r2
 8006bfe:	d510      	bpl.n	8006c22 <_svfiprintf_r+0x36>
 8006c00:	690b      	ldr	r3, [r1, #16]
 8006c02:	b973      	cbnz	r3, 8006c22 <_svfiprintf_r+0x36>
 8006c04:	2140      	movs	r1, #64	@ 0x40
 8006c06:	f7ff ff09 	bl	8006a1c <_malloc_r>
 8006c0a:	6028      	str	r0, [r5, #0]
 8006c0c:	6128      	str	r0, [r5, #16]
 8006c0e:	b930      	cbnz	r0, 8006c1e <_svfiprintf_r+0x32>
 8006c10:	230c      	movs	r3, #12
 8006c12:	603b      	str	r3, [r7, #0]
 8006c14:	f04f 30ff 	mov.w	r0, #4294967295
 8006c18:	b01d      	add	sp, #116	@ 0x74
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	2340      	movs	r3, #64	@ 0x40
 8006c20:	616b      	str	r3, [r5, #20]
 8006c22:	2300      	movs	r3, #0
 8006c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c26:	2320      	movs	r3, #32
 8006c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c30:	2330      	movs	r3, #48	@ 0x30
 8006c32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006dd0 <_svfiprintf_r+0x1e4>
 8006c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c3a:	f04f 0901 	mov.w	r9, #1
 8006c3e:	4623      	mov	r3, r4
 8006c40:	469a      	mov	sl, r3
 8006c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c46:	b10a      	cbz	r2, 8006c4c <_svfiprintf_r+0x60>
 8006c48:	2a25      	cmp	r2, #37	@ 0x25
 8006c4a:	d1f9      	bne.n	8006c40 <_svfiprintf_r+0x54>
 8006c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c50:	d00b      	beq.n	8006c6a <_svfiprintf_r+0x7e>
 8006c52:	465b      	mov	r3, fp
 8006c54:	4622      	mov	r2, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	4638      	mov	r0, r7
 8006c5a:	f7ff ff6b 	bl	8006b34 <__ssputs_r>
 8006c5e:	3001      	adds	r0, #1
 8006c60:	f000 80a7 	beq.w	8006db2 <_svfiprintf_r+0x1c6>
 8006c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c66:	445a      	add	r2, fp
 8006c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 809f 	beq.w	8006db2 <_svfiprintf_r+0x1c6>
 8006c74:	2300      	movs	r3, #0
 8006c76:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c7e:	f10a 0a01 	add.w	sl, sl, #1
 8006c82:	9304      	str	r3, [sp, #16]
 8006c84:	9307      	str	r3, [sp, #28]
 8006c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c8c:	4654      	mov	r4, sl
 8006c8e:	2205      	movs	r2, #5
 8006c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c94:	484e      	ldr	r0, [pc, #312]	@ (8006dd0 <_svfiprintf_r+0x1e4>)
 8006c96:	f7f9 fac3 	bl	8000220 <memchr>
 8006c9a:	9a04      	ldr	r2, [sp, #16]
 8006c9c:	b9d8      	cbnz	r0, 8006cd6 <_svfiprintf_r+0xea>
 8006c9e:	06d0      	lsls	r0, r2, #27
 8006ca0:	bf44      	itt	mi
 8006ca2:	2320      	movmi	r3, #32
 8006ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ca8:	0711      	lsls	r1, r2, #28
 8006caa:	bf44      	itt	mi
 8006cac:	232b      	movmi	r3, #43	@ 0x2b
 8006cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cb8:	d015      	beq.n	8006ce6 <_svfiprintf_r+0xfa>
 8006cba:	9a07      	ldr	r2, [sp, #28]
 8006cbc:	4654      	mov	r4, sl
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f04f 0c0a 	mov.w	ip, #10
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cca:	3b30      	subs	r3, #48	@ 0x30
 8006ccc:	2b09      	cmp	r3, #9
 8006cce:	d94b      	bls.n	8006d68 <_svfiprintf_r+0x17c>
 8006cd0:	b1b0      	cbz	r0, 8006d00 <_svfiprintf_r+0x114>
 8006cd2:	9207      	str	r2, [sp, #28]
 8006cd4:	e014      	b.n	8006d00 <_svfiprintf_r+0x114>
 8006cd6:	eba0 0308 	sub.w	r3, r0, r8
 8006cda:	fa09 f303 	lsl.w	r3, r9, r3
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	46a2      	mov	sl, r4
 8006ce4:	e7d2      	b.n	8006c8c <_svfiprintf_r+0xa0>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	1d19      	adds	r1, r3, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	9103      	str	r1, [sp, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	bfbb      	ittet	lt
 8006cf2:	425b      	neglt	r3, r3
 8006cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf8:	9307      	strge	r3, [sp, #28]
 8006cfa:	9307      	strlt	r3, [sp, #28]
 8006cfc:	bfb8      	it	lt
 8006cfe:	9204      	strlt	r2, [sp, #16]
 8006d00:	7823      	ldrb	r3, [r4, #0]
 8006d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d04:	d10a      	bne.n	8006d1c <_svfiprintf_r+0x130>
 8006d06:	7863      	ldrb	r3, [r4, #1]
 8006d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d0a:	d132      	bne.n	8006d72 <_svfiprintf_r+0x186>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9203      	str	r2, [sp, #12]
 8006d14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d18:	3402      	adds	r4, #2
 8006d1a:	9305      	str	r3, [sp, #20]
 8006d1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006de0 <_svfiprintf_r+0x1f4>
 8006d20:	7821      	ldrb	r1, [r4, #0]
 8006d22:	2203      	movs	r2, #3
 8006d24:	4650      	mov	r0, sl
 8006d26:	f7f9 fa7b 	bl	8000220 <memchr>
 8006d2a:	b138      	cbz	r0, 8006d3c <_svfiprintf_r+0x150>
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	eba0 000a 	sub.w	r0, r0, sl
 8006d32:	2240      	movs	r2, #64	@ 0x40
 8006d34:	4082      	lsls	r2, r0
 8006d36:	4313      	orrs	r3, r2
 8006d38:	3401      	adds	r4, #1
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d40:	4824      	ldr	r0, [pc, #144]	@ (8006dd4 <_svfiprintf_r+0x1e8>)
 8006d42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d46:	2206      	movs	r2, #6
 8006d48:	f7f9 fa6a 	bl	8000220 <memchr>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	d036      	beq.n	8006dbe <_svfiprintf_r+0x1d2>
 8006d50:	4b21      	ldr	r3, [pc, #132]	@ (8006dd8 <_svfiprintf_r+0x1ec>)
 8006d52:	bb1b      	cbnz	r3, 8006d9c <_svfiprintf_r+0x1b0>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	3307      	adds	r3, #7
 8006d58:	f023 0307 	bic.w	r3, r3, #7
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	9303      	str	r3, [sp, #12]
 8006d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d62:	4433      	add	r3, r6
 8006d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d66:	e76a      	b.n	8006c3e <_svfiprintf_r+0x52>
 8006d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	2001      	movs	r0, #1
 8006d70:	e7a8      	b.n	8006cc4 <_svfiprintf_r+0xd8>
 8006d72:	2300      	movs	r3, #0
 8006d74:	3401      	adds	r4, #1
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f04f 0c0a 	mov.w	ip, #10
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d84:	3a30      	subs	r2, #48	@ 0x30
 8006d86:	2a09      	cmp	r2, #9
 8006d88:	d903      	bls.n	8006d92 <_svfiprintf_r+0x1a6>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c6      	beq.n	8006d1c <_svfiprintf_r+0x130>
 8006d8e:	9105      	str	r1, [sp, #20]
 8006d90:	e7c4      	b.n	8006d1c <_svfiprintf_r+0x130>
 8006d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d96:	4604      	mov	r4, r0
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e7f0      	b.n	8006d7e <_svfiprintf_r+0x192>
 8006d9c:	ab03      	add	r3, sp, #12
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	462a      	mov	r2, r5
 8006da2:	4b0e      	ldr	r3, [pc, #56]	@ (8006ddc <_svfiprintf_r+0x1f0>)
 8006da4:	a904      	add	r1, sp, #16
 8006da6:	4638      	mov	r0, r7
 8006da8:	f3af 8000 	nop.w
 8006dac:	1c42      	adds	r2, r0, #1
 8006dae:	4606      	mov	r6, r0
 8006db0:	d1d6      	bne.n	8006d60 <_svfiprintf_r+0x174>
 8006db2:	89ab      	ldrh	r3, [r5, #12]
 8006db4:	065b      	lsls	r3, r3, #25
 8006db6:	f53f af2d 	bmi.w	8006c14 <_svfiprintf_r+0x28>
 8006dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dbc:	e72c      	b.n	8006c18 <_svfiprintf_r+0x2c>
 8006dbe:	ab03      	add	r3, sp, #12
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	4b05      	ldr	r3, [pc, #20]	@ (8006ddc <_svfiprintf_r+0x1f0>)
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f000 f879 	bl	8006ec0 <_printf_i>
 8006dce:	e7ed      	b.n	8006dac <_svfiprintf_r+0x1c0>
 8006dd0:	080073c0 	.word	0x080073c0
 8006dd4:	080073ca 	.word	0x080073ca
 8006dd8:	00000000 	.word	0x00000000
 8006ddc:	08006b35 	.word	0x08006b35
 8006de0:	080073c6 	.word	0x080073c6

08006de4 <_printf_common>:
 8006de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de8:	4616      	mov	r6, r2
 8006dea:	4698      	mov	r8, r3
 8006dec:	688a      	ldr	r2, [r1, #8]
 8006dee:	690b      	ldr	r3, [r1, #16]
 8006df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006df4:	4293      	cmp	r3, r2
 8006df6:	bfb8      	it	lt
 8006df8:	4613      	movlt	r3, r2
 8006dfa:	6033      	str	r3, [r6, #0]
 8006dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e00:	4607      	mov	r7, r0
 8006e02:	460c      	mov	r4, r1
 8006e04:	b10a      	cbz	r2, 8006e0a <_printf_common+0x26>
 8006e06:	3301      	adds	r3, #1
 8006e08:	6033      	str	r3, [r6, #0]
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	0699      	lsls	r1, r3, #26
 8006e0e:	bf42      	ittt	mi
 8006e10:	6833      	ldrmi	r3, [r6, #0]
 8006e12:	3302      	addmi	r3, #2
 8006e14:	6033      	strmi	r3, [r6, #0]
 8006e16:	6825      	ldr	r5, [r4, #0]
 8006e18:	f015 0506 	ands.w	r5, r5, #6
 8006e1c:	d106      	bne.n	8006e2c <_printf_common+0x48>
 8006e1e:	f104 0a19 	add.w	sl, r4, #25
 8006e22:	68e3      	ldr	r3, [r4, #12]
 8006e24:	6832      	ldr	r2, [r6, #0]
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	42ab      	cmp	r3, r5
 8006e2a:	dc26      	bgt.n	8006e7a <_printf_common+0x96>
 8006e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e30:	6822      	ldr	r2, [r4, #0]
 8006e32:	3b00      	subs	r3, #0
 8006e34:	bf18      	it	ne
 8006e36:	2301      	movne	r3, #1
 8006e38:	0692      	lsls	r2, r2, #26
 8006e3a:	d42b      	bmi.n	8006e94 <_printf_common+0xb0>
 8006e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e40:	4641      	mov	r1, r8
 8006e42:	4638      	mov	r0, r7
 8006e44:	47c8      	blx	r9
 8006e46:	3001      	adds	r0, #1
 8006e48:	d01e      	beq.n	8006e88 <_printf_common+0xa4>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	6922      	ldr	r2, [r4, #16]
 8006e4e:	f003 0306 	and.w	r3, r3, #6
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	bf02      	ittt	eq
 8006e56:	68e5      	ldreq	r5, [r4, #12]
 8006e58:	6833      	ldreq	r3, [r6, #0]
 8006e5a:	1aed      	subeq	r5, r5, r3
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	bf0c      	ite	eq
 8006e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e64:	2500      	movne	r5, #0
 8006e66:	4293      	cmp	r3, r2
 8006e68:	bfc4      	itt	gt
 8006e6a:	1a9b      	subgt	r3, r3, r2
 8006e6c:	18ed      	addgt	r5, r5, r3
 8006e6e:	2600      	movs	r6, #0
 8006e70:	341a      	adds	r4, #26
 8006e72:	42b5      	cmp	r5, r6
 8006e74:	d11a      	bne.n	8006eac <_printf_common+0xc8>
 8006e76:	2000      	movs	r0, #0
 8006e78:	e008      	b.n	8006e8c <_printf_common+0xa8>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4641      	mov	r1, r8
 8006e80:	4638      	mov	r0, r7
 8006e82:	47c8      	blx	r9
 8006e84:	3001      	adds	r0, #1
 8006e86:	d103      	bne.n	8006e90 <_printf_common+0xac>
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e90:	3501      	adds	r5, #1
 8006e92:	e7c6      	b.n	8006e22 <_printf_common+0x3e>
 8006e94:	18e1      	adds	r1, r4, r3
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	2030      	movs	r0, #48	@ 0x30
 8006e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e9e:	4422      	add	r2, r4
 8006ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ea8:	3302      	adds	r3, #2
 8006eaa:	e7c7      	b.n	8006e3c <_printf_common+0x58>
 8006eac:	2301      	movs	r3, #1
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c8      	blx	r9
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	d0e6      	beq.n	8006e88 <_printf_common+0xa4>
 8006eba:	3601      	adds	r6, #1
 8006ebc:	e7d9      	b.n	8006e72 <_printf_common+0x8e>
	...

08006ec0 <_printf_i>:
 8006ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec4:	7e0f      	ldrb	r7, [r1, #24]
 8006ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ec8:	2f78      	cmp	r7, #120	@ 0x78
 8006eca:	4691      	mov	r9, r2
 8006ecc:	4680      	mov	r8, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	469a      	mov	sl, r3
 8006ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ed6:	d807      	bhi.n	8006ee8 <_printf_i+0x28>
 8006ed8:	2f62      	cmp	r7, #98	@ 0x62
 8006eda:	d80a      	bhi.n	8006ef2 <_printf_i+0x32>
 8006edc:	2f00      	cmp	r7, #0
 8006ede:	f000 80d1 	beq.w	8007084 <_printf_i+0x1c4>
 8006ee2:	2f58      	cmp	r7, #88	@ 0x58
 8006ee4:	f000 80b8 	beq.w	8007058 <_printf_i+0x198>
 8006ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ef0:	e03a      	b.n	8006f68 <_printf_i+0xa8>
 8006ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ef6:	2b15      	cmp	r3, #21
 8006ef8:	d8f6      	bhi.n	8006ee8 <_printf_i+0x28>
 8006efa:	a101      	add	r1, pc, #4	@ (adr r1, 8006f00 <_printf_i+0x40>)
 8006efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f00:	08006f59 	.word	0x08006f59
 8006f04:	08006f6d 	.word	0x08006f6d
 8006f08:	08006ee9 	.word	0x08006ee9
 8006f0c:	08006ee9 	.word	0x08006ee9
 8006f10:	08006ee9 	.word	0x08006ee9
 8006f14:	08006ee9 	.word	0x08006ee9
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006ee9 	.word	0x08006ee9
 8006f20:	08006ee9 	.word	0x08006ee9
 8006f24:	08006ee9 	.word	0x08006ee9
 8006f28:	08006ee9 	.word	0x08006ee9
 8006f2c:	0800706b 	.word	0x0800706b
 8006f30:	08006f97 	.word	0x08006f97
 8006f34:	08007025 	.word	0x08007025
 8006f38:	08006ee9 	.word	0x08006ee9
 8006f3c:	08006ee9 	.word	0x08006ee9
 8006f40:	0800708d 	.word	0x0800708d
 8006f44:	08006ee9 	.word	0x08006ee9
 8006f48:	08006f97 	.word	0x08006f97
 8006f4c:	08006ee9 	.word	0x08006ee9
 8006f50:	08006ee9 	.word	0x08006ee9
 8006f54:	0800702d 	.word	0x0800702d
 8006f58:	6833      	ldr	r3, [r6, #0]
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	6032      	str	r2, [r6, #0]
 8006f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e09c      	b.n	80070a6 <_printf_i+0x1e6>
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	6820      	ldr	r0, [r4, #0]
 8006f70:	1d19      	adds	r1, r3, #4
 8006f72:	6031      	str	r1, [r6, #0]
 8006f74:	0606      	lsls	r6, r0, #24
 8006f76:	d501      	bpl.n	8006f7c <_printf_i+0xbc>
 8006f78:	681d      	ldr	r5, [r3, #0]
 8006f7a:	e003      	b.n	8006f84 <_printf_i+0xc4>
 8006f7c:	0645      	lsls	r5, r0, #25
 8006f7e:	d5fb      	bpl.n	8006f78 <_printf_i+0xb8>
 8006f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	da03      	bge.n	8006f90 <_printf_i+0xd0>
 8006f88:	232d      	movs	r3, #45	@ 0x2d
 8006f8a:	426d      	negs	r5, r5
 8006f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f90:	4858      	ldr	r0, [pc, #352]	@ (80070f4 <_printf_i+0x234>)
 8006f92:	230a      	movs	r3, #10
 8006f94:	e011      	b.n	8006fba <_printf_i+0xfa>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	6833      	ldr	r3, [r6, #0]
 8006f9a:	0608      	lsls	r0, r1, #24
 8006f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fa0:	d402      	bmi.n	8006fa8 <_printf_i+0xe8>
 8006fa2:	0649      	lsls	r1, r1, #25
 8006fa4:	bf48      	it	mi
 8006fa6:	b2ad      	uxthmi	r5, r5
 8006fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006faa:	4852      	ldr	r0, [pc, #328]	@ (80070f4 <_printf_i+0x234>)
 8006fac:	6033      	str	r3, [r6, #0]
 8006fae:	bf14      	ite	ne
 8006fb0:	230a      	movne	r3, #10
 8006fb2:	2308      	moveq	r3, #8
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fba:	6866      	ldr	r6, [r4, #4]
 8006fbc:	60a6      	str	r6, [r4, #8]
 8006fbe:	2e00      	cmp	r6, #0
 8006fc0:	db05      	blt.n	8006fce <_printf_i+0x10e>
 8006fc2:	6821      	ldr	r1, [r4, #0]
 8006fc4:	432e      	orrs	r6, r5
 8006fc6:	f021 0104 	bic.w	r1, r1, #4
 8006fca:	6021      	str	r1, [r4, #0]
 8006fcc:	d04b      	beq.n	8007066 <_printf_i+0x1a6>
 8006fce:	4616      	mov	r6, r2
 8006fd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fd4:	fb03 5711 	mls	r7, r3, r1, r5
 8006fd8:	5dc7      	ldrb	r7, [r0, r7]
 8006fda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fde:	462f      	mov	r7, r5
 8006fe0:	42bb      	cmp	r3, r7
 8006fe2:	460d      	mov	r5, r1
 8006fe4:	d9f4      	bls.n	8006fd0 <_printf_i+0x110>
 8006fe6:	2b08      	cmp	r3, #8
 8006fe8:	d10b      	bne.n	8007002 <_printf_i+0x142>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	07df      	lsls	r7, r3, #31
 8006fee:	d508      	bpl.n	8007002 <_printf_i+0x142>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	6861      	ldr	r1, [r4, #4]
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	bfde      	ittt	le
 8006ff8:	2330      	movle	r3, #48	@ 0x30
 8006ffa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ffe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007002:	1b92      	subs	r2, r2, r6
 8007004:	6122      	str	r2, [r4, #16]
 8007006:	f8cd a000 	str.w	sl, [sp]
 800700a:	464b      	mov	r3, r9
 800700c:	aa03      	add	r2, sp, #12
 800700e:	4621      	mov	r1, r4
 8007010:	4640      	mov	r0, r8
 8007012:	f7ff fee7 	bl	8006de4 <_printf_common>
 8007016:	3001      	adds	r0, #1
 8007018:	d14a      	bne.n	80070b0 <_printf_i+0x1f0>
 800701a:	f04f 30ff 	mov.w	r0, #4294967295
 800701e:	b004      	add	sp, #16
 8007020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	f043 0320 	orr.w	r3, r3, #32
 800702a:	6023      	str	r3, [r4, #0]
 800702c:	4832      	ldr	r0, [pc, #200]	@ (80070f8 <_printf_i+0x238>)
 800702e:	2778      	movs	r7, #120	@ 0x78
 8007030:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	6831      	ldr	r1, [r6, #0]
 8007038:	061f      	lsls	r7, r3, #24
 800703a:	f851 5b04 	ldr.w	r5, [r1], #4
 800703e:	d402      	bmi.n	8007046 <_printf_i+0x186>
 8007040:	065f      	lsls	r7, r3, #25
 8007042:	bf48      	it	mi
 8007044:	b2ad      	uxthmi	r5, r5
 8007046:	6031      	str	r1, [r6, #0]
 8007048:	07d9      	lsls	r1, r3, #31
 800704a:	bf44      	itt	mi
 800704c:	f043 0320 	orrmi.w	r3, r3, #32
 8007050:	6023      	strmi	r3, [r4, #0]
 8007052:	b11d      	cbz	r5, 800705c <_printf_i+0x19c>
 8007054:	2310      	movs	r3, #16
 8007056:	e7ad      	b.n	8006fb4 <_printf_i+0xf4>
 8007058:	4826      	ldr	r0, [pc, #152]	@ (80070f4 <_printf_i+0x234>)
 800705a:	e7e9      	b.n	8007030 <_printf_i+0x170>
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	f023 0320 	bic.w	r3, r3, #32
 8007062:	6023      	str	r3, [r4, #0]
 8007064:	e7f6      	b.n	8007054 <_printf_i+0x194>
 8007066:	4616      	mov	r6, r2
 8007068:	e7bd      	b.n	8006fe6 <_printf_i+0x126>
 800706a:	6833      	ldr	r3, [r6, #0]
 800706c:	6825      	ldr	r5, [r4, #0]
 800706e:	6961      	ldr	r1, [r4, #20]
 8007070:	1d18      	adds	r0, r3, #4
 8007072:	6030      	str	r0, [r6, #0]
 8007074:	062e      	lsls	r6, r5, #24
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	d501      	bpl.n	800707e <_printf_i+0x1be>
 800707a:	6019      	str	r1, [r3, #0]
 800707c:	e002      	b.n	8007084 <_printf_i+0x1c4>
 800707e:	0668      	lsls	r0, r5, #25
 8007080:	d5fb      	bpl.n	800707a <_printf_i+0x1ba>
 8007082:	8019      	strh	r1, [r3, #0]
 8007084:	2300      	movs	r3, #0
 8007086:	6123      	str	r3, [r4, #16]
 8007088:	4616      	mov	r6, r2
 800708a:	e7bc      	b.n	8007006 <_printf_i+0x146>
 800708c:	6833      	ldr	r3, [r6, #0]
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	6032      	str	r2, [r6, #0]
 8007092:	681e      	ldr	r6, [r3, #0]
 8007094:	6862      	ldr	r2, [r4, #4]
 8007096:	2100      	movs	r1, #0
 8007098:	4630      	mov	r0, r6
 800709a:	f7f9 f8c1 	bl	8000220 <memchr>
 800709e:	b108      	cbz	r0, 80070a4 <_printf_i+0x1e4>
 80070a0:	1b80      	subs	r0, r0, r6
 80070a2:	6060      	str	r0, [r4, #4]
 80070a4:	6863      	ldr	r3, [r4, #4]
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	2300      	movs	r3, #0
 80070aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ae:	e7aa      	b.n	8007006 <_printf_i+0x146>
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	4632      	mov	r2, r6
 80070b4:	4649      	mov	r1, r9
 80070b6:	4640      	mov	r0, r8
 80070b8:	47d0      	blx	sl
 80070ba:	3001      	adds	r0, #1
 80070bc:	d0ad      	beq.n	800701a <_printf_i+0x15a>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	079b      	lsls	r3, r3, #30
 80070c2:	d413      	bmi.n	80070ec <_printf_i+0x22c>
 80070c4:	68e0      	ldr	r0, [r4, #12]
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	4298      	cmp	r0, r3
 80070ca:	bfb8      	it	lt
 80070cc:	4618      	movlt	r0, r3
 80070ce:	e7a6      	b.n	800701e <_printf_i+0x15e>
 80070d0:	2301      	movs	r3, #1
 80070d2:	4632      	mov	r2, r6
 80070d4:	4649      	mov	r1, r9
 80070d6:	4640      	mov	r0, r8
 80070d8:	47d0      	blx	sl
 80070da:	3001      	adds	r0, #1
 80070dc:	d09d      	beq.n	800701a <_printf_i+0x15a>
 80070de:	3501      	adds	r5, #1
 80070e0:	68e3      	ldr	r3, [r4, #12]
 80070e2:	9903      	ldr	r1, [sp, #12]
 80070e4:	1a5b      	subs	r3, r3, r1
 80070e6:	42ab      	cmp	r3, r5
 80070e8:	dcf2      	bgt.n	80070d0 <_printf_i+0x210>
 80070ea:	e7eb      	b.n	80070c4 <_printf_i+0x204>
 80070ec:	2500      	movs	r5, #0
 80070ee:	f104 0619 	add.w	r6, r4, #25
 80070f2:	e7f5      	b.n	80070e0 <_printf_i+0x220>
 80070f4:	080073d1 	.word	0x080073d1
 80070f8:	080073e2 	.word	0x080073e2

080070fc <memmove>:
 80070fc:	4288      	cmp	r0, r1
 80070fe:	b510      	push	{r4, lr}
 8007100:	eb01 0402 	add.w	r4, r1, r2
 8007104:	d902      	bls.n	800710c <memmove+0x10>
 8007106:	4284      	cmp	r4, r0
 8007108:	4623      	mov	r3, r4
 800710a:	d807      	bhi.n	800711c <memmove+0x20>
 800710c:	1e43      	subs	r3, r0, #1
 800710e:	42a1      	cmp	r1, r4
 8007110:	d008      	beq.n	8007124 <memmove+0x28>
 8007112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800711a:	e7f8      	b.n	800710e <memmove+0x12>
 800711c:	4402      	add	r2, r0
 800711e:	4601      	mov	r1, r0
 8007120:	428a      	cmp	r2, r1
 8007122:	d100      	bne.n	8007126 <memmove+0x2a>
 8007124:	bd10      	pop	{r4, pc}
 8007126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800712a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800712e:	e7f7      	b.n	8007120 <memmove+0x24>

08007130 <_sbrk_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	@ (800714c <_sbrk_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7fa f932 	bl	80013a4 <_sbrk>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_sbrk_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_sbrk_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	200003b4 	.word	0x200003b4

08007150 <memcpy>:
 8007150:	440a      	add	r2, r1
 8007152:	4291      	cmp	r1, r2
 8007154:	f100 33ff 	add.w	r3, r0, #4294967295
 8007158:	d100      	bne.n	800715c <memcpy+0xc>
 800715a:	4770      	bx	lr
 800715c:	b510      	push	{r4, lr}
 800715e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007166:	4291      	cmp	r1, r2
 8007168:	d1f9      	bne.n	800715e <memcpy+0xe>
 800716a:	bd10      	pop	{r4, pc}

0800716c <_realloc_r>:
 800716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007170:	4607      	mov	r7, r0
 8007172:	4614      	mov	r4, r2
 8007174:	460d      	mov	r5, r1
 8007176:	b921      	cbnz	r1, 8007182 <_realloc_r+0x16>
 8007178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800717c:	4611      	mov	r1, r2
 800717e:	f7ff bc4d 	b.w	8006a1c <_malloc_r>
 8007182:	b92a      	cbnz	r2, 8007190 <_realloc_r+0x24>
 8007184:	f7ff fbde 	bl	8006944 <_free_r>
 8007188:	4625      	mov	r5, r4
 800718a:	4628      	mov	r0, r5
 800718c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007190:	f000 f81a 	bl	80071c8 <_malloc_usable_size_r>
 8007194:	4284      	cmp	r4, r0
 8007196:	4606      	mov	r6, r0
 8007198:	d802      	bhi.n	80071a0 <_realloc_r+0x34>
 800719a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800719e:	d8f4      	bhi.n	800718a <_realloc_r+0x1e>
 80071a0:	4621      	mov	r1, r4
 80071a2:	4638      	mov	r0, r7
 80071a4:	f7ff fc3a 	bl	8006a1c <_malloc_r>
 80071a8:	4680      	mov	r8, r0
 80071aa:	b908      	cbnz	r0, 80071b0 <_realloc_r+0x44>
 80071ac:	4645      	mov	r5, r8
 80071ae:	e7ec      	b.n	800718a <_realloc_r+0x1e>
 80071b0:	42b4      	cmp	r4, r6
 80071b2:	4622      	mov	r2, r4
 80071b4:	4629      	mov	r1, r5
 80071b6:	bf28      	it	cs
 80071b8:	4632      	movcs	r2, r6
 80071ba:	f7ff ffc9 	bl	8007150 <memcpy>
 80071be:	4629      	mov	r1, r5
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7ff fbbf 	bl	8006944 <_free_r>
 80071c6:	e7f1      	b.n	80071ac <_realloc_r+0x40>

080071c8 <_malloc_usable_size_r>:
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f18      	subs	r0, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfbc      	itt	lt
 80071d2:	580b      	ldrlt	r3, [r1, r0]
 80071d4:	18c0      	addlt	r0, r0, r3
 80071d6:	4770      	bx	lr

080071d8 <_init>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr

080071e4 <_fini>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr
