
I2C_Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ab4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d60  08005d60  00006d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d68  08005d68  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d68  08005d68  00006d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d6c  08005d6c  00006d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005d70  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000068  08005dd8  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005dd8  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c01b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dab  00000000  00000000  000130b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00014e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087b  00000000  00000000  00015940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223ea  00000000  00000000  000161bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6de  00000000  00000000  000385a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccd0f  00000000  00000000  00046c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  001139d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00116e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c6c 	.word	0x08005c6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005c6c 	.word	0x08005c6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__io_putchar>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c);
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c);
int __io_putchar(int ch)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005e4:	1d39      	adds	r1, r7, #4
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2201      	movs	r2, #1
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <__io_putchar+0x20>)
 80005ee:	f003 fff5 	bl	80045dc <HAL_UART_Transmit>
    return ch;
 80005f2:	687b      	ldr	r3, [r7, #4]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000d8 	.word	0x200000d8

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fbd6 	bl	8000db4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f83c 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f900 	bl	8000810 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000610:	f000 f8d4 	bl	80007bc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000614:	f000 f8a4 	bl	8000760 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Slave_Receive_IT(&hi2c1, rx_buffer, sizeof(rx_buffer));
 8000618:	2201      	movs	r2, #1
 800061a:	4915      	ldr	r1, [pc, #84]	@ (8000670 <main+0x70>)
 800061c:	4815      	ldr	r0, [pc, #84]	@ (8000674 <main+0x74>)
 800061e:	f001 fb07 	bl	8001c30 <HAL_I2C_Slave_Receive_IT>
  printf("Slave ready. Waiting for data from master...\r\n");
 8000622:	4815      	ldr	r0, [pc, #84]	@ (8000678 <main+0x78>)
 8000624:	f004 fcc0 	bl	8004fa8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (HAL_I2C_Slave_Receive(&hi2c1, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY) == HAL_OK)
 8000628:	f04f 33ff 	mov.w	r3, #4294967295
 800062c:	2201      	movs	r2, #1
 800062e:	4910      	ldr	r1, [pc, #64]	@ (8000670 <main+0x70>)
 8000630:	4810      	ldr	r0, [pc, #64]	@ (8000674 <main+0x74>)
 8000632:	f001 f9f3 	bl	8001a1c <HAL_I2C_Slave_Receive>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f5      	bne.n	8000628 <main+0x28>
	      {
	          printf("Received: 0x%02X\r\n", rx_buffer[0]);
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <main+0x70>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	480e      	ldr	r0, [pc, #56]	@ (800067c <main+0x7c>)
 8000644:	f004 fc48 	bl	8004ed8 <iprintf>

	          if (rx_buffer[0] == 0x80)
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <main+0x70>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b80      	cmp	r3, #128	@ 0x80
 800064e:	d105      	bne.n	800065c <main+0x5c>
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	480a      	ldr	r0, [pc, #40]	@ (8000680 <main+0x80>)
 8000656:	f001 f83f 	bl	80016d8 <HAL_GPIO_WritePin>
 800065a:	e7e5      	b.n	8000628 <main+0x28>
	          else if (rx_buffer[0] == 0x81)
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <main+0x70>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b81      	cmp	r3, #129	@ 0x81
 8000662:	d1e1      	bne.n	8000628 <main+0x28>
	              HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2120      	movs	r1, #32
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <main+0x80>)
 800066a:	f001 f835 	bl	80016d8 <HAL_GPIO_WritePin>
	  if (HAL_I2C_Slave_Receive(&hi2c1, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY) == HAL_OK)
 800066e:	e7db      	b.n	8000628 <main+0x28>
 8000670:	20000120 	.word	0x20000120
 8000674:	20000084 	.word	0x20000084
 8000678:	08005c84 	.word	0x08005c84
 800067c:	08005cb4 	.word	0x08005cb4
 8000680:	40020000 	.word	0x40020000

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	@ 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fd68 	bl	8005168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <SystemClock_Config+0xd4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <SystemClock_Config+0xd8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fc74 	bl	8004000 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 f92f 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f003 f914 	bl	800396c <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074a:	f000 f919 	bl	8000980 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_I2C1_Init+0x54>)
 8000768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800076c:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_I2C1_Init+0x58>)
 800076e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 200;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000778:	22c8      	movs	r2, #200	@ 0xc8
 800077a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800077e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_I2C1_Init+0x50>)
 800079e:	f000 ffb5 	bl	800170c <HAL_I2C_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a8:	f000 f8ea 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000084 	.word	0x20000084
 80007b4:	40005400 	.word	0x40005400
 80007b8:	000186a0 	.word	0x000186a0

080007bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c2:	4a12      	ldr	r2, [pc, #72]	@ (800080c <MX_USART2_UART_Init+0x50>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c6:	4b10      	ldr	r3, [pc, #64]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	@ (8000808 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f003 fea2 	bl	800453c <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8bf 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000d8 	.word	0x200000d8
 800080c:	40004400 	.word	0x40004400

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b2a      	ldr	r3, [pc, #168]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b26      	ldr	r3, [pc, #152]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a25      	ldr	r2, [pc, #148]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b23      	ldr	r3, [pc, #140]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b1f      	ldr	r3, [pc, #124]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a1e      	ldr	r2, [pc, #120]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	4812      	ldr	r0, [pc, #72]	@ (80008e4 <MX_GPIO_Init+0xd4>)
 800089c:	f000 ff1c 	bl	80016d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	@ (80008e8 <MX_GPIO_Init+0xd8>)
 80008b8:	f000 fc86 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008bc:	2320      	movs	r3, #32
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	@ (80008e4 <MX_GPIO_Init+0xd4>)
 80008d4:	f000 fc78 	bl	80011c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	@ 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40020800 	.word	0x40020800

080008ec <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	printf("Received: 0x%02X\r\n", rx_buffer[0]);
 80008f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	480a      	ldr	r0, [pc, #40]	@ (8000924 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 80008fc:	f004 faec 	bl	8004ed8 <iprintf>
    HAL_I2C_Slave_Receive_IT(&hi2c1, rx_buffer, sizeof(rx_buffer));
 8000900:	2201      	movs	r2, #1
 8000902:	4907      	ldr	r1, [pc, #28]	@ (8000920 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8000906:	f001 f993 	bl	8001c30 <HAL_I2C_Slave_Receive_IT>

    flag++;
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	3301      	adds	r3, #1
 8000912:	b2da      	uxtb	r2, r3
 8000914:	4b05      	ldr	r3, [pc, #20]	@ (800092c <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000916:	701a      	strb	r2, [r3, #0]

}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000120 	.word	0x20000120
 8000924:	08005cb4 	.word	0x08005cb4
 8000928:	20000084 	.word	0x20000084
 800092c:	20000121 	.word	0x20000121

08000930 <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
    // Reinitialize I2C in case of an error
	printf("I2C Error occurred. Reinitializing...\r\n");
 8000938:	480d      	ldr	r0, [pc, #52]	@ (8000970 <HAL_I2C_ErrorCallback+0x40>)
 800093a:	f004 fb35 	bl	8004fa8 <puts>

	    HAL_I2C_DeInit(&hi2c1);
 800093e:	480d      	ldr	r0, [pc, #52]	@ (8000974 <HAL_I2C_ErrorCallback+0x44>)
 8000940:	f001 f828 	bl	8001994 <HAL_I2C_DeInit>
	    HAL_Delay(10);  // 🔁 انتظر شوية قبل الإعادة
 8000944:	200a      	movs	r0, #10
 8000946:	f000 faa7 	bl	8000e98 <HAL_Delay>
	    HAL_I2C_Init(&hi2c1);
 800094a:	480a      	ldr	r0, [pc, #40]	@ (8000974 <HAL_I2C_ErrorCallback+0x44>)
 800094c:	f000 fede 	bl	800170c <HAL_I2C_Init>

	    // إعادة ضبط الاستقبال بعد مهلة قصيرة
	    if (HAL_I2C_Slave_Receive_IT(&hi2c1, rx_buffer, sizeof(rx_buffer)) != HAL_OK)
 8000950:	2201      	movs	r2, #1
 8000952:	4909      	ldr	r1, [pc, #36]	@ (8000978 <HAL_I2C_ErrorCallback+0x48>)
 8000954:	4807      	ldr	r0, [pc, #28]	@ (8000974 <HAL_I2C_ErrorCallback+0x44>)
 8000956:	f001 f96b 	bl	8001c30 <HAL_I2C_Slave_Receive_IT>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <HAL_I2C_ErrorCallback+0x36>
	    {
	        printf("Failed to re-init Slave Receive\r\n");
 8000960:	4806      	ldr	r0, [pc, #24]	@ (800097c <HAL_I2C_ErrorCallback+0x4c>)
 8000962:	f004 fb21 	bl	8004fa8 <puts>
	    }

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	08005cc8 	.word	0x08005cc8
 8000974:	20000084 	.word	0x20000084
 8000978:	20000120 	.word	0x20000120
 800097c:	08005cf0 	.word	0x08005cf0

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	@ (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	@ (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 fb7c 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	@ 0x28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <HAL_I2C_MspInit+0xa4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d13b      	bne.n	8000a76 <HAL_I2C_MspInit+0x9a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b20      	ldr	r3, [pc, #128]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1a:	23c0      	movs	r3, #192	@ 0xc0
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <HAL_I2C_MspInit+0xac>)
 8000a36:	f000 fbc7 	bl	80011c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a10      	ldr	r2, [pc, #64]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_I2C_MspInit+0xa8>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	201f      	movs	r0, #31
 8000a5c:	f000 fb3f 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a60:	201f      	movs	r0, #31
 8000a62:	f000 fb58 	bl	8001116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2020      	movs	r0, #32
 8000a6c:	f000 fb37 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a70:	2020      	movs	r0, #32
 8000a72:	f000 fb50 	bl	8001116 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3728      	adds	r7, #40	@ 0x28
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40005400 	.word	0x40005400
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40020400 	.word	0x40020400

08000a8c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad0 <HAL_I2C_MspDeInit+0x44>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d113      	bne.n	8000ac6 <HAL_I2C_MspDeInit+0x3a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_I2C_MspDeInit+0x48>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ad4 <HAL_I2C_MspDeInit+0x48>)
 8000aa4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000aaa:	2140      	movs	r1, #64	@ 0x40
 8000aac:	480a      	ldr	r0, [pc, #40]	@ (8000ad8 <HAL_I2C_MspDeInit+0x4c>)
 8000aae:	f000 fd1f 	bl	80014f0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	4808      	ldr	r0, [pc, #32]	@ (8000ad8 <HAL_I2C_MspDeInit+0x4c>)
 8000ab6:	f000 fd1b 	bl	80014f0 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8000aba:	201f      	movs	r0, #31
 8000abc:	f000 fb39 	bl	8001132 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8000ac0:	2020      	movs	r0, #32
 8000ac2:	f000 fb36 	bl	8001132 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a19      	ldr	r2, [pc, #100]	@ (8000b60 <HAL_UART_MspInit+0x84>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d12b      	bne.n	8000b56 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a10      	ldr	r2, [pc, #64]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b36:	230c      	movs	r3, #12
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b46:	2307      	movs	r3, #7
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <HAL_UART_MspInit+0x8c>)
 8000b52:	f000 fb39 	bl	80011c8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b56:	bf00      	nop
 8000b58:	3728      	adds	r7, #40	@ 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40004400 	.word	0x40004400
 8000b64:	40023800 	.word	0x40023800
 8000b68:	40020000 	.word	0x40020000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f949 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <I2C1_EV_IRQHandler+0x10>)
 8000bd2:	f001 f89d 	bl	8001d10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084

08000be0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <I2C1_ER_IRQHandler+0x10>)
 8000be6:	f001 fa04 	bl	8001ff2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000084 	.word	0x20000084

08000bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	e009      	b.n	8000c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fcc7 	bl	80005dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697a      	ldr	r2, [r7, #20]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	dbf1      	blt.n	8000c40 <_write+0x12>
  }
  return len;
 8000c5c:	687b      	ldr	r3, [r7, #4]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <_close>:

int _close(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_isatty>:

int _isatty(int file)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3714      	adds	r7, #20
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_sbrk+0x5c>)
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <_sbrk+0x60>)
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce4:	4b13      	ldr	r3, [pc, #76]	@ (8000d34 <_sbrk+0x64>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d102      	bne.n	8000cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <_sbrk+0x64>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <_sbrk+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d207      	bcs.n	8000d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d00:	f004 fa80 	bl	8005204 <__errno>
 8000d04:	4603      	mov	r3, r0
 8000d06:	220c      	movs	r2, #12
 8000d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	e009      	b.n	8000d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <_sbrk+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d16:	4b07      	ldr	r3, [pc, #28]	@ (8000d34 <_sbrk+0x64>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a05      	ldr	r2, [pc, #20]	@ (8000d34 <_sbrk+0x64>)
 8000d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20020000 	.word	0x20020000
 8000d30:	00000400 	.word	0x00000400
 8000d34:	20000124 	.word	0x20000124
 8000d38:	20000278 	.word	0x20000278

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d64:	f7ff ffea 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6a:	490d      	ldr	r1, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d80:	4c0a      	ldr	r4, [pc, #40]	@ (8000dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f004 fa3f 	bl	8005210 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d92:	f7ff fc35 	bl	8000600 <main>
  bx  lr    
 8000d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000da4:	08005d70 	.word	0x08005d70
  ldr r2, =_sbss
 8000da8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000dac:	20000278 	.word	0x20000278

08000db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db0:	e7fe      	b.n	8000db0 <ADC_IRQHandler>
	...

08000db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <HAL_Init+0x40>)
 8000dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_Init+0x40>)
 8000dca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x40>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x40>)
 8000dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f973 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	2000      	movs	r0, #0
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff fdd0 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023c00 	.word	0x40023c00

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f999 	bl	800114e <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f953 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000004 	.word	0x20000004

08000e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a04      	ldr	r2, [pc, #16]	@ (8000e7c <HAL_IncTick+0x24>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000128 	.word	0x20000128

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	@ (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000128 	.word	0x20000128

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d005      	beq.n	8000ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_Delay+0x44>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ebe:	bf00      	nop
 8000ec0:	f7ff ffde 	bl	8000e80 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d8f7      	bhi.n	8000ec0 <HAL_Delay+0x28>
  {
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000008 	.word	0x20000008

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	@ (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db12      	blt.n	8000fb8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	490a      	ldr	r1, [pc, #40]	@ (8000fc4 <__NVIC_DisableIRQ+0x44>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	3320      	adds	r3, #32
 8000fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fac:	f3bf 8f4f 	dsb	sy
}
 8000fb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fb2:	f3bf 8f6f 	isb	sy
}
 8000fb6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	@ (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	@ (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	@ 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	@ (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff05 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff1a 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff0d 	bl	8000f44 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff1d 	bl	8000f80 <__NVIC_DisableIRQ>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff94 	bl	8001084 <SysTick_Config>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d004      	beq.n	8001184 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e00c      	b.n	800119e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2205      	movs	r2, #5
 8001188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b8:	b2db      	uxtb	r3, r3
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	@ 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e165      	b.n	80014b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8154 	bne.w	80014aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80ae 	beq.w	80014aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b5d      	ldr	r3, [pc, #372]	@ (80014c8 <HAL_GPIO_Init+0x300>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001356:	4a5c      	ldr	r2, [pc, #368]	@ (80014c8 <HAL_GPIO_Init+0x300>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6453      	str	r3, [r2, #68]	@ 0x44
 800135e:	4b5a      	ldr	r3, [pc, #360]	@ (80014c8 <HAL_GPIO_Init+0x300>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136a:	4a58      	ldr	r2, [pc, #352]	@ (80014cc <HAL_GPIO_Init+0x304>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4f      	ldr	r2, [pc, #316]	@ (80014d0 <HAL_GPIO_Init+0x308>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d025      	beq.n	80013e2 <HAL_GPIO_Init+0x21a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a4e      	ldr	r2, [pc, #312]	@ (80014d4 <HAL_GPIO_Init+0x30c>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d01f      	beq.n	80013de <HAL_GPIO_Init+0x216>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a4d      	ldr	r2, [pc, #308]	@ (80014d8 <HAL_GPIO_Init+0x310>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d019      	beq.n	80013da <HAL_GPIO_Init+0x212>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a4c      	ldr	r2, [pc, #304]	@ (80014dc <HAL_GPIO_Init+0x314>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d013      	beq.n	80013d6 <HAL_GPIO_Init+0x20e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4b      	ldr	r2, [pc, #300]	@ (80014e0 <HAL_GPIO_Init+0x318>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d00d      	beq.n	80013d2 <HAL_GPIO_Init+0x20a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4a      	ldr	r2, [pc, #296]	@ (80014e4 <HAL_GPIO_Init+0x31c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d007      	beq.n	80013ce <HAL_GPIO_Init+0x206>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a49      	ldr	r2, [pc, #292]	@ (80014e8 <HAL_GPIO_Init+0x320>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d101      	bne.n	80013ca <HAL_GPIO_Init+0x202>
 80013c6:	2306      	movs	r3, #6
 80013c8:	e00c      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013ca:	2307      	movs	r3, #7
 80013cc:	e00a      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013ce:	2305      	movs	r3, #5
 80013d0:	e008      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013d2:	2304      	movs	r3, #4
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013d6:	2303      	movs	r3, #3
 80013d8:	e004      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013da:	2302      	movs	r3, #2
 80013dc:	e002      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_GPIO_Init+0x21c>
 80013e2:	2300      	movs	r3, #0
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	f002 0203 	and.w	r2, r2, #3
 80013ea:	0092      	lsls	r2, r2, #2
 80013ec:	4093      	lsls	r3, r2
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f4:	4935      	ldr	r1, [pc, #212]	@ (80014cc <HAL_GPIO_Init+0x304>)
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	4b3a      	ldr	r3, [pc, #232]	@ (80014ec <HAL_GPIO_Init+0x324>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001426:	4a31      	ldr	r2, [pc, #196]	@ (80014ec <HAL_GPIO_Init+0x324>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800142c:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_GPIO_Init+0x324>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <HAL_GPIO_Init+0x324>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <HAL_GPIO_Init+0x324>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	43db      	mvns	r3, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <HAL_GPIO_Init+0x324>)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001480:	4b1a      	ldr	r3, [pc, #104]	@ (80014ec <HAL_GPIO_Init+0x324>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014a4:	4a11      	ldr	r2, [pc, #68]	@ (80014ec <HAL_GPIO_Init+0x324>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3301      	adds	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	f67f ae96 	bls.w	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40013800 	.word	0x40013800
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40020c00 	.word	0x40020c00
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40021400 	.word	0x40021400
 80014e8:	40021800 	.word	0x40021800
 80014ec:	40013c00 	.word	0x40013c00

080014f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e0c7      	b.n	800169c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800150c:	2201      	movs	r2, #1
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	429a      	cmp	r2, r3
 8001524:	f040 80b7 	bne.w	8001696 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001528:	4a62      	ldr	r2, [pc, #392]	@ (80016b4 <HAL_GPIO_DeInit+0x1c4>)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	089b      	lsrs	r3, r3, #2
 800152e:	3302      	adds	r3, #2
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	220f      	movs	r2, #15
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	68ba      	ldr	r2, [r7, #8]
 8001546:	4013      	ands	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a5a      	ldr	r2, [pc, #360]	@ (80016b8 <HAL_GPIO_DeInit+0x1c8>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_DeInit+0xae>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a59      	ldr	r2, [pc, #356]	@ (80016bc <HAL_GPIO_DeInit+0x1cc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_DeInit+0xaa>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a58      	ldr	r2, [pc, #352]	@ (80016c0 <HAL_GPIO_DeInit+0x1d0>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_DeInit+0xa6>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a57      	ldr	r2, [pc, #348]	@ (80016c4 <HAL_GPIO_DeInit+0x1d4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_DeInit+0xa2>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a56      	ldr	r2, [pc, #344]	@ (80016c8 <HAL_GPIO_DeInit+0x1d8>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_DeInit+0x9e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a55      	ldr	r2, [pc, #340]	@ (80016cc <HAL_GPIO_DeInit+0x1dc>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_DeInit+0x9a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a54      	ldr	r2, [pc, #336]	@ (80016d0 <HAL_GPIO_DeInit+0x1e0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_DeInit+0x96>
 8001582:	2306      	movs	r3, #6
 8001584:	e00c      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 8001586:	2307      	movs	r3, #7
 8001588:	e00a      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 800158a:	2305      	movs	r3, #5
 800158c:	e008      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 800158e:	2304      	movs	r3, #4
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 8001592:	2303      	movs	r3, #3
 8001594:	e004      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 8001596:	2302      	movs	r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 800159a:	2301      	movs	r3, #1
 800159c:	e000      	b.n	80015a0 <HAL_GPIO_DeInit+0xb0>
 800159e:	2300      	movs	r3, #0
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	f002 0203 	and.w	r2, r2, #3
 80015a6:	0092      	lsls	r2, r2, #2
 80015a8:	4093      	lsls	r3, r2
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d132      	bne.n	8001616 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80015b0:	4b48      	ldr	r3, [pc, #288]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	43db      	mvns	r3, r3
 80015b8:	4946      	ldr	r1, [pc, #280]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80015be:	4b45      	ldr	r3, [pc, #276]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4943      	ldr	r1, [pc, #268]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80015cc:	4b41      	ldr	r3, [pc, #260]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	493f      	ldr	r1, [pc, #252]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80015da:	4b3e      	ldr	r3, [pc, #248]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	493c      	ldr	r1, [pc, #240]	@ (80016d4 <HAL_GPIO_DeInit+0x1e4>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	f003 0303 	and.w	r3, r3, #3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	220f      	movs	r2, #15
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80015f8:	4a2e      	ldr	r2, [pc, #184]	@ (80016b4 <HAL_GPIO_DeInit+0x1c4>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	089b      	lsrs	r3, r3, #2
 80015fe:	3302      	adds	r3, #2
 8001600:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	43da      	mvns	r2, r3
 8001608:	482a      	ldr	r0, [pc, #168]	@ (80016b4 <HAL_GPIO_DeInit+0x1c4>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	400a      	ands	r2, r1
 8001610:	3302      	adds	r3, #2
 8001612:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2103      	movs	r1, #3
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3208      	adds	r2, #8
 8001634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	08d2      	lsrs	r2, r2, #3
 800164c:	4019      	ands	r1, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68da      	ldr	r2, [r3, #12]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2103      	movs	r1, #3
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	401a      	ands	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2101      	movs	r1, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	401a      	ands	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2103      	movs	r1, #3
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f af34 	bls.w	800150c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40013800 	.word	0x40013800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020400 	.word	0x40020400
 80016c0:	40020800 	.word	0x40020800
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40021400 	.word	0x40021400
 80016d0:	40021800 	.word	0x40021800
 80016d4:	40013c00 	.word	0x40013c00

080016d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e8:	787b      	ldrb	r3, [r7, #1]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ee:	887a      	ldrh	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f4:	e003      	b.n	80016fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	041a      	lsls	r2, r3, #16
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e12b      	b.n	8001976 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d106      	bne.n	8001738 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff f952 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2224      	movs	r2, #36	@ 0x24
 800173c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0201 	bic.w	r2, r2, #1
 800174e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800175e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800176e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001770:	f002 f9ee 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 8001774:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4a81      	ldr	r2, [pc, #516]	@ (8001980 <HAL_I2C_Init+0x274>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d807      	bhi.n	8001790 <HAL_I2C_Init+0x84>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a80      	ldr	r2, [pc, #512]	@ (8001984 <HAL_I2C_Init+0x278>)
 8001784:	4293      	cmp	r3, r2
 8001786:	bf94      	ite	ls
 8001788:	2301      	movls	r3, #1
 800178a:	2300      	movhi	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	e006      	b.n	800179e <HAL_I2C_Init+0x92>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4a7d      	ldr	r2, [pc, #500]	@ (8001988 <HAL_I2C_Init+0x27c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	bf94      	ite	ls
 8001798:	2301      	movls	r3, #1
 800179a:	2300      	movhi	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0e7      	b.n	8001976 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a78      	ldr	r2, [pc, #480]	@ (800198c <HAL_I2C_Init+0x280>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	0c9b      	lsrs	r3, r3, #18
 80017b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001980 <HAL_I2C_Init+0x274>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d802      	bhi.n	80017e0 <HAL_I2C_Init+0xd4>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	3301      	adds	r3, #1
 80017de:	e009      	b.n	80017f4 <HAL_I2C_Init+0xe8>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017e6:	fb02 f303 	mul.w	r3, r2, r3
 80017ea:	4a69      	ldr	r2, [pc, #420]	@ (8001990 <HAL_I2C_Init+0x284>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	6812      	ldr	r2, [r2, #0]
 80017f8:	430b      	orrs	r3, r1
 80017fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001806:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	495c      	ldr	r1, [pc, #368]	@ (8001980 <HAL_I2C_Init+0x274>)
 8001810:	428b      	cmp	r3, r1
 8001812:	d819      	bhi.n	8001848 <HAL_I2C_Init+0x13c>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1e59      	subs	r1, r3, #1
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001822:	1c59      	adds	r1, r3, #1
 8001824:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001828:	400b      	ands	r3, r1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00a      	beq.n	8001844 <HAL_I2C_Init+0x138>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1e59      	subs	r1, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fbb1 f3f3 	udiv	r3, r1, r3
 800183c:	3301      	adds	r3, #1
 800183e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001842:	e051      	b.n	80018e8 <HAL_I2C_Init+0x1dc>
 8001844:	2304      	movs	r3, #4
 8001846:	e04f      	b.n	80018e8 <HAL_I2C_Init+0x1dc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d111      	bne.n	8001874 <HAL_I2C_Init+0x168>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001862:	3301      	adds	r3, #1
 8001864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e012      	b.n	800189a <HAL_I2C_Init+0x18e>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1e58      	subs	r0, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	0099      	lsls	r1, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	fbb0 f3f3 	udiv	r3, r0, r3
 800188a:	3301      	adds	r3, #1
 800188c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf0c      	ite	eq
 8001894:	2301      	moveq	r3, #1
 8001896:	2300      	movne	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Init+0x196>
 800189e:	2301      	movs	r3, #1
 80018a0:	e022      	b.n	80018e8 <HAL_I2C_Init+0x1dc>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10e      	bne.n	80018c8 <HAL_I2C_Init+0x1bc>
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1e58      	subs	r0, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	460b      	mov	r3, r1
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	440b      	add	r3, r1
 80018b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018c6:	e00f      	b.n	80018e8 <HAL_I2C_Init+0x1dc>
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1e58      	subs	r0, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	0099      	lsls	r1, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	fbb0 f3f3 	udiv	r3, r0, r3
 80018de:	3301      	adds	r3, #1
 80018e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	6809      	ldr	r1, [r1, #0]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69da      	ldr	r2, [r3, #28]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001916:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6911      	ldr	r1, [r2, #16]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68d2      	ldr	r2, [r2, #12]
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	430b      	orrs	r3, r1
 800192a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	430a      	orrs	r2, r1
 8001946:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	000186a0 	.word	0x000186a0
 8001984:	001e847f 	.word	0x001e847f
 8001988:	003d08ff 	.word	0x003d08ff
 800198c:	431bde83 	.word	0x431bde83
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e021      	b.n	80019ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2224      	movs	r2, #36	@ 0x24
 80019aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff f864 	bl	8000a8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a04:	2b80      	cmp	r3, #128	@ 0x80
 8001a06:	d103      	bne.n	8001a10 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  }
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff fa28 	bl	8000e80 <HAL_GetTick>
 8001a30:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b20      	cmp	r3, #32
 8001a3c:	f040 80ee 	bne.w	8001c1c <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_I2C_Slave_Receive+0x30>
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0e6      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Slave_Receive+0x42>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0df      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d007      	beq.n	8001a84 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0201 	orr.w	r2, r2, #1
 8001a82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a92:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2222      	movs	r2, #34	@ 0x22
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	88fa      	ldrh	r2, [r7, #6]
 8001ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4a59      	ldr	r2, [pc, #356]	@ (8001c28 <HAL_I2C_Slave_Receive+0x20c>)
 8001ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	4953      	ldr	r1, [pc, #332]	@ (8001c2c <HAL_I2C_Slave_Receive+0x210>)
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f001 fdab 	bl	800363c <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e096      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8001b06:	e04e      	b.n	8001ba6 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	6839      	ldr	r1, [r7, #0]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f001 fe85 	bl	800381c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d009      	beq.n	8001b2c <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b26:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e078      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d11c      	bne.n	8001ba6 <HAL_I2C_Slave_Receive+0x18a>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d018      	beq.n	8001ba6 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1ac      	bne.n	8001b08 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bae:	69fa      	ldr	r2, [r7, #28]
 8001bb0:	6839      	ldr	r1, [r7, #0]
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f001 fdbc 	bl	8003730 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d009      	beq.n	8001bd2 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bcc:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e025      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3720      	adds	r7, #32
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	ffff0000 	.word	0xffff0000
 8001c2c:	00010002 	.word	0x00010002

08001c30 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d158      	bne.n	8001cfc <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_I2C_Slave_Receive_IT+0x26>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e051      	b.n	8001cfe <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_I2C_Slave_Receive_IT+0x38>
 8001c64:	2302      	movs	r3, #2
 8001c66:	e04a      	b.n	8001cfe <HAL_I2C_Slave_Receive_IT+0xce>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d007      	beq.n	8001c8e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c9c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2222      	movs	r2, #34	@ 0x22
 8001ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	88fa      	ldrh	r2, [r7, #6]
 8001cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <HAL_I2C_Slave_Receive_IT+0xdc>)
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001cde:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001cf6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	ffff0000 	.word	0xffff0000

08001d10 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d003      	beq.n	8001d48 <HAL_I2C_EV_IRQHandler+0x38>
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b40      	cmp	r3, #64	@ 0x40
 8001d44:	f040 80c1 	bne.w	8001eca <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_I2C_EV_IRQHandler+0x6e>
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001d68:	d003      	beq.n	8001d72 <HAL_I2C_EV_IRQHandler+0x62>
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001d70:	d101      	bne.n	8001d76 <HAL_I2C_EV_IRQHandler+0x66>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_I2C_EV_IRQHandler+0x68>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	f000 8132 	beq.w	8001fe2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00c      	beq.n	8001da2 <HAL_I2C_EV_IRQHandler+0x92>
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	0a5b      	lsrs	r3, r3, #9
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f001 fdcd 	bl	8003934 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 fd87 	bl	80028ae <I2C_Master_SB>
 8001da0:	e092      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_I2C_EV_IRQHandler+0xb2>
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	0a5b      	lsrs	r3, r3, #9
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fdfd 	bl	80029ba <I2C_Master_ADD10>
 8001dc0:	e082      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0xd2>
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	0a5b      	lsrs	r3, r3, #9
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fe17 	bl	8002a0e <I2C_Master_ADDR>
 8001de0:	e072      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03b      	beq.n	8001e66 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001dfc:	f000 80f3 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	09db      	lsrs	r3, r3, #7
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00f      	beq.n	8001e2c <HAL_I2C_EV_IRQHandler+0x11c>
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d009      	beq.n	8001e2c <HAL_I2C_EV_IRQHandler+0x11c>
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d103      	bne.n	8001e2c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f9df 	bl	80021e8 <I2C_MasterTransmit_TXE>
 8001e2a:	e04d      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80d6 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	0a5b      	lsrs	r3, r3, #9
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80cf 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	2b21      	cmp	r3, #33	@ 0x21
 8001e4c:	d103      	bne.n	8001e56 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 fa66 	bl	8002320 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e54:	e0c7      	b.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b40      	cmp	r3, #64	@ 0x40
 8001e5a:	f040 80c4 	bne.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fad4 	bl	800240c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e64:	e0bf      	b.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e74:	f000 80b7 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	099b      	lsrs	r3, r3, #6
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00f      	beq.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x194>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d009      	beq.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x194>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d103      	bne.n	8001ea4 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fb4d 	bl	800253c <I2C_MasterReceive_RXNE>
 8001ea2:	e011      	b.n	8001ec8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 809a 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	0a5b      	lsrs	r3, r3, #9
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8093 	beq.w	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fc03 	bl	80026cc <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ec6:	e08e      	b.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ec8:	e08d      	b.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d004      	beq.n	8001edc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e007      	b.n	8001eec <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	085b      	lsrs	r3, r3, #1
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d012      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x20e>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	0a5b      	lsrs	r3, r3, #9
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00c      	beq.n	8001f1e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 ffc8 	bl	8002eac <I2C_Slave_ADDR>
 8001f1c:	e066      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x22e>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	0a5b      	lsrs	r3, r3, #9
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f001 f802 	bl	8002f40 <I2C_Slave_STOPF>
 8001f3c:	e056      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f3e:	7bbb      	ldrb	r3, [r7, #14]
 8001f40:	2b21      	cmp	r3, #33	@ 0x21
 8001f42:	d002      	beq.n	8001f4a <HAL_I2C_EV_IRQHandler+0x23a>
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	2b29      	cmp	r3, #41	@ 0x29
 8001f48:	d125      	bne.n	8001f96 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	09db      	lsrs	r3, r3, #7
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00f      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x266>
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	0a9b      	lsrs	r3, r3, #10
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_I2C_EV_IRQHandler+0x266>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fede 	bl	8002d30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f74:	e039      	b.n	8001fea <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d033      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x2da>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	0a5b      	lsrs	r3, r3, #9
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d02d      	beq.n	8001fea <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 ff0b 	bl	8002daa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f94:	e029      	b.n	8001fea <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00f      	beq.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0a9b      	lsrs	r3, r3, #10
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	089b      	lsrs	r3, r3, #2
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d103      	bne.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 ff16 	bl	8002dec <I2C_SlaveReceive_RXNE>
 8001fc0:	e014      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00e      	beq.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	0a5b      	lsrs	r3, r3, #9
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d008      	beq.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 ff44 	bl	8002e68 <I2C_SlaveReceive_BTF>
 8001fe0:	e004      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001fe2:	bf00      	nop
 8001fe4:	e002      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001fea:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001fec:	3720      	adds	r7, #32
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b08a      	sub	sp, #40	@ 0x28
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002014:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00e      	beq.n	8002040 <HAL_I2C_ER_IRQHandler+0x4e>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800203e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	0a5b      	lsrs	r3, r3, #9
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00e      	beq.n	800206a <HAL_I2C_ER_IRQHandler+0x78>
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	0a1b      	lsrs	r3, r3, #8
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205a:	f043 0302 	orr.w	r3, r3, #2
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002068:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	0a9b      	lsrs	r3, r3, #10
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03f      	beq.n	80020f6 <HAL_I2C_ER_IRQHandler+0x104>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d039      	beq.n	80020f6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002094:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800209c:	7ebb      	ldrb	r3, [r7, #26]
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d112      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10f      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xd6>
 80020a8:	7cfb      	ldrb	r3, [r7, #19]
 80020aa:	2b21      	cmp	r3, #33	@ 0x21
 80020ac:	d008      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80020ae:	7cfb      	ldrb	r3, [r7, #19]
 80020b0:	2b29      	cmp	r3, #41	@ 0x29
 80020b2:	d005      	beq.n	80020c0 <HAL_I2C_ER_IRQHandler+0xce>
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	2b28      	cmp	r3, #40	@ 0x28
 80020b8:	d106      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b21      	cmp	r3, #33	@ 0x21
 80020be:	d103      	bne.n	80020c8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f001 f86d 	bl	80031a0 <I2C_Slave_AF>
 80020c6:	e016      	b.n	80020f6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020d0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80020da:	7efb      	ldrb	r3, [r7, #27]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d002      	beq.n	80020e6 <HAL_I2C_ER_IRQHandler+0xf4>
 80020e0:	7efb      	ldrb	r3, [r7, #27]
 80020e2:	2b40      	cmp	r3, #64	@ 0x40
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020f6:	6a3b      	ldr	r3, [r7, #32]
 80020f8:	0adb      	lsrs	r3, r3, #11
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00e      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x12e>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800211e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	2b00      	cmp	r3, #0
 8002124:	d008      	beq.n	8002138 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800212a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f001 f8a8 	bl	8003288 <I2C_ITError>
  }
}
 8002138:	bf00      	nop
 800213a:	3728      	adds	r7, #40	@ 0x28
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	70fb      	strb	r3, [r7, #3]
 8002188:	4613      	mov	r3, r2
 800218a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021fe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002204:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220a:	2b00      	cmp	r3, #0
 800220c:	d150      	bne.n	80022b0 <I2C_MasterTransmit_TXE+0xc8>
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b21      	cmp	r3, #33	@ 0x21
 8002212:	d14d      	bne.n	80022b0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b08      	cmp	r3, #8
 8002218:	d01d      	beq.n	8002256 <I2C_MasterTransmit_TXE+0x6e>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b20      	cmp	r3, #32
 800221e:	d01a      	beq.n	8002256 <I2C_MasterTransmit_TXE+0x6e>
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002226:	d016      	beq.n	8002256 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002236:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2211      	movs	r2, #17
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff ff76 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002254:	e060      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002264:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002274:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b40      	cmp	r3, #64	@ 0x40
 800228e:	d107      	bne.n	80022a0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff87 	bl	80021ac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800229e:	e03b      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff49 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022ae:	e033      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b21      	cmp	r3, #33	@ 0x21
 80022b4:	d005      	beq.n	80022c2 <I2C_MasterTransmit_TXE+0xda>
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d12d      	bne.n	8002318 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	2b22      	cmp	r3, #34	@ 0x22
 80022c0:	d12a      	bne.n	8002318 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d108      	bne.n	80022de <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022da:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80022dc:	e01c      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b40      	cmp	r3, #64	@ 0x40
 80022e8:	d103      	bne.n	80022f2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f88e 	bl	800240c <I2C_MemoryTransmit_TXE_BTF>
}
 80022f0:	e012      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002316:	e7ff      	b.n	8002318 <I2C_MasterTransmit_TXE+0x130>
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b21      	cmp	r3, #33	@ 0x21
 8002338:	d164      	bne.n	8002404 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233e:	b29b      	uxth	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	781a      	ldrb	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002368:	e04c      	b.n	8002404 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d01d      	beq.n	80023ac <I2C_MasterTransmit_BTF+0x8c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b20      	cmp	r3, #32
 8002374:	d01a      	beq.n	80023ac <I2C_MasterTransmit_BTF+0x8c>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800237c:	d016      	beq.n	80023ac <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800238c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2211      	movs	r2, #17
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff fecb 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
}
 80023aa:	e02b      	b.n	8002404 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023ba:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ca:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b40      	cmp	r3, #64	@ 0x40
 80023e4:	d107      	bne.n	80023f6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff fedc 	bl	80021ac <HAL_I2C_MemTxCpltCallback>
}
 80023f4:	e006      	b.n	8002404 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fe9e 	bl	8002140 <HAL_I2C_MasterTxCpltCallback>
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11d      	bne.n	8002460 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	2b01      	cmp	r3, #1
 800242a:	d10b      	bne.n	8002444 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243c:	1c9a      	adds	r2, r3, #2
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002442:	e077      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002448:	b29b      	uxth	r3, r3
 800244a:	121b      	asrs	r3, r3, #8
 800244c:	b2da      	uxtb	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800245e:	e069      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10b      	bne.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246c:	b2da      	uxtb	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800247e:	e059      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002484:	2b02      	cmp	r3, #2
 8002486:	d152      	bne.n	800252e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b22      	cmp	r3, #34	@ 0x22
 800248c:	d10d      	bne.n	80024aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800249c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80024a8:	e044      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d015      	beq.n	80024e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	2b21      	cmp	r3, #33	@ 0x21
 80024b8:	d112      	bne.n	80024e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	781a      	ldrb	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3b01      	subs	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024de:	e029      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d124      	bne.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	2b21      	cmp	r3, #33	@ 0x21
 80024ee:	d121      	bne.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80024fe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fe40 	bl	80021ac <HAL_I2C_MemTxCpltCallback>
}
 800252c:	e002      	b.n	8002534 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fa5f 	bl	80019f2 <I2C_Flush_DR>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b22      	cmp	r3, #34	@ 0x22
 800254e:	f040 80b9 	bne.w	80026c4 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b03      	cmp	r3, #3
 8002564:	d921      	bls.n	80025aa <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002582:	b29b      	uxth	r3, r3
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b03      	cmp	r3, #3
 8002594:	f040 8096 	bne.w	80026c4 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80025a8:	e08c      	b.n	80026c4 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d07f      	beq.n	80026b2 <I2C_MasterReceive_RXNE+0x176>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d002      	beq.n	80025be <I2C_MasterReceive_RXNE+0x82>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d179      	bne.n	80026b2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f001 f8fa 	bl	80037b8 <I2C_WaitOnSTOPRequestThroughIT>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d14c      	bne.n	8002664 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025d8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025e8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b40      	cmp	r3, #64	@ 0x40
 8002622:	d10a      	bne.n	800263a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fdc4 	bl	80021c0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002638:	e044      	b.n	80026c4 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b08      	cmp	r3, #8
 8002646:	d002      	beq.n	800264e <I2C_MasterReceive_RXNE+0x112>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b20      	cmp	r3, #32
 800264c:	d103      	bne.n	8002656 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30
 8002654:	e002      	b.n	800265c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2212      	movs	r2, #18
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff fd79 	bl	8002154 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002662:	e02f      	b.n	80026c4 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002672:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fe f940 	bl	8000930 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026b0:	e008      	b.n	80026c4 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c0:	605a      	str	r2, [r3, #4]
}
 80026c2:	e7ff      	b.n	80026c4 <I2C_MasterReceive_RXNE+0x188>
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d11b      	bne.n	800271c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800271a:	e0c4      	b.n	80028a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b03      	cmp	r3, #3
 8002724:	d129      	bne.n	800277a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002734:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d00a      	beq.n	8002752 <I2C_MasterReceive_BTF+0x86>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d007      	beq.n	8002752 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002750:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002778:	e095      	b.n	80028a6 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d17d      	bne.n	8002880 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d002      	beq.n	8002790 <I2C_MasterReceive_BTF+0xc4>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b10      	cmp	r3, #16
 800278e:	d108      	bne.n	80027a2 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e016      	b.n	80027d0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d002      	beq.n	80027ae <I2C_MasterReceive_BTF+0xe2>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d108      	bne.n	80027c0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	e007      	b.n	80027d0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800282a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b40      	cmp	r3, #64	@ 0x40
 800283e:	d10a      	bne.n	8002856 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fcb6 	bl	80021c0 <HAL_I2C_MemRxCpltCallback>
}
 8002854:	e027      	b.n	80028a6 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d002      	beq.n	800286a <I2C_MasterReceive_BTF+0x19e>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b20      	cmp	r3, #32
 8002868:	d103      	bne.n	8002872 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002870:	e002      	b.n	8002878 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2212      	movs	r2, #18
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fc6b 	bl	8002154 <HAL_I2C_MasterRxCpltCallback>
}
 800287e:	e012      	b.n	80028a6 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b40      	cmp	r3, #64	@ 0x40
 80028c0:	d117      	bne.n	80028f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80028dc:	e067      	b.n	80029ae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	611a      	str	r2, [r3, #16]
}
 80028f0:	e05d      	b.n	80029ae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028fa:	d133      	bne.n	8002964 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b21      	cmp	r3, #33	@ 0x21
 8002906:	d109      	bne.n	800291c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e008      	b.n	800292e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002920:	b2db      	uxtb	r3, r3
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	b2da      	uxtb	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <I2C_Master_SB+0x92>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d108      	bne.n	8002952 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d032      	beq.n	80029ae <I2C_Master_SB+0x100>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d02d      	beq.n	80029ae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002960:	605a      	str	r2, [r3, #4]
}
 8002962:	e024      	b.n	80029ae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	b29b      	uxth	r3, r3
 8002972:	11db      	asrs	r3, r3, #7
 8002974:	b2db      	uxtb	r3, r3
 8002976:	f003 0306 	and.w	r3, r3, #6
 800297a:	b2db      	uxtb	r3, r3
 800297c:	f063 030f 	orn	r3, r3, #15
 8002980:	b2da      	uxtb	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
}
 8002988:	e011      	b.n	80029ae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298e:	2b01      	cmp	r3, #1
 8002990:	d10d      	bne.n	80029ae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	b29b      	uxth	r3, r3
 8002998:	11db      	asrs	r3, r3, #7
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0306 	and.w	r3, r3, #6
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	f063 030e 	orn	r3, r3, #14
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	611a      	str	r2, [r3, #16]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <I2C_Master_ADD10+0x26>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d108      	bne.n	80029f2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00c      	beq.n	8002a02 <I2C_Master_ADD10+0x48>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a00:	605a      	str	r2, [r3, #4]
  }
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b091      	sub	sp, #68	@ 0x44
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b22      	cmp	r3, #34	@ 0x22
 8002a36:	f040 8169 	bne.w	8002d0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <I2C_Master_ADDR+0x54>
 8002a42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d10b      	bne.n	8002a62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	e160      	b.n	8002d24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <I2C_Master_ADDR+0x98>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002a72:	d118      	bne.n	8002aa6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002aa4:	e13e      	b.n	8002d24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d113      	bne.n	8002ad8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e115      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	f040 808a 	bne.w	8002bf8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aea:	d137      	bne.n	8002b5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b0a:	d113      	bne.n	8002b34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	e0e7      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	623b      	str	r3, [r7, #32]
 8002b48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e0d3      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d02e      	beq.n	8002bc0 <I2C_Master_ADDR+0x1b2>
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d02b      	beq.n	8002bc0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d102      	bne.n	8002b74 <I2C_Master_ADDR+0x166>
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d125      	bne.n	8002bc0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d00e      	beq.n	8002b98 <I2C_Master_ADDR+0x18a>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00b      	beq.n	8002b98 <I2C_Master_ADDR+0x18a>
 8002b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b82:	2b10      	cmp	r3, #16
 8002b84:	d008      	beq.n	8002b98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	e007      	b.n	8002ba8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ba6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	e0a1      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e085      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d14d      	bne.n	8002c9e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d016      	beq.n	8002c36 <I2C_Master_ADDR+0x228>
 8002c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d013      	beq.n	8002c36 <I2C_Master_ADDR+0x228>
 8002c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d010      	beq.n	8002c36 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c22:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e007      	b.n	8002c46 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c44:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c54:	d117      	bne.n	8002c86 <I2C_Master_ADDR+0x278>
 8002c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c58:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c5c:	d00b      	beq.n	8002c76 <I2C_Master_ADDR+0x268>
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d008      	beq.n	8002c76 <I2C_Master_ADDR+0x268>
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d005      	beq.n	8002c76 <I2C_Master_ADDR+0x268>
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d002      	beq.n	8002c76 <I2C_Master_ADDR+0x268>
 8002c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d107      	bne.n	8002c86 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	e032      	b.n	8002d04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002cac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cbc:	d117      	bne.n	8002cee <I2C_Master_ADDR+0x2e0>
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cc4:	d00b      	beq.n	8002cde <I2C_Master_ADDR+0x2d0>
 8002cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d008      	beq.n	8002cde <I2C_Master_ADDR+0x2d0>
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d005      	beq.n	8002cde <I2C_Master_ADDR+0x2d0>
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	2b10      	cmp	r3, #16
 8002cd6:	d002      	beq.n	8002cde <I2C_Master_ADDR+0x2d0>
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cda:	2b20      	cmp	r3, #32
 8002cdc:	d107      	bne.n	8002cee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002cec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002d0a:	e00b      	b.n	8002d24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]
}
 8002d22:	e7ff      	b.n	8002d24 <I2C_Master_ADDR+0x316>
 8002d24:	bf00      	nop
 8002d26:	3744      	adds	r7, #68	@ 0x44
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d02b      	beq.n	8002da2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d114      	bne.n	8002da2 <I2C_SlaveTransmit_TXE+0x72>
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b29      	cmp	r3, #41	@ 0x29
 8002d7c:	d111      	bne.n	8002da2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2221      	movs	r2, #33	@ 0x21
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2228      	movs	r2, #40	@ 0x28
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff f9e3 	bl	8002168 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002da2:	bf00      	nop
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d011      	beq.n	8002de0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dfa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02c      	beq.n	8002e60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d114      	bne.n	8002e60 <I2C_SlaveReceive_RXNE+0x74>
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e3a:	d111      	bne.n	8002e60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2222      	movs	r2, #34	@ 0x22
 8002e50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2228      	movs	r2, #40	@ 0x28
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fd46 	bl	80008ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e60:	bf00      	nop
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d012      	beq.n	8002ea0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ec6:	2b28      	cmp	r3, #40	@ 0x28
 8002ec8:	d127      	bne.n	8002f1a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ed8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	09db      	lsrs	r3, r3, #7
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	81bb      	strh	r3, [r7, #12]
 8002efc:	e002      	b.n	8002f04 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002f0c:	89ba      	ldrh	r2, [r7, #12]
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	4619      	mov	r1, r3
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff f932 	bl	800217c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f18:	e00e      	b.n	8002f38 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002f38:	bf00      	nop
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f9c:	d172      	bne.n	8003084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b22      	cmp	r3, #34	@ 0x22
 8002fa2:	d002      	beq.n	8002faa <I2C_Slave_STOPF+0x6a>
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fa8:	d135      	bne.n	8003016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f043 0204 	orr.w	r2, r3, #4
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fe f8e1 	bl	80011aa <HAL_DMA_GetState>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d049      	beq.n	8003082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff2:	4a69      	ldr	r2, [pc, #420]	@ (8003198 <I2C_Slave_STOPF+0x258>)
 8002ff4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe f8b3 	bl	8001166 <HAL_DMA_Abort_IT>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d03d      	beq.n	8003082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003010:	4610      	mov	r0, r2
 8003012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003014:	e035      	b.n	8003082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	f043 0204 	orr.w	r2, r3, #4
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe f8ab 	bl	80011aa <HAL_DMA_GetState>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d014      	beq.n	8003084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	4a4e      	ldr	r2, [pc, #312]	@ (8003198 <I2C_Slave_STOPF+0x258>)
 8003060:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f87d 	bl	8001166 <HAL_DMA_Abort_IT>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d008      	beq.n	8003084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800307c:	4610      	mov	r0, r2
 800307e:	4798      	blx	r3
 8003080:	e000      	b.n	8003084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03e      	beq.n	800310c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b04      	cmp	r3, #4
 800309a:	d112      	bne.n	80030c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29a      	uxth	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030cc:	2b40      	cmp	r3, #64	@ 0x40
 80030ce:	d112      	bne.n	80030f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	691a      	ldr	r2, [r3, #16]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0204 	orr.w	r2, r3, #4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8b7 	bl	8003288 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800311a:	e039      	b.n	8003190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800311c:	7bfb      	ldrb	r3, [r7, #15]
 800311e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003120:	d109      	bne.n	8003136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2228      	movs	r2, #40	@ 0x28
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fbdb 	bl	80008ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b28      	cmp	r3, #40	@ 0x28
 8003140:	d111      	bne.n	8003166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <I2C_Slave_STOPF+0x25c>)
 8003146:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff f81a 	bl	8002198 <HAL_I2C_ListenCpltCallback>
}
 8003164:	e014      	b.n	8003190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	2b22      	cmp	r3, #34	@ 0x22
 800316c:	d002      	beq.n	8003174 <I2C_Slave_STOPF+0x234>
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b22      	cmp	r3, #34	@ 0x22
 8003172:	d10d      	bne.n	8003190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2220      	movs	r2, #32
 800317e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fbae 	bl	80008ec <HAL_I2C_SlaveRxCpltCallback>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	080034ed 	.word	0x080034ed
 800319c:	ffff0000 	.word	0xffff0000

080031a0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d002      	beq.n	80031c2 <I2C_Slave_AF+0x22>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d129      	bne.n	8003216 <I2C_Slave_AF+0x76>
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b28      	cmp	r3, #40	@ 0x28
 80031c6:	d126      	bne.n	8003216 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a2e      	ldr	r2, [pc, #184]	@ (8003284 <I2C_Slave_AF+0xe4>)
 80031cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80031dc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031e6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe ffc2 	bl	8002198 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003214:	e031      	b.n	800327a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b21      	cmp	r3, #33	@ 0x21
 800321a:	d129      	bne.n	8003270 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <I2C_Slave_AF+0xe4>)
 8003220:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2221      	movs	r2, #33	@ 0x21
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003246:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003250:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003260:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7fe fbc5 	bl	80019f2 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7fe ff7d 	bl	8002168 <HAL_I2C_SlaveTxCpltCallback>
}
 800326e:	e004      	b.n	800327a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	ffff0000 	.word	0xffff0000

08003288 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003296:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800329e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80032a0:	7bbb      	ldrb	r3, [r7, #14]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d002      	beq.n	80032ac <I2C_ITError+0x24>
 80032a6:	7bbb      	ldrb	r3, [r7, #14]
 80032a8:	2b40      	cmp	r3, #64	@ 0x40
 80032aa:	d10a      	bne.n	80032c2 <I2C_ITError+0x3a>
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	2b22      	cmp	r3, #34	@ 0x22
 80032b0:	d107      	bne.n	80032c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
 80032c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032c8:	2b28      	cmp	r3, #40	@ 0x28
 80032ca:	d107      	bne.n	80032dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2228      	movs	r2, #40	@ 0x28
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032da:	e015      	b.n	8003308 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032ea:	d00a      	beq.n	8003302 <I2C_ITError+0x7a>
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
 80032ee:	2b60      	cmp	r3, #96	@ 0x60
 80032f0:	d007      	beq.n	8003302 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003312:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003316:	d162      	bne.n	80033de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003326:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800332c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d020      	beq.n	8003378 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800333a:	4a6a      	ldr	r2, [pc, #424]	@ (80034e4 <I2C_ITError+0x25c>)
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd ff0f 	bl	8001166 <HAL_DMA_Abort_IT>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8089 	beq.w	8003462 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0201 	bic.w	r2, r2, #1
 800335e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800336c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003372:	4610      	mov	r0, r2
 8003374:	4798      	blx	r3
 8003376:	e074      	b.n	8003462 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800337c:	4a59      	ldr	r2, [pc, #356]	@ (80034e4 <I2C_ITError+0x25c>)
 800337e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd feee 	bl	8001166 <HAL_DMA_Abort_IT>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d068      	beq.n	8003462 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b40      	cmp	r3, #64	@ 0x40
 800339c:	d10b      	bne.n	80033b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b0:	1c5a      	adds	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0201 	bic.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033d8:	4610      	mov	r0, r2
 80033da:	4798      	blx	r3
 80033dc:	e041      	b.n	8003462 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b60      	cmp	r3, #96	@ 0x60
 80033e8:	d125      	bne.n	8003436 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003402:	2b40      	cmp	r3, #64	@ 0x40
 8003404:	d10b      	bne.n	800341e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fe fed0 	bl	80021d4 <HAL_I2C_AbortCpltCallback>
 8003434:	e015      	b.n	8003462 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d10b      	bne.n	800345c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	691a      	ldr	r2, [r3, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fd fa67 	bl	8000930 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10e      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003482:	2b00      	cmp	r3, #0
 8003484:	d104      	bne.n	8003490 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800349e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d113      	bne.n	80034dc <I2C_ITError+0x254>
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b28      	cmp	r3, #40	@ 0x28
 80034b8:	d110      	bne.n	80034dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a0a      	ldr	r2, [pc, #40]	@ (80034e8 <I2C_ITError+0x260>)
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fe5e 	bl	8002198 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034dc:	bf00      	nop
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	080034ed 	.word	0x080034ed
 80034e8:	ffff0000 	.word	0xffff0000

080034ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003506:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <I2C_DMAAbort+0x148>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	4a4a      	ldr	r2, [pc, #296]	@ (8003638 <I2C_DMAAbort+0x14c>)
 800350e:	fba2 2303 	umull	r2, r3, r2, r3
 8003512:	0a1a      	lsrs	r2, r3, #8
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00da      	lsls	r2, r3, #3
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003532:	e00a      	b.n	800354a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	3b01      	subs	r3, #1
 8003538:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003548:	d0ea      	beq.n	8003520 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003556:	2200      	movs	r2, #0
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003578:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800358c:	2200      	movs	r2, #0
 800358e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	2200      	movs	r2, #0
 800359e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0201 	bic.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b60      	cmp	r3, #96	@ 0x60
 80035ba:	d10e      	bne.n	80035da <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7fe fdfe 	bl	80021d4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035d8:	e027      	b.n	800362a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80035e0:	2b28      	cmp	r3, #40	@ 0x28
 80035e2:	d117      	bne.n	8003614 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003602:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2200      	movs	r2, #0
 8003608:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2228      	movs	r2, #40	@ 0x28
 800360e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003612:	e007      	b.n	8003624 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f7fd f983 	bl	8000930 <HAL_I2C_ErrorCallback>
}
 800362a:	bf00      	nop
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000000 	.word	0x20000000
 8003638:	14f8b589 	.word	0x14f8b589

0800363c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800364c:	e048      	b.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d044      	beq.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fd fc13 	bl	8000e80 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d139      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	0c1b      	lsrs	r3, r3, #16
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	43da      	mvns	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4013      	ands	r3, r2
 8003682:	b29b      	uxth	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	e00c      	b.n	80036ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	43da      	mvns	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	4013      	ands	r3, r2
 800369e:	b29b      	uxth	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d116      	bne.n	80036e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e023      	b.n	8003728 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d10d      	bne.n	8003706 <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	43da      	mvns	r2, r3
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	4013      	ands	r3, r2
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	bf0c      	ite	eq
 80036fc:	2301      	moveq	r3, #1
 80036fe:	2300      	movne	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	e00c      	b.n	8003720 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	43da      	mvns	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4013      	ands	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	429a      	cmp	r2, r3
 8003724:	d093      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	e030      	b.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8c9 	bl	80038d6 <I2C_IsAcknowledgeFailed>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e030      	b.n	80037b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fd fb97 	bl	8000e80 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11d      	bne.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b10      	cmp	r3, #16
 8003770:	d016      	beq.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	f043 0220 	orr.w	r2, r3, #32
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e007      	b.n	80037b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d1c7      	bne.n	800373e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80037c4:	4b13      	ldr	r3, [pc, #76]	@ (8003814 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	08db      	lsrs	r3, r3, #3
 80037ca:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80037cc:	fba2 2303 	umull	r2, r3, r2, r3
 80037d0:	0a1a      	lsrs	r2, r3, #8
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	3b01      	subs	r3, #1
 80037de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e008      	b.n	8003808 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003804:	d0e9      	beq.n	80037da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	20000000 	.word	0x20000000
 8003818:	14f8b589 	.word	0x14f8b589

0800381c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003828:	e049      	b.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d119      	bne.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e030      	b.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386c:	f7fd fb08 	bl	8000e80 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d11d      	bne.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d016      	beq.n	80038be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e007      	b.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d1ae      	bne.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ec:	d11b      	bne.n	8003926 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003944:	d103      	bne.n	800394e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800394c:	e007      	b.n	800395e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003956:	d102      	bne.n	800395e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2208      	movs	r2, #8
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
	...

0800396c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cc      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003980:	4b68      	ldr	r3, [pc, #416]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d90c      	bls.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b65      	ldr	r3, [pc, #404]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b63      	ldr	r3, [pc, #396]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0b8      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d020      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4b59      	ldr	r3, [pc, #356]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	4a58      	ldr	r2, [pc, #352]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d8:	4b53      	ldr	r3, [pc, #332]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	4a52      	ldr	r2, [pc, #328]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e4:	4b50      	ldr	r3, [pc, #320]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	494d      	ldr	r1, [pc, #308]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d044      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0a:	4b47      	ldr	r3, [pc, #284]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d119      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e07f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a26:	2b03      	cmp	r3, #3
 8003a28:	d107      	bne.n	8003a3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e06f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e067      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 0203 	bic.w	r2, r3, #3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4934      	ldr	r1, [pc, #208]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a5c:	f7fd fa10 	bl	8000e80 <HAL_GetTick>
 8003a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a64:	f7fd fa0c 	bl	8000e80 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e04f      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 020c 	and.w	r2, r3, #12
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d1eb      	bne.n	8003a64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a8c:	4b25      	ldr	r3, [pc, #148]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	683a      	ldr	r2, [r7, #0]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d20c      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9a:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b20      	ldr	r3, [pc, #128]	@ (8003b24 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d001      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e032      	b.n	8003b1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4916      	ldr	r1, [pc, #88]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ade:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	490e      	ldr	r1, [pc, #56]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003af2:	f000 f855 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003af6:	4602      	mov	r2, r0
 8003af8:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <HAL_RCC_ClockConfig+0x1bc>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	490a      	ldr	r1, [pc, #40]	@ (8003b2c <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	5ccb      	ldrb	r3, [r1, r3]
 8003b06:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0a:	4a09      	ldr	r2, [pc, #36]	@ (8003b30 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_RCC_ClockConfig+0x1c8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd f970 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023c00 	.word	0x40023c00
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	08005d14 	.word	0x08005d14
 8003b30:	20000000 	.word	0x20000000
 8003b34:	20000004 	.word	0x20000004

08003b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b3c:	4b03      	ldr	r3, [pc, #12]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000000 	.word	0x20000000

08003b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b54:	f7ff fff0 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	0a9b      	lsrs	r3, r3, #10
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	4903      	ldr	r1, [pc, #12]	@ (8003b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b66:	5ccb      	ldrb	r3, [r1, r3]
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40023800 	.word	0x40023800
 8003b74:	08005d24 	.word	0x08005d24

08003b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b7c:	f7ff ffdc 	bl	8003b38 <HAL_RCC_GetHCLKFreq>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	0b5b      	lsrs	r3, r3, #13
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8e:	5ccb      	ldrb	r3, [r1, r3]
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	08005d24 	.word	0x08005d24

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0ae      	sub	sp, #184	@ 0xb8
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc6:	4bcb      	ldr	r3, [pc, #812]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	f200 8206 	bhi.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x440>
 8003bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003fe1 	.word	0x08003fe1
 8003be4:	08003fe1 	.word	0x08003fe1
 8003be8:	08003fe1 	.word	0x08003fe1
 8003bec:	08003c19 	.word	0x08003c19
 8003bf0:	08003fe1 	.word	0x08003fe1
 8003bf4:	08003fe1 	.word	0x08003fe1
 8003bf8:	08003fe1 	.word	0x08003fe1
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003fe1 	.word	0x08003fe1
 8003c04:	08003fe1 	.word	0x08003fe1
 8003c08:	08003fe1 	.word	0x08003fe1
 8003c0c:	08003e11 	.word	0x08003e11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4bb9      	ldr	r3, [pc, #740]	@ (8003ef8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c16:	e1e7      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c18:	4bb8      	ldr	r3, [pc, #736]	@ (8003efc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c1e:	e1e3      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c20:	4bb4      	ldr	r3, [pc, #720]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c2c:	4bb1      	ldr	r3, [pc, #708]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d071      	beq.n	8003d1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c38:	4bae      	ldr	r3, [pc, #696]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c5e:	4622      	mov	r2, r4
 8003c60:	462b      	mov	r3, r5
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	0159      	lsls	r1, r3, #5
 8003c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c70:	0150      	lsls	r0, r2, #5
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4621      	mov	r1, r4
 8003c78:	1a51      	subs	r1, r2, r1
 8003c7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003c90:	4649      	mov	r1, r9
 8003c92:	018b      	lsls	r3, r1, #6
 8003c94:	4641      	mov	r1, r8
 8003c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	018a      	lsls	r2, r1, #6
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	1a51      	subs	r1, r2, r1
 8003ca2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003cb8:	4649      	mov	r1, r9
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4622      	mov	r2, r4
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cd2:	462b      	mov	r3, r5
 8003cd4:	460a      	mov	r2, r1
 8003cd6:	eb42 0303 	adc.w	r3, r2, r3
 8003cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ce8:	4629      	mov	r1, r5
 8003cea:	024b      	lsls	r3, r1, #9
 8003cec:	4621      	mov	r1, r4
 8003cee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	024a      	lsls	r2, r1, #9
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003d0c:	f7fc fad0 	bl	80002b0 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1a:	e067      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1c:	4b75      	ldr	r3, [pc, #468]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	099b      	lsrs	r3, r3, #6
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d36:	2300      	movs	r3, #0
 8003d38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d50:	0150      	lsls	r0, r2, #5
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4621      	mov	r1, r4
 8003d58:	1a51      	subs	r1, r2, r1
 8003d5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003d70:	4649      	mov	r1, r9
 8003d72:	018b      	lsls	r3, r1, #6
 8003d74:	4641      	mov	r1, r8
 8003d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7a:	4641      	mov	r1, r8
 8003d7c:	018a      	lsls	r2, r1, #6
 8003d7e:	4641      	mov	r1, r8
 8003d80:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d84:	4649      	mov	r1, r9
 8003d86:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d9e:	4692      	mov	sl, r2
 8003da0:	469b      	mov	fp, r3
 8003da2:	4623      	mov	r3, r4
 8003da4:	eb1a 0303 	adds.w	r3, sl, r3
 8003da8:	623b      	str	r3, [r7, #32]
 8003daa:	462b      	mov	r3, r5
 8003dac:	eb4b 0303 	adc.w	r3, fp, r3
 8003db0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	028b      	lsls	r3, r1, #10
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc8:	4621      	mov	r1, r4
 8003dca:	028a      	lsls	r2, r1, #10
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003dde:	f7fc fa67 	bl	80002b0 <__aeabi_uldivmod>
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	4613      	mov	r3, r2
 8003de8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dec:	4b41      	ldr	r3, [pc, #260]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0c1b      	lsrs	r3, r3, #16
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	3301      	adds	r3, #1
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003dfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e0e:	e0eb      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e10:	4b38      	ldr	r3, [pc, #224]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d06b      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e28:	4b32      	ldr	r3, [pc, #200]	@ (8003ef4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	2200      	movs	r2, #0
 8003e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003e44:	4622      	mov	r2, r4
 8003e46:	462b      	mov	r3, r5
 8003e48:	f04f 0000 	mov.w	r0, #0
 8003e4c:	f04f 0100 	mov.w	r1, #0
 8003e50:	0159      	lsls	r1, r3, #5
 8003e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e56:	0150      	lsls	r0, r2, #5
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	1a51      	subs	r1, r2, r1
 8003e60:	61b9      	str	r1, [r7, #24]
 8003e62:	4629      	mov	r1, r5
 8003e64:	eb63 0301 	sbc.w	r3, r3, r1
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	f04f 0200 	mov.w	r2, #0
 8003e6e:	f04f 0300 	mov.w	r3, #0
 8003e72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003e76:	4659      	mov	r1, fp
 8003e78:	018b      	lsls	r3, r1, #6
 8003e7a:	4651      	mov	r1, sl
 8003e7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e80:	4651      	mov	r1, sl
 8003e82:	018a      	lsls	r2, r1, #6
 8003e84:	4651      	mov	r1, sl
 8003e86:	ebb2 0801 	subs.w	r8, r2, r1
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	eb63 0901 	sbc.w	r9, r3, r1
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ea0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea4:	4690      	mov	r8, r2
 8003ea6:	4699      	mov	r9, r3
 8003ea8:	4623      	mov	r3, r4
 8003eaa:	eb18 0303 	adds.w	r3, r8, r3
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	eb49 0303 	adc.w	r3, r9, r3
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	024b      	lsls	r3, r1, #9
 8003ec8:	4621      	mov	r1, r4
 8003eca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ece:	4621      	mov	r1, r4
 8003ed0:	024a      	lsls	r2, r1, #9
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003eda:	2200      	movs	r2, #0
 8003edc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ede:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ee0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ee4:	f7fc f9e4 	bl	80002b0 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4613      	mov	r3, r2
 8003eee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ef2:	e065      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x420>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	00f42400 	.word	0x00f42400
 8003efc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f00:	4b3d      	ldr	r3, [pc, #244]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	2200      	movs	r2, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f12:	2300      	movs	r3, #0
 8003f14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003f1a:	4642      	mov	r2, r8
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	f04f 0000 	mov.w	r0, #0
 8003f22:	f04f 0100 	mov.w	r1, #0
 8003f26:	0159      	lsls	r1, r3, #5
 8003f28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f2c:	0150      	lsls	r0, r2, #5
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4641      	mov	r1, r8
 8003f34:	1a51      	subs	r1, r2, r1
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	4649      	mov	r1, r9
 8003f3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	f04f 0200 	mov.w	r2, #0
 8003f44:	f04f 0300 	mov.w	r3, #0
 8003f48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003f4c:	4659      	mov	r1, fp
 8003f4e:	018b      	lsls	r3, r1, #6
 8003f50:	4651      	mov	r1, sl
 8003f52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f56:	4651      	mov	r1, sl
 8003f58:	018a      	lsls	r2, r1, #6
 8003f5a:	4651      	mov	r1, sl
 8003f5c:	1a54      	subs	r4, r2, r1
 8003f5e:	4659      	mov	r1, fp
 8003f60:	eb63 0501 	sbc.w	r5, r3, r1
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	00eb      	lsls	r3, r5, #3
 8003f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f72:	00e2      	lsls	r2, r4, #3
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	4643      	mov	r3, r8
 8003f7a:	18e3      	adds	r3, r4, r3
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f92:	4629      	mov	r1, r5
 8003f94:	028b      	lsls	r3, r1, #10
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	028a      	lsls	r2, r1, #10
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fa8:	2200      	movs	r2, #0
 8003faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fb2:	f7fc f97d 	bl	80002b0 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4613      	mov	r3, r2
 8003fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	0f1b      	lsrs	r3, r3, #28
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003fce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fde:	e003      	b.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_GetSysClockFreq+0x45c>)
 8003fe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003fe6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	37b8      	adds	r7, #184	@ 0xb8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00f42400 	.word	0x00f42400

08004000 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e28d      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8083 	beq.w	8004126 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004020:	4b94      	ldr	r3, [pc, #592]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b04      	cmp	r3, #4
 800402a:	d019      	beq.n	8004060 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800402c:	4b91      	ldr	r3, [pc, #580]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 030c 	and.w	r3, r3, #12
        || \
 8004034:	2b08      	cmp	r3, #8
 8004036:	d106      	bne.n	8004046 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004038:	4b8e      	ldr	r3, [pc, #568]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004044:	d00c      	beq.n	8004060 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	4b8b      	ldr	r3, [pc, #556]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800404e:	2b0c      	cmp	r3, #12
 8004050:	d112      	bne.n	8004078 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004052:	4b88      	ldr	r3, [pc, #544]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405e:	d10b      	bne.n	8004078 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	4b84      	ldr	r3, [pc, #528]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05b      	beq.n	8004124 <HAL_RCC_OscConfig+0x124>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d157      	bne.n	8004124 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e25a      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004080:	d106      	bne.n	8004090 <HAL_RCC_OscConfig+0x90>
 8004082:	4b7c      	ldr	r3, [pc, #496]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a7b      	ldr	r2, [pc, #492]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e01d      	b.n	80040cc <HAL_RCC_OscConfig+0xcc>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0xb4>
 800409a:	4b76      	ldr	r3, [pc, #472]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a75      	ldr	r2, [pc, #468]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b73      	ldr	r3, [pc, #460]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a72      	ldr	r2, [pc, #456]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0xcc>
 80040b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b6c      	ldr	r3, [pc, #432]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a6b      	ldr	r2, [pc, #428]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d4:	f7fc fed4 	bl	8000e80 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fc fed0 	bl	8000e80 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	@ 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e21f      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b61      	ldr	r3, [pc, #388]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0xdc>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fc fec0 	bl	8000e80 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fc febc 	bl	8000e80 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	@ 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e20b      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	4b57      	ldr	r3, [pc, #348]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x104>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d06f      	beq.n	8004212 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004132:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b00      	cmp	r3, #0
 800413c:	d017      	beq.n	800416e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800413e:	4b4d      	ldr	r3, [pc, #308]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
        || \
 8004146:	2b08      	cmp	r3, #8
 8004148:	d105      	bne.n	8004156 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00b      	beq.n	800416e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d11c      	bne.n	800419c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004162:	4b44      	ldr	r3, [pc, #272]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d116      	bne.n	800419c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800416e:	4b41      	ldr	r3, [pc, #260]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_RCC_OscConfig+0x186>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d001      	beq.n	8004186 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e1d3      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004186:	4b3b      	ldr	r3, [pc, #236]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4937      	ldr	r1, [pc, #220]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419a:	e03a      	b.n	8004212 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d020      	beq.n	80041e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a4:	4b34      	ldr	r3, [pc, #208]	@ (8004278 <HAL_RCC_OscConfig+0x278>)
 80041a6:	2201      	movs	r2, #1
 80041a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041aa:	f7fc fe69 	bl	8000e80 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b2:	f7fc fe65 	bl	8000e80 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e1b4      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d0:	4b28      	ldr	r3, [pc, #160]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4925      	ldr	r1, [pc, #148]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	600b      	str	r3, [r1, #0]
 80041e4:	e015      	b.n	8004212 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041e6:	4b24      	ldr	r3, [pc, #144]	@ (8004278 <HAL_RCC_OscConfig+0x278>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fc fe48 	bl	8000e80 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f4:	f7fc fe44 	bl	8000e80 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e193      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b00      	cmp	r3, #0
 800421c:	d036      	beq.n	800428c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_RCC_OscConfig+0x27c>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422c:	f7fc fe28 	bl	8000e80 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004234:	f7fc fe24 	bl	8000e80 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e173      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004246:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_OscConfig+0x274>)
 8004248:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x234>
 8004252:	e01b      	b.n	800428c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004254:	4b09      	ldr	r3, [pc, #36]	@ (800427c <HAL_RCC_OscConfig+0x27c>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425a:	f7fc fe11 	bl	8000e80 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	e00e      	b.n	8004280 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004262:	f7fc fe0d 	bl	8000e80 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b02      	cmp	r3, #2
 800426e:	d907      	bls.n	8004280 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	e15c      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
 8004274:	40023800 	.word	0x40023800
 8004278:	42470000 	.word	0x42470000
 800427c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004280:	4b8a      	ldr	r3, [pc, #552]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ea      	bne.n	8004262 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	f000 8097 	beq.w	80043c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800429e:	4b83      	ldr	r3, [pc, #524]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	4b7f      	ldr	r3, [pc, #508]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	4a7e      	ldr	r2, [pc, #504]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ba:	4b7c      	ldr	r3, [pc, #496]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	60bb      	str	r3, [r7, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042c6:	2301      	movs	r3, #1
 80042c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ca:	4b79      	ldr	r3, [pc, #484]	@ (80044b0 <HAL_RCC_OscConfig+0x4b0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d118      	bne.n	8004308 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d6:	4b76      	ldr	r3, [pc, #472]	@ (80044b0 <HAL_RCC_OscConfig+0x4b0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a75      	ldr	r2, [pc, #468]	@ (80044b0 <HAL_RCC_OscConfig+0x4b0>)
 80042dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e2:	f7fc fdcd 	bl	8000e80 <HAL_GetTick>
 80042e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fc fdc9 	bl	8000e80 <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e118      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b6c      	ldr	r3, [pc, #432]	@ (80044b0 <HAL_RCC_OscConfig+0x4b0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0f0      	beq.n	80042ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d106      	bne.n	800431e <HAL_RCC_OscConfig+0x31e>
 8004310:	4b66      	ldr	r3, [pc, #408]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004314:	4a65      	ldr	r2, [pc, #404]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004316:	f043 0301 	orr.w	r3, r3, #1
 800431a:	6713      	str	r3, [r2, #112]	@ 0x70
 800431c:	e01c      	b.n	8004358 <HAL_RCC_OscConfig+0x358>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2b05      	cmp	r3, #5
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x340>
 8004326:	4b61      	ldr	r3, [pc, #388]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	4a60      	ldr	r2, [pc, #384]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6713      	str	r3, [r2, #112]	@ 0x70
 8004332:	4b5e      	ldr	r3, [pc, #376]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	4a5d      	ldr	r2, [pc, #372]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004338:	f043 0301 	orr.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	@ 0x70
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0x358>
 8004340:	4b5a      	ldr	r3, [pc, #360]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004344:	4a59      	ldr	r2, [pc, #356]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	6713      	str	r3, [r2, #112]	@ 0x70
 800434c:	4b57      	ldr	r3, [pc, #348]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004350:	4a56      	ldr	r2, [pc, #344]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004352:	f023 0304 	bic.w	r3, r3, #4
 8004356:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d015      	beq.n	800438c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004360:	f7fc fd8e 	bl	8000e80 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	e00a      	b.n	800437e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004368:	f7fc fd8a 	bl	8000e80 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004376:	4293      	cmp	r3, r2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0d7      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437e:	4b4b      	ldr	r3, [pc, #300]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d0ee      	beq.n	8004368 <HAL_RCC_OscConfig+0x368>
 800438a:	e014      	b.n	80043b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438c:	f7fc fd78 	bl	8000e80 <HAL_GetTick>
 8004390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004394:	f7fc fd74 	bl	8000e80 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0c1      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043aa:	4b40      	ldr	r3, [pc, #256]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ee      	bne.n	8004394 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043b6:	7dfb      	ldrb	r3, [r7, #23]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043bc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c0:	4a3a      	ldr	r2, [pc, #232]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80ad 	beq.w	800452c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d2:	4b36      	ldr	r3, [pc, #216]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d060      	beq.n	80044a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d145      	bne.n	8004472 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e6:	4b33      	ldr	r3, [pc, #204]	@ (80044b4 <HAL_RCC_OscConfig+0x4b4>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fc fd48 	bl	8000e80 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fc fd44 	bl	8000e80 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e093      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b29      	ldr	r3, [pc, #164]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	085b      	lsrs	r3, r3, #1
 800442a:	3b01      	subs	r3, #1
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443c:	071b      	lsls	r3, r3, #28
 800443e:	491b      	ldr	r1, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x4b4>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fc fd19 	bl	8000e80 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004452:	f7fc fd15 	bl	8000e80 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e064      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x452>
 8004470:	e05c      	b.n	800452c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <HAL_RCC_OscConfig+0x4b4>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fd02 	bl	8000e80 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fc fcfe 	bl	8000e80 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e04d      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <HAL_RCC_OscConfig+0x4ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x480>
 800449e:	e045      	b.n	800452c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e040      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40007000 	.word	0x40007000
 80044b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004538 <HAL_RCC_OscConfig+0x538>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d030      	beq.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d129      	bne.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d122      	bne.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d119      	bne.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d10f      	bne.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d107      	bne.n	8004528 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800

0800453c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e042      	b.n	80045d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fc faba 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2224      	movs	r2, #36	@ 0x24
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f973 	bl	800486c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691a      	ldr	r2, [r3, #16]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af02      	add	r7, sp, #8
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	603b      	str	r3, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b20      	cmp	r3, #32
 80045fa:	d175      	bne.n	80046e8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_UART_Transmit+0x2c>
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e06e      	b.n	80046ea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461a:	f7fc fc31 	bl	8000e80 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	88fa      	ldrh	r2, [r7, #6]
 800462a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004634:	d108      	bne.n	8004648 <HAL_UART_Transmit+0x6c>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e003      	b.n	8004650 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004650:	e02e      	b.n	80046b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	2180      	movs	r1, #128	@ 0x80
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f848 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e03a      	b.n	80046ea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10b      	bne.n	8004692 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	3302      	adds	r3, #2
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	e007      	b.n	80046a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	3301      	adds	r3, #1
 80046a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1cb      	bne.n	8004652 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2200      	movs	r2, #0
 80046c2:	2140      	movs	r1, #64	@ 0x40
 80046c4:	68f8      	ldr	r0, [r7, #12]
 80046c6:	f000 f814 	bl	80046f2 <UART_WaitOnFlagUntilTimeout>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e006      	b.n	80046ea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	e000      	b.n	80046ea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046e8:	2302      	movs	r3, #2
  }
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3720      	adds	r7, #32
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	60b9      	str	r1, [r7, #8]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	4613      	mov	r3, r2
 8004700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004702:	e03b      	b.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470a:	d037      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fc fbb8 	bl	8000e80 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	429a      	cmp	r2, r3
 800471a:	d302      	bcc.n	8004722 <UART_WaitOnFlagUntilTimeout+0x30>
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e03a      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d023      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b80      	cmp	r3, #128	@ 0x80
 8004738:	d020      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d01d      	beq.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b08      	cmp	r3, #8
 800474c:	d116      	bne.n	800477c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f81d 	bl	80047a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2208      	movs	r2, #8
 800476e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e00f      	b.n	800479c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	4013      	ands	r3, r2
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	429a      	cmp	r2, r3
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	429a      	cmp	r2, r3
 8004798:	d0b4      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3718      	adds	r7, #24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b095      	sub	sp, #84	@ 0x54
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	330c      	adds	r3, #12
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047cc:	643a      	str	r2, [r7, #64]	@ 0x40
 80047ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e5      	bne.n	80047ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	2b01      	cmp	r3, #1
 800481a:	d119      	bne.n	8004850 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	330c      	adds	r3, #12
 8004822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e853 3f00 	ldrex	r3, [r3]
 800482a:	60bb      	str	r3, [r7, #8]
   return(result);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f023 0310 	bic.w	r3, r3, #16
 8004832:	647b      	str	r3, [r7, #68]	@ 0x44
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483c:	61ba      	str	r2, [r7, #24]
 800483e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	e841 2300 	strex	r3, r2, [r1]
 8004848:	613b      	str	r3, [r7, #16]
   return(result);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e5      	bne.n	800481c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800485e:	bf00      	nop
 8004860:	3754      	adds	r7, #84	@ 0x54
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800486c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004870:	b0c0      	sub	sp, #256	@ 0x100
 8004872:	af00      	add	r7, sp, #0
 8004874:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	68d9      	ldr	r1, [r3, #12]
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	ea40 0301 	orr.w	r3, r0, r1
 8004894:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048c4:	f021 010c 	bic.w	r1, r1, #12
 80048c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048d2:	430b      	orrs	r3, r1
 80048d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e6:	6999      	ldr	r1, [r3, #24]
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	ea40 0301 	orr.w	r3, r0, r1
 80048f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004b38 <UART_SetConfig+0x2cc>)
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d005      	beq.n	800490c <UART_SetConfig+0xa0>
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b8d      	ldr	r3, [pc, #564]	@ (8004b3c <UART_SetConfig+0x2d0>)
 8004908:	429a      	cmp	r2, r3
 800490a:	d104      	bne.n	8004916 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7ff f934 	bl	8003b78 <HAL_RCC_GetPCLK2Freq>
 8004910:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004914:	e003      	b.n	800491e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004916:	f7ff f91b 	bl	8003b50 <HAL_RCC_GetPCLK1Freq>
 800491a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004922:	69db      	ldr	r3, [r3, #28]
 8004924:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004928:	f040 810c 	bne.w	8004b44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800492c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004936:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800493a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800493e:	4622      	mov	r2, r4
 8004940:	462b      	mov	r3, r5
 8004942:	1891      	adds	r1, r2, r2
 8004944:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004946:	415b      	adcs	r3, r3
 8004948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800494a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800494e:	4621      	mov	r1, r4
 8004950:	eb12 0801 	adds.w	r8, r2, r1
 8004954:	4629      	mov	r1, r5
 8004956:	eb43 0901 	adc.w	r9, r3, r1
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004966:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800496a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496e:	4690      	mov	r8, r2
 8004970:	4699      	mov	r9, r3
 8004972:	4623      	mov	r3, r4
 8004974:	eb18 0303 	adds.w	r3, r8, r3
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800497c:	462b      	mov	r3, r5
 800497e:	eb49 0303 	adc.w	r3, r9, r3
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004992:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004996:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800499a:	460b      	mov	r3, r1
 800499c:	18db      	adds	r3, r3, r3
 800499e:	653b      	str	r3, [r7, #80]	@ 0x50
 80049a0:	4613      	mov	r3, r2
 80049a2:	eb42 0303 	adc.w	r3, r2, r3
 80049a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049b0:	f7fb fc7e 	bl	80002b0 <__aeabi_uldivmod>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4b61      	ldr	r3, [pc, #388]	@ (8004b40 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2302 	umull	r2, r3, r3, r2
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	011c      	lsls	r4, r3, #4
 80049c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049c6:	2200      	movs	r2, #0
 80049c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049d4:	4642      	mov	r2, r8
 80049d6:	464b      	mov	r3, r9
 80049d8:	1891      	adds	r1, r2, r2
 80049da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049dc:	415b      	adcs	r3, r3
 80049de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049e4:	4641      	mov	r1, r8
 80049e6:	eb12 0a01 	adds.w	sl, r2, r1
 80049ea:	4649      	mov	r1, r9
 80049ec:	eb43 0b01 	adc.w	fp, r3, r1
 80049f0:	f04f 0200 	mov.w	r2, #0
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a04:	4692      	mov	sl, r2
 8004a06:	469b      	mov	fp, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a12:	464b      	mov	r3, r9
 8004a14:	eb4b 0303 	adc.w	r3, fp, r3
 8004a18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a30:	460b      	mov	r3, r1
 8004a32:	18db      	adds	r3, r3, r3
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	4613      	mov	r3, r2
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a46:	f7fb fc33 	bl	80002b0 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4b3b      	ldr	r3, [pc, #236]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004a52:	fba3 2301 	umull	r2, r3, r3, r1
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2264      	movs	r2, #100	@ 0x64
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	1acb      	subs	r3, r1, r3
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a66:	4b36      	ldr	r3, [pc, #216]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004a68:	fba3 2302 	umull	r2, r3, r3, r2
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a74:	441c      	add	r4, r3
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a90:	415b      	adcs	r3, r3
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a98:	4641      	mov	r1, r8
 8004a9a:	1851      	adds	r1, r2, r1
 8004a9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	414b      	adcs	r3, r1
 8004aa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	00cb      	lsls	r3, r1, #3
 8004ab4:	4651      	mov	r1, sl
 8004ab6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aba:	4651      	mov	r1, sl
 8004abc:	00ca      	lsls	r2, r1, #3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004acc:	464b      	mov	r3, r9
 8004ace:	460a      	mov	r2, r1
 8004ad0:	eb42 0303 	adc.w	r3, r2, r3
 8004ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ae4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ae8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004aec:	460b      	mov	r3, r1
 8004aee:	18db      	adds	r3, r3, r3
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af2:	4613      	mov	r3, r2
 8004af4:	eb42 0303 	adc.w	r3, r2, r3
 8004af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004afa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004afe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b02:	f7fb fbd5 	bl	80002b0 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	2164      	movs	r1, #100	@ 0x64
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	3332      	adds	r3, #50	@ 0x32
 8004b1e:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <UART_SetConfig+0x2d4>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	f003 0207 	and.w	r2, r3, #7
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4422      	add	r2, r4
 8004b32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b34:	e106      	b.n	8004d44 <UART_SetConfig+0x4d8>
 8004b36:	bf00      	nop
 8004b38:	40011000 	.word	0x40011000
 8004b3c:	40011400 	.word	0x40011400
 8004b40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b56:	4642      	mov	r2, r8
 8004b58:	464b      	mov	r3, r9
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	6239      	str	r1, [r7, #32]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b66:	4641      	mov	r1, r8
 8004b68:	1854      	adds	r4, r2, r1
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	eb43 0501 	adc.w	r5, r3, r1
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	00eb      	lsls	r3, r5, #3
 8004b7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	4614      	mov	r4, r2
 8004b82:	461d      	mov	r5, r3
 8004b84:	4643      	mov	r3, r8
 8004b86:	18e3      	adds	r3, r4, r3
 8004b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b8c:	464b      	mov	r3, r9
 8004b8e:	eb45 0303 	adc.w	r3, r5, r3
 8004b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ba2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ba6:	f04f 0200 	mov.w	r2, #0
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	008b      	lsls	r3, r1, #2
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbc:	4621      	mov	r1, r4
 8004bbe:	008a      	lsls	r2, r1, #2
 8004bc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bc4:	f7fb fb74 	bl	80002b0 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4b60      	ldr	r3, [pc, #384]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004bce:	fba3 2302 	umull	r2, r3, r3, r2
 8004bd2:	095b      	lsrs	r3, r3, #5
 8004bd4:	011c      	lsls	r4, r3, #4
 8004bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004be0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004be4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004be8:	4642      	mov	r2, r8
 8004bea:	464b      	mov	r3, r9
 8004bec:	1891      	adds	r1, r2, r2
 8004bee:	61b9      	str	r1, [r7, #24]
 8004bf0:	415b      	adcs	r3, r3
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	1851      	adds	r1, r2, r1
 8004bfc:	6139      	str	r1, [r7, #16]
 8004bfe:	4649      	mov	r1, r9
 8004c00:	414b      	adcs	r3, r1
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c10:	4659      	mov	r1, fp
 8004c12:	00cb      	lsls	r3, r1, #3
 8004c14:	4651      	mov	r1, sl
 8004c16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c1a:	4651      	mov	r1, sl
 8004c1c:	00ca      	lsls	r2, r1, #3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	4619      	mov	r1, r3
 8004c22:	4603      	mov	r3, r0
 8004c24:	4642      	mov	r2, r8
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	460a      	mov	r2, r1
 8004c30:	eb42 0303 	adc.w	r3, r2, r3
 8004c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c50:	4649      	mov	r1, r9
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	4641      	mov	r1, r8
 8004c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5a:	4641      	mov	r1, r8
 8004c5c:	008a      	lsls	r2, r1, #2
 8004c5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c62:	f7fb fb25 	bl	80002b0 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4611      	mov	r1, r2
 8004c6c:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004c6e:	fba3 2301 	umull	r2, r3, r3, r1
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2264      	movs	r2, #100	@ 0x64
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	1acb      	subs	r3, r1, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	@ 0x32
 8004c80:	4a33      	ldr	r2, [pc, #204]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c8c:	441c      	add	r4, r3
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c96:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	60b9      	str	r1, [r7, #8]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6039      	str	r1, [r7, #0]
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cde:	464b      	mov	r3, r9
 8004ce0:	460a      	mov	r2, r1
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d00:	4649      	mov	r1, r9
 8004d02:	008b      	lsls	r3, r1, #2
 8004d04:	4641      	mov	r1, r8
 8004d06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	008a      	lsls	r2, r1, #2
 8004d0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d12:	f7fb facd 	bl	80002b0 <__aeabi_uldivmod>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	2164      	movs	r1, #100	@ 0x64
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	3332      	adds	r3, #50	@ 0x32
 8004d2e:	4a08      	ldr	r2, [pc, #32]	@ (8004d50 <UART_SetConfig+0x4e4>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4422      	add	r2, r4
 8004d42:	609a      	str	r2, [r3, #8]
}
 8004d44:	bf00      	nop
 8004d46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d50:	51eb851f 	.word	0x51eb851f

08004d54 <std>:
 8004d54:	2300      	movs	r3, #0
 8004d56:	b510      	push	{r4, lr}
 8004d58:	4604      	mov	r4, r0
 8004d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d62:	6083      	str	r3, [r0, #8]
 8004d64:	8181      	strh	r1, [r0, #12]
 8004d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8004d68:	81c2      	strh	r2, [r0, #14]
 8004d6a:	6183      	str	r3, [r0, #24]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2208      	movs	r2, #8
 8004d70:	305c      	adds	r0, #92	@ 0x5c
 8004d72:	f000 f9f9 	bl	8005168 <memset>
 8004d76:	4b0d      	ldr	r3, [pc, #52]	@ (8004dac <std+0x58>)
 8004d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <std+0x5c>)
 8004d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <std+0x60>)
 8004d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004d82:	4b0d      	ldr	r3, [pc, #52]	@ (8004db8 <std+0x64>)
 8004d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <std+0x68>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d006      	beq.n	8004d9c <std+0x48>
 8004d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004d92:	4294      	cmp	r4, r2
 8004d94:	d002      	beq.n	8004d9c <std+0x48>
 8004d96:	33d0      	adds	r3, #208	@ 0xd0
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d105      	bne.n	8004da8 <std+0x54>
 8004d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da4:	f000 ba58 	b.w	8005258 <__retarget_lock_init_recursive>
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	bf00      	nop
 8004dac:	08004fb9 	.word	0x08004fb9
 8004db0:	08004fdb 	.word	0x08004fdb
 8004db4:	08005013 	.word	0x08005013
 8004db8:	08005037 	.word	0x08005037
 8004dbc:	2000012c 	.word	0x2000012c

08004dc0 <stdio_exit_handler>:
 8004dc0:	4a02      	ldr	r2, [pc, #8]	@ (8004dcc <stdio_exit_handler+0xc>)
 8004dc2:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <stdio_exit_handler+0x10>)
 8004dc4:	4803      	ldr	r0, [pc, #12]	@ (8004dd4 <stdio_exit_handler+0x14>)
 8004dc6:	f000 b869 	b.w	8004e9c <_fwalk_sglue>
 8004dca:	bf00      	nop
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	08005af5 	.word	0x08005af5
 8004dd4:	2000001c 	.word	0x2000001c

08004dd8 <cleanup_stdio>:
 8004dd8:	6841      	ldr	r1, [r0, #4]
 8004dda:	4b0c      	ldr	r3, [pc, #48]	@ (8004e0c <cleanup_stdio+0x34>)
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	b510      	push	{r4, lr}
 8004de0:	4604      	mov	r4, r0
 8004de2:	d001      	beq.n	8004de8 <cleanup_stdio+0x10>
 8004de4:	f000 fe86 	bl	8005af4 <_fflush_r>
 8004de8:	68a1      	ldr	r1, [r4, #8]
 8004dea:	4b09      	ldr	r3, [pc, #36]	@ (8004e10 <cleanup_stdio+0x38>)
 8004dec:	4299      	cmp	r1, r3
 8004dee:	d002      	beq.n	8004df6 <cleanup_stdio+0x1e>
 8004df0:	4620      	mov	r0, r4
 8004df2:	f000 fe7f 	bl	8005af4 <_fflush_r>
 8004df6:	68e1      	ldr	r1, [r4, #12]
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <cleanup_stdio+0x3c>)
 8004dfa:	4299      	cmp	r1, r3
 8004dfc:	d004      	beq.n	8004e08 <cleanup_stdio+0x30>
 8004dfe:	4620      	mov	r0, r4
 8004e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e04:	f000 be76 	b.w	8005af4 <_fflush_r>
 8004e08:	bd10      	pop	{r4, pc}
 8004e0a:	bf00      	nop
 8004e0c:	2000012c 	.word	0x2000012c
 8004e10:	20000194 	.word	0x20000194
 8004e14:	200001fc 	.word	0x200001fc

08004e18 <global_stdio_init.part.0>:
 8004e18:	b510      	push	{r4, lr}
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <global_stdio_init.part.0+0x30>)
 8004e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8004e4c <global_stdio_init.part.0+0x34>)
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8004e50 <global_stdio_init.part.0+0x38>)
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	4620      	mov	r0, r4
 8004e24:	2200      	movs	r2, #0
 8004e26:	2104      	movs	r1, #4
 8004e28:	f7ff ff94 	bl	8004d54 <std>
 8004e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004e30:	2201      	movs	r2, #1
 8004e32:	2109      	movs	r1, #9
 8004e34:	f7ff ff8e 	bl	8004d54 <std>
 8004e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff bf86 	b.w	8004d54 <std>
 8004e48:	20000264 	.word	0x20000264
 8004e4c:	2000012c 	.word	0x2000012c
 8004e50:	08004dc1 	.word	0x08004dc1

08004e54 <__sfp_lock_acquire>:
 8004e54:	4801      	ldr	r0, [pc, #4]	@ (8004e5c <__sfp_lock_acquire+0x8>)
 8004e56:	f000 ba00 	b.w	800525a <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	2000026d 	.word	0x2000026d

08004e60 <__sfp_lock_release>:
 8004e60:	4801      	ldr	r0, [pc, #4]	@ (8004e68 <__sfp_lock_release+0x8>)
 8004e62:	f000 b9fb 	b.w	800525c <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	2000026d 	.word	0x2000026d

08004e6c <__sinit>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	f7ff fff0 	bl	8004e54 <__sfp_lock_acquire>
 8004e74:	6a23      	ldr	r3, [r4, #32]
 8004e76:	b11b      	cbz	r3, 8004e80 <__sinit+0x14>
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	f7ff bff0 	b.w	8004e60 <__sfp_lock_release>
 8004e80:	4b04      	ldr	r3, [pc, #16]	@ (8004e94 <__sinit+0x28>)
 8004e82:	6223      	str	r3, [r4, #32]
 8004e84:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <__sinit+0x2c>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f5      	bne.n	8004e78 <__sinit+0xc>
 8004e8c:	f7ff ffc4 	bl	8004e18 <global_stdio_init.part.0>
 8004e90:	e7f2      	b.n	8004e78 <__sinit+0xc>
 8004e92:	bf00      	nop
 8004e94:	08004dd9 	.word	0x08004dd9
 8004e98:	20000264 	.word	0x20000264

08004e9c <_fwalk_sglue>:
 8004e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	4688      	mov	r8, r1
 8004ea4:	4614      	mov	r4, r2
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004eac:	f1b9 0901 	subs.w	r9, r9, #1
 8004eb0:	d505      	bpl.n	8004ebe <_fwalk_sglue+0x22>
 8004eb2:	6824      	ldr	r4, [r4, #0]
 8004eb4:	2c00      	cmp	r4, #0
 8004eb6:	d1f7      	bne.n	8004ea8 <_fwalk_sglue+0xc>
 8004eb8:	4630      	mov	r0, r6
 8004eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ebe:	89ab      	ldrh	r3, [r5, #12]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d907      	bls.n	8004ed4 <_fwalk_sglue+0x38>
 8004ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <_fwalk_sglue+0x38>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4638      	mov	r0, r7
 8004ed0:	47c0      	blx	r8
 8004ed2:	4306      	orrs	r6, r0
 8004ed4:	3568      	adds	r5, #104	@ 0x68
 8004ed6:	e7e9      	b.n	8004eac <_fwalk_sglue+0x10>

08004ed8 <iprintf>:
 8004ed8:	b40f      	push	{r0, r1, r2, r3}
 8004eda:	b507      	push	{r0, r1, r2, lr}
 8004edc:	4906      	ldr	r1, [pc, #24]	@ (8004ef8 <iprintf+0x20>)
 8004ede:	ab04      	add	r3, sp, #16
 8004ee0:	6808      	ldr	r0, [r1, #0]
 8004ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee6:	6881      	ldr	r1, [r0, #8]
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	f000 fadb 	bl	80054a4 <_vfiprintf_r>
 8004eee:	b003      	add	sp, #12
 8004ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ef4:	b004      	add	sp, #16
 8004ef6:	4770      	bx	lr
 8004ef8:	20000018 	.word	0x20000018

08004efc <_puts_r>:
 8004efc:	6a03      	ldr	r3, [r0, #32]
 8004efe:	b570      	push	{r4, r5, r6, lr}
 8004f00:	6884      	ldr	r4, [r0, #8]
 8004f02:	4605      	mov	r5, r0
 8004f04:	460e      	mov	r6, r1
 8004f06:	b90b      	cbnz	r3, 8004f0c <_puts_r+0x10>
 8004f08:	f7ff ffb0 	bl	8004e6c <__sinit>
 8004f0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f0e:	07db      	lsls	r3, r3, #31
 8004f10:	d405      	bmi.n	8004f1e <_puts_r+0x22>
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	0598      	lsls	r0, r3, #22
 8004f16:	d402      	bmi.n	8004f1e <_puts_r+0x22>
 8004f18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f1a:	f000 f99e 	bl	800525a <__retarget_lock_acquire_recursive>
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	0719      	lsls	r1, r3, #28
 8004f22:	d502      	bpl.n	8004f2a <_puts_r+0x2e>
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d135      	bne.n	8004f96 <_puts_r+0x9a>
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 f8c5 	bl	80050bc <__swsetup_r>
 8004f32:	b380      	cbz	r0, 8004f96 <_puts_r+0x9a>
 8004f34:	f04f 35ff 	mov.w	r5, #4294967295
 8004f38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004f3a:	07da      	lsls	r2, r3, #31
 8004f3c:	d405      	bmi.n	8004f4a <_puts_r+0x4e>
 8004f3e:	89a3      	ldrh	r3, [r4, #12]
 8004f40:	059b      	lsls	r3, r3, #22
 8004f42:	d402      	bmi.n	8004f4a <_puts_r+0x4e>
 8004f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f46:	f000 f989 	bl	800525c <__retarget_lock_release_recursive>
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da04      	bge.n	8004f5c <_puts_r+0x60>
 8004f52:	69a2      	ldr	r2, [r4, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	dc17      	bgt.n	8004f88 <_puts_r+0x8c>
 8004f58:	290a      	cmp	r1, #10
 8004f5a:	d015      	beq.n	8004f88 <_puts_r+0x8c>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	6022      	str	r2, [r4, #0]
 8004f62:	7019      	strb	r1, [r3, #0]
 8004f64:	68a3      	ldr	r3, [r4, #8]
 8004f66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	60a3      	str	r3, [r4, #8]
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d1ed      	bne.n	8004f4e <_puts_r+0x52>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	da11      	bge.n	8004f9a <_puts_r+0x9e>
 8004f76:	4622      	mov	r2, r4
 8004f78:	210a      	movs	r1, #10
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f000 f85f 	bl	800503e <__swbuf_r>
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0d7      	beq.n	8004f34 <_puts_r+0x38>
 8004f84:	250a      	movs	r5, #10
 8004f86:	e7d7      	b.n	8004f38 <_puts_r+0x3c>
 8004f88:	4622      	mov	r2, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 f857 	bl	800503e <__swbuf_r>
 8004f90:	3001      	adds	r0, #1
 8004f92:	d1e7      	bne.n	8004f64 <_puts_r+0x68>
 8004f94:	e7ce      	b.n	8004f34 <_puts_r+0x38>
 8004f96:	3e01      	subs	r6, #1
 8004f98:	e7e4      	b.n	8004f64 <_puts_r+0x68>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	220a      	movs	r2, #10
 8004fa2:	701a      	strb	r2, [r3, #0]
 8004fa4:	e7ee      	b.n	8004f84 <_puts_r+0x88>
	...

08004fa8 <puts>:
 8004fa8:	4b02      	ldr	r3, [pc, #8]	@ (8004fb4 <puts+0xc>)
 8004faa:	4601      	mov	r1, r0
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	f7ff bfa5 	b.w	8004efc <_puts_r>
 8004fb2:	bf00      	nop
 8004fb4:	20000018 	.word	0x20000018

08004fb8 <__sread>:
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	460c      	mov	r4, r1
 8004fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc0:	f000 f8fc 	bl	80051bc <_read_r>
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	bfab      	itete	ge
 8004fc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004fca:	89a3      	ldrhlt	r3, [r4, #12]
 8004fcc:	181b      	addge	r3, r3, r0
 8004fce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004fd2:	bfac      	ite	ge
 8004fd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004fd6:	81a3      	strhlt	r3, [r4, #12]
 8004fd8:	bd10      	pop	{r4, pc}

08004fda <__swrite>:
 8004fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fde:	461f      	mov	r7, r3
 8004fe0:	898b      	ldrh	r3, [r1, #12]
 8004fe2:	05db      	lsls	r3, r3, #23
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	460c      	mov	r4, r1
 8004fe8:	4616      	mov	r6, r2
 8004fea:	d505      	bpl.n	8004ff8 <__swrite+0x1e>
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f000 f8d0 	bl	8005198 <_lseek_r>
 8004ff8:	89a3      	ldrh	r3, [r4, #12]
 8004ffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ffe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	4632      	mov	r2, r6
 8005006:	463b      	mov	r3, r7
 8005008:	4628      	mov	r0, r5
 800500a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500e:	f000 b8e7 	b.w	80051e0 <_write_r>

08005012 <__sseek>:
 8005012:	b510      	push	{r4, lr}
 8005014:	460c      	mov	r4, r1
 8005016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501a:	f000 f8bd 	bl	8005198 <_lseek_r>
 800501e:	1c43      	adds	r3, r0, #1
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	bf15      	itete	ne
 8005024:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005026:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800502a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800502e:	81a3      	strheq	r3, [r4, #12]
 8005030:	bf18      	it	ne
 8005032:	81a3      	strhne	r3, [r4, #12]
 8005034:	bd10      	pop	{r4, pc}

08005036 <__sclose>:
 8005036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800503a:	f000 b89d 	b.w	8005178 <_close_r>

0800503e <__swbuf_r>:
 800503e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005040:	460e      	mov	r6, r1
 8005042:	4614      	mov	r4, r2
 8005044:	4605      	mov	r5, r0
 8005046:	b118      	cbz	r0, 8005050 <__swbuf_r+0x12>
 8005048:	6a03      	ldr	r3, [r0, #32]
 800504a:	b90b      	cbnz	r3, 8005050 <__swbuf_r+0x12>
 800504c:	f7ff ff0e 	bl	8004e6c <__sinit>
 8005050:	69a3      	ldr	r3, [r4, #24]
 8005052:	60a3      	str	r3, [r4, #8]
 8005054:	89a3      	ldrh	r3, [r4, #12]
 8005056:	071a      	lsls	r2, r3, #28
 8005058:	d501      	bpl.n	800505e <__swbuf_r+0x20>
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	b943      	cbnz	r3, 8005070 <__swbuf_r+0x32>
 800505e:	4621      	mov	r1, r4
 8005060:	4628      	mov	r0, r5
 8005062:	f000 f82b 	bl	80050bc <__swsetup_r>
 8005066:	b118      	cbz	r0, 8005070 <__swbuf_r+0x32>
 8005068:	f04f 37ff 	mov.w	r7, #4294967295
 800506c:	4638      	mov	r0, r7
 800506e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	6922      	ldr	r2, [r4, #16]
 8005074:	1a98      	subs	r0, r3, r2
 8005076:	6963      	ldr	r3, [r4, #20]
 8005078:	b2f6      	uxtb	r6, r6
 800507a:	4283      	cmp	r3, r0
 800507c:	4637      	mov	r7, r6
 800507e:	dc05      	bgt.n	800508c <__swbuf_r+0x4e>
 8005080:	4621      	mov	r1, r4
 8005082:	4628      	mov	r0, r5
 8005084:	f000 fd36 	bl	8005af4 <_fflush_r>
 8005088:	2800      	cmp	r0, #0
 800508a:	d1ed      	bne.n	8005068 <__swbuf_r+0x2a>
 800508c:	68a3      	ldr	r3, [r4, #8]
 800508e:	3b01      	subs	r3, #1
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	701e      	strb	r6, [r3, #0]
 800509a:	6962      	ldr	r2, [r4, #20]
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	429a      	cmp	r2, r3
 80050a0:	d004      	beq.n	80050ac <__swbuf_r+0x6e>
 80050a2:	89a3      	ldrh	r3, [r4, #12]
 80050a4:	07db      	lsls	r3, r3, #31
 80050a6:	d5e1      	bpl.n	800506c <__swbuf_r+0x2e>
 80050a8:	2e0a      	cmp	r6, #10
 80050aa:	d1df      	bne.n	800506c <__swbuf_r+0x2e>
 80050ac:	4621      	mov	r1, r4
 80050ae:	4628      	mov	r0, r5
 80050b0:	f000 fd20 	bl	8005af4 <_fflush_r>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d0d9      	beq.n	800506c <__swbuf_r+0x2e>
 80050b8:	e7d6      	b.n	8005068 <__swbuf_r+0x2a>
	...

080050bc <__swsetup_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <__swsetup_r+0xa8>)
 80050c0:	4605      	mov	r5, r0
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	460c      	mov	r4, r1
 80050c6:	b118      	cbz	r0, 80050d0 <__swsetup_r+0x14>
 80050c8:	6a03      	ldr	r3, [r0, #32]
 80050ca:	b90b      	cbnz	r3, 80050d0 <__swsetup_r+0x14>
 80050cc:	f7ff fece 	bl	8004e6c <__sinit>
 80050d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050d4:	0719      	lsls	r1, r3, #28
 80050d6:	d422      	bmi.n	800511e <__swsetup_r+0x62>
 80050d8:	06da      	lsls	r2, r3, #27
 80050da:	d407      	bmi.n	80050ec <__swsetup_r+0x30>
 80050dc:	2209      	movs	r2, #9
 80050de:	602a      	str	r2, [r5, #0]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	e033      	b.n	8005154 <__swsetup_r+0x98>
 80050ec:	0758      	lsls	r0, r3, #29
 80050ee:	d512      	bpl.n	8005116 <__swsetup_r+0x5a>
 80050f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80050f2:	b141      	cbz	r1, 8005106 <__swsetup_r+0x4a>
 80050f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80050f8:	4299      	cmp	r1, r3
 80050fa:	d002      	beq.n	8005102 <__swsetup_r+0x46>
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f8af 	bl	8005260 <_free_r>
 8005102:	2300      	movs	r3, #0
 8005104:	6363      	str	r3, [r4, #52]	@ 0x34
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	2300      	movs	r3, #0
 8005110:	6063      	str	r3, [r4, #4]
 8005112:	6923      	ldr	r3, [r4, #16]
 8005114:	6023      	str	r3, [r4, #0]
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	f043 0308 	orr.w	r3, r3, #8
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	b94b      	cbnz	r3, 8005136 <__swsetup_r+0x7a>
 8005122:	89a3      	ldrh	r3, [r4, #12]
 8005124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800512c:	d003      	beq.n	8005136 <__swsetup_r+0x7a>
 800512e:	4621      	mov	r1, r4
 8005130:	4628      	mov	r0, r5
 8005132:	f000 fd2d 	bl	8005b90 <__smakebuf_r>
 8005136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513a:	f013 0201 	ands.w	r2, r3, #1
 800513e:	d00a      	beq.n	8005156 <__swsetup_r+0x9a>
 8005140:	2200      	movs	r2, #0
 8005142:	60a2      	str	r2, [r4, #8]
 8005144:	6962      	ldr	r2, [r4, #20]
 8005146:	4252      	negs	r2, r2
 8005148:	61a2      	str	r2, [r4, #24]
 800514a:	6922      	ldr	r2, [r4, #16]
 800514c:	b942      	cbnz	r2, 8005160 <__swsetup_r+0xa4>
 800514e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005152:	d1c5      	bne.n	80050e0 <__swsetup_r+0x24>
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	0799      	lsls	r1, r3, #30
 8005158:	bf58      	it	pl
 800515a:	6962      	ldrpl	r2, [r4, #20]
 800515c:	60a2      	str	r2, [r4, #8]
 800515e:	e7f4      	b.n	800514a <__swsetup_r+0x8e>
 8005160:	2000      	movs	r0, #0
 8005162:	e7f7      	b.n	8005154 <__swsetup_r+0x98>
 8005164:	20000018 	.word	0x20000018

08005168 <memset>:
 8005168:	4402      	add	r2, r0
 800516a:	4603      	mov	r3, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	d100      	bne.n	8005172 <memset+0xa>
 8005170:	4770      	bx	lr
 8005172:	f803 1b01 	strb.w	r1, [r3], #1
 8005176:	e7f9      	b.n	800516c <memset+0x4>

08005178 <_close_r>:
 8005178:	b538      	push	{r3, r4, r5, lr}
 800517a:	4d06      	ldr	r5, [pc, #24]	@ (8005194 <_close_r+0x1c>)
 800517c:	2300      	movs	r3, #0
 800517e:	4604      	mov	r4, r0
 8005180:	4608      	mov	r0, r1
 8005182:	602b      	str	r3, [r5, #0]
 8005184:	f7fb fd6f 	bl	8000c66 <_close>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_close_r+0x1a>
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	b103      	cbz	r3, 8005192 <_close_r+0x1a>
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20000268 	.word	0x20000268

08005198 <_lseek_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	4d07      	ldr	r5, [pc, #28]	@ (80051b8 <_lseek_r+0x20>)
 800519c:	4604      	mov	r4, r0
 800519e:	4608      	mov	r0, r1
 80051a0:	4611      	mov	r1, r2
 80051a2:	2200      	movs	r2, #0
 80051a4:	602a      	str	r2, [r5, #0]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f7fb fd84 	bl	8000cb4 <_lseek>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d102      	bne.n	80051b6 <_lseek_r+0x1e>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	b103      	cbz	r3, 80051b6 <_lseek_r+0x1e>
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	bd38      	pop	{r3, r4, r5, pc}
 80051b8:	20000268 	.word	0x20000268

080051bc <_read_r>:
 80051bc:	b538      	push	{r3, r4, r5, lr}
 80051be:	4d07      	ldr	r5, [pc, #28]	@ (80051dc <_read_r+0x20>)
 80051c0:	4604      	mov	r4, r0
 80051c2:	4608      	mov	r0, r1
 80051c4:	4611      	mov	r1, r2
 80051c6:	2200      	movs	r2, #0
 80051c8:	602a      	str	r2, [r5, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f7fb fd12 	bl	8000bf4 <_read>
 80051d0:	1c43      	adds	r3, r0, #1
 80051d2:	d102      	bne.n	80051da <_read_r+0x1e>
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	b103      	cbz	r3, 80051da <_read_r+0x1e>
 80051d8:	6023      	str	r3, [r4, #0]
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	20000268 	.word	0x20000268

080051e0 <_write_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	4d07      	ldr	r5, [pc, #28]	@ (8005200 <_write_r+0x20>)
 80051e4:	4604      	mov	r4, r0
 80051e6:	4608      	mov	r0, r1
 80051e8:	4611      	mov	r1, r2
 80051ea:	2200      	movs	r2, #0
 80051ec:	602a      	str	r2, [r5, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	f7fb fd1d 	bl	8000c2e <_write>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_write_r+0x1e>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_write_r+0x1e>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	20000268 	.word	0x20000268

08005204 <__errno>:
 8005204:	4b01      	ldr	r3, [pc, #4]	@ (800520c <__errno+0x8>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20000018 	.word	0x20000018

08005210 <__libc_init_array>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4d0d      	ldr	r5, [pc, #52]	@ (8005248 <__libc_init_array+0x38>)
 8005214:	4c0d      	ldr	r4, [pc, #52]	@ (800524c <__libc_init_array+0x3c>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	2600      	movs	r6, #0
 800521c:	42a6      	cmp	r6, r4
 800521e:	d109      	bne.n	8005234 <__libc_init_array+0x24>
 8005220:	4d0b      	ldr	r5, [pc, #44]	@ (8005250 <__libc_init_array+0x40>)
 8005222:	4c0c      	ldr	r4, [pc, #48]	@ (8005254 <__libc_init_array+0x44>)
 8005224:	f000 fd22 	bl	8005c6c <_init>
 8005228:	1b64      	subs	r4, r4, r5
 800522a:	10a4      	asrs	r4, r4, #2
 800522c:	2600      	movs	r6, #0
 800522e:	42a6      	cmp	r6, r4
 8005230:	d105      	bne.n	800523e <__libc_init_array+0x2e>
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	f855 3b04 	ldr.w	r3, [r5], #4
 8005238:	4798      	blx	r3
 800523a:	3601      	adds	r6, #1
 800523c:	e7ee      	b.n	800521c <__libc_init_array+0xc>
 800523e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005242:	4798      	blx	r3
 8005244:	3601      	adds	r6, #1
 8005246:	e7f2      	b.n	800522e <__libc_init_array+0x1e>
 8005248:	08005d68 	.word	0x08005d68
 800524c:	08005d68 	.word	0x08005d68
 8005250:	08005d68 	.word	0x08005d68
 8005254:	08005d6c 	.word	0x08005d6c

08005258 <__retarget_lock_init_recursive>:
 8005258:	4770      	bx	lr

0800525a <__retarget_lock_acquire_recursive>:
 800525a:	4770      	bx	lr

0800525c <__retarget_lock_release_recursive>:
 800525c:	4770      	bx	lr
	...

08005260 <_free_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4605      	mov	r5, r0
 8005264:	2900      	cmp	r1, #0
 8005266:	d041      	beq.n	80052ec <_free_r+0x8c>
 8005268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526c:	1f0c      	subs	r4, r1, #4
 800526e:	2b00      	cmp	r3, #0
 8005270:	bfb8      	it	lt
 8005272:	18e4      	addlt	r4, r4, r3
 8005274:	f000 f8e0 	bl	8005438 <__malloc_lock>
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <_free_r+0x90>)
 800527a:	6813      	ldr	r3, [r2, #0]
 800527c:	b933      	cbnz	r3, 800528c <_free_r+0x2c>
 800527e:	6063      	str	r3, [r4, #4]
 8005280:	6014      	str	r4, [r2, #0]
 8005282:	4628      	mov	r0, r5
 8005284:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005288:	f000 b8dc 	b.w	8005444 <__malloc_unlock>
 800528c:	42a3      	cmp	r3, r4
 800528e:	d908      	bls.n	80052a2 <_free_r+0x42>
 8005290:	6820      	ldr	r0, [r4, #0]
 8005292:	1821      	adds	r1, r4, r0
 8005294:	428b      	cmp	r3, r1
 8005296:	bf01      	itttt	eq
 8005298:	6819      	ldreq	r1, [r3, #0]
 800529a:	685b      	ldreq	r3, [r3, #4]
 800529c:	1809      	addeq	r1, r1, r0
 800529e:	6021      	streq	r1, [r4, #0]
 80052a0:	e7ed      	b.n	800527e <_free_r+0x1e>
 80052a2:	461a      	mov	r2, r3
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	b10b      	cbz	r3, 80052ac <_free_r+0x4c>
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	d9fa      	bls.n	80052a2 <_free_r+0x42>
 80052ac:	6811      	ldr	r1, [r2, #0]
 80052ae:	1850      	adds	r0, r2, r1
 80052b0:	42a0      	cmp	r0, r4
 80052b2:	d10b      	bne.n	80052cc <_free_r+0x6c>
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	4401      	add	r1, r0
 80052b8:	1850      	adds	r0, r2, r1
 80052ba:	4283      	cmp	r3, r0
 80052bc:	6011      	str	r1, [r2, #0]
 80052be:	d1e0      	bne.n	8005282 <_free_r+0x22>
 80052c0:	6818      	ldr	r0, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	6053      	str	r3, [r2, #4]
 80052c6:	4408      	add	r0, r1
 80052c8:	6010      	str	r0, [r2, #0]
 80052ca:	e7da      	b.n	8005282 <_free_r+0x22>
 80052cc:	d902      	bls.n	80052d4 <_free_r+0x74>
 80052ce:	230c      	movs	r3, #12
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	e7d6      	b.n	8005282 <_free_r+0x22>
 80052d4:	6820      	ldr	r0, [r4, #0]
 80052d6:	1821      	adds	r1, r4, r0
 80052d8:	428b      	cmp	r3, r1
 80052da:	bf04      	itt	eq
 80052dc:	6819      	ldreq	r1, [r3, #0]
 80052de:	685b      	ldreq	r3, [r3, #4]
 80052e0:	6063      	str	r3, [r4, #4]
 80052e2:	bf04      	itt	eq
 80052e4:	1809      	addeq	r1, r1, r0
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	6054      	str	r4, [r2, #4]
 80052ea:	e7ca      	b.n	8005282 <_free_r+0x22>
 80052ec:	bd38      	pop	{r3, r4, r5, pc}
 80052ee:	bf00      	nop
 80052f0:	20000274 	.word	0x20000274

080052f4 <sbrk_aligned>:
 80052f4:	b570      	push	{r4, r5, r6, lr}
 80052f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005334 <sbrk_aligned+0x40>)
 80052f8:	460c      	mov	r4, r1
 80052fa:	6831      	ldr	r1, [r6, #0]
 80052fc:	4605      	mov	r5, r0
 80052fe:	b911      	cbnz	r1, 8005306 <sbrk_aligned+0x12>
 8005300:	f000 fca4 	bl	8005c4c <_sbrk_r>
 8005304:	6030      	str	r0, [r6, #0]
 8005306:	4621      	mov	r1, r4
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fc9f 	bl	8005c4c <_sbrk_r>
 800530e:	1c43      	adds	r3, r0, #1
 8005310:	d103      	bne.n	800531a <sbrk_aligned+0x26>
 8005312:	f04f 34ff 	mov.w	r4, #4294967295
 8005316:	4620      	mov	r0, r4
 8005318:	bd70      	pop	{r4, r5, r6, pc}
 800531a:	1cc4      	adds	r4, r0, #3
 800531c:	f024 0403 	bic.w	r4, r4, #3
 8005320:	42a0      	cmp	r0, r4
 8005322:	d0f8      	beq.n	8005316 <sbrk_aligned+0x22>
 8005324:	1a21      	subs	r1, r4, r0
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fc90 	bl	8005c4c <_sbrk_r>
 800532c:	3001      	adds	r0, #1
 800532e:	d1f2      	bne.n	8005316 <sbrk_aligned+0x22>
 8005330:	e7ef      	b.n	8005312 <sbrk_aligned+0x1e>
 8005332:	bf00      	nop
 8005334:	20000270 	.word	0x20000270

08005338 <_malloc_r>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4606      	mov	r6, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d904      	bls.n	800535e <_malloc_r+0x26>
 8005354:	230c      	movs	r3, #12
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	2000      	movs	r0, #0
 800535a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800535e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005434 <_malloc_r+0xfc>
 8005362:	f000 f869 	bl	8005438 <__malloc_lock>
 8005366:	f8d8 3000 	ldr.w	r3, [r8]
 800536a:	461c      	mov	r4, r3
 800536c:	bb44      	cbnz	r4, 80053c0 <_malloc_r+0x88>
 800536e:	4629      	mov	r1, r5
 8005370:	4630      	mov	r0, r6
 8005372:	f7ff ffbf 	bl	80052f4 <sbrk_aligned>
 8005376:	1c43      	adds	r3, r0, #1
 8005378:	4604      	mov	r4, r0
 800537a:	d158      	bne.n	800542e <_malloc_r+0xf6>
 800537c:	f8d8 4000 	ldr.w	r4, [r8]
 8005380:	4627      	mov	r7, r4
 8005382:	2f00      	cmp	r7, #0
 8005384:	d143      	bne.n	800540e <_malloc_r+0xd6>
 8005386:	2c00      	cmp	r4, #0
 8005388:	d04b      	beq.n	8005422 <_malloc_r+0xea>
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	4639      	mov	r1, r7
 800538e:	4630      	mov	r0, r6
 8005390:	eb04 0903 	add.w	r9, r4, r3
 8005394:	f000 fc5a 	bl	8005c4c <_sbrk_r>
 8005398:	4581      	cmp	r9, r0
 800539a:	d142      	bne.n	8005422 <_malloc_r+0xea>
 800539c:	6821      	ldr	r1, [r4, #0]
 800539e:	1a6d      	subs	r5, r5, r1
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffa6 	bl	80052f4 <sbrk_aligned>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d03a      	beq.n	8005422 <_malloc_r+0xea>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	442b      	add	r3, r5
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	f8d8 3000 	ldr.w	r3, [r8]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	bb62      	cbnz	r2, 8005414 <_malloc_r+0xdc>
 80053ba:	f8c8 7000 	str.w	r7, [r8]
 80053be:	e00f      	b.n	80053e0 <_malloc_r+0xa8>
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1b52      	subs	r2, r2, r5
 80053c4:	d420      	bmi.n	8005408 <_malloc_r+0xd0>
 80053c6:	2a0b      	cmp	r2, #11
 80053c8:	d917      	bls.n	80053fa <_malloc_r+0xc2>
 80053ca:	1961      	adds	r1, r4, r5
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	6025      	str	r5, [r4, #0]
 80053d0:	bf18      	it	ne
 80053d2:	6059      	strne	r1, [r3, #4]
 80053d4:	6863      	ldr	r3, [r4, #4]
 80053d6:	bf08      	it	eq
 80053d8:	f8c8 1000 	streq.w	r1, [r8]
 80053dc:	5162      	str	r2, [r4, r5]
 80053de:	604b      	str	r3, [r1, #4]
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f82f 	bl	8005444 <__malloc_unlock>
 80053e6:	f104 000b 	add.w	r0, r4, #11
 80053ea:	1d23      	adds	r3, r4, #4
 80053ec:	f020 0007 	bic.w	r0, r0, #7
 80053f0:	1ac2      	subs	r2, r0, r3
 80053f2:	bf1c      	itt	ne
 80053f4:	1a1b      	subne	r3, r3, r0
 80053f6:	50a3      	strne	r3, [r4, r2]
 80053f8:	e7af      	b.n	800535a <_malloc_r+0x22>
 80053fa:	6862      	ldr	r2, [r4, #4]
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	bf0c      	ite	eq
 8005400:	f8c8 2000 	streq.w	r2, [r8]
 8005404:	605a      	strne	r2, [r3, #4]
 8005406:	e7eb      	b.n	80053e0 <_malloc_r+0xa8>
 8005408:	4623      	mov	r3, r4
 800540a:	6864      	ldr	r4, [r4, #4]
 800540c:	e7ae      	b.n	800536c <_malloc_r+0x34>
 800540e:	463c      	mov	r4, r7
 8005410:	687f      	ldr	r7, [r7, #4]
 8005412:	e7b6      	b.n	8005382 <_malloc_r+0x4a>
 8005414:	461a      	mov	r2, r3
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	42a3      	cmp	r3, r4
 800541a:	d1fb      	bne.n	8005414 <_malloc_r+0xdc>
 800541c:	2300      	movs	r3, #0
 800541e:	6053      	str	r3, [r2, #4]
 8005420:	e7de      	b.n	80053e0 <_malloc_r+0xa8>
 8005422:	230c      	movs	r3, #12
 8005424:	6033      	str	r3, [r6, #0]
 8005426:	4630      	mov	r0, r6
 8005428:	f000 f80c 	bl	8005444 <__malloc_unlock>
 800542c:	e794      	b.n	8005358 <_malloc_r+0x20>
 800542e:	6005      	str	r5, [r0, #0]
 8005430:	e7d6      	b.n	80053e0 <_malloc_r+0xa8>
 8005432:	bf00      	nop
 8005434:	20000274 	.word	0x20000274

08005438 <__malloc_lock>:
 8005438:	4801      	ldr	r0, [pc, #4]	@ (8005440 <__malloc_lock+0x8>)
 800543a:	f7ff bf0e 	b.w	800525a <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	2000026c 	.word	0x2000026c

08005444 <__malloc_unlock>:
 8005444:	4801      	ldr	r0, [pc, #4]	@ (800544c <__malloc_unlock+0x8>)
 8005446:	f7ff bf09 	b.w	800525c <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	2000026c 	.word	0x2000026c

08005450 <__sfputc_r>:
 8005450:	6893      	ldr	r3, [r2, #8]
 8005452:	3b01      	subs	r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	b410      	push	{r4}
 8005458:	6093      	str	r3, [r2, #8]
 800545a:	da08      	bge.n	800546e <__sfputc_r+0x1e>
 800545c:	6994      	ldr	r4, [r2, #24]
 800545e:	42a3      	cmp	r3, r4
 8005460:	db01      	blt.n	8005466 <__sfputc_r+0x16>
 8005462:	290a      	cmp	r1, #10
 8005464:	d103      	bne.n	800546e <__sfputc_r+0x1e>
 8005466:	f85d 4b04 	ldr.w	r4, [sp], #4
 800546a:	f7ff bde8 	b.w	800503e <__swbuf_r>
 800546e:	6813      	ldr	r3, [r2, #0]
 8005470:	1c58      	adds	r0, r3, #1
 8005472:	6010      	str	r0, [r2, #0]
 8005474:	7019      	strb	r1, [r3, #0]
 8005476:	4608      	mov	r0, r1
 8005478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800547c:	4770      	bx	lr

0800547e <__sfputs_r>:
 800547e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005480:	4606      	mov	r6, r0
 8005482:	460f      	mov	r7, r1
 8005484:	4614      	mov	r4, r2
 8005486:	18d5      	adds	r5, r2, r3
 8005488:	42ac      	cmp	r4, r5
 800548a:	d101      	bne.n	8005490 <__sfputs_r+0x12>
 800548c:	2000      	movs	r0, #0
 800548e:	e007      	b.n	80054a0 <__sfputs_r+0x22>
 8005490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005494:	463a      	mov	r2, r7
 8005496:	4630      	mov	r0, r6
 8005498:	f7ff ffda 	bl	8005450 <__sfputc_r>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d1f3      	bne.n	8005488 <__sfputs_r+0xa>
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080054a4 <_vfiprintf_r>:
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	460d      	mov	r5, r1
 80054aa:	b09d      	sub	sp, #116	@ 0x74
 80054ac:	4614      	mov	r4, r2
 80054ae:	4698      	mov	r8, r3
 80054b0:	4606      	mov	r6, r0
 80054b2:	b118      	cbz	r0, 80054bc <_vfiprintf_r+0x18>
 80054b4:	6a03      	ldr	r3, [r0, #32]
 80054b6:	b90b      	cbnz	r3, 80054bc <_vfiprintf_r+0x18>
 80054b8:	f7ff fcd8 	bl	8004e6c <__sinit>
 80054bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054be:	07d9      	lsls	r1, r3, #31
 80054c0:	d405      	bmi.n	80054ce <_vfiprintf_r+0x2a>
 80054c2:	89ab      	ldrh	r3, [r5, #12]
 80054c4:	059a      	lsls	r2, r3, #22
 80054c6:	d402      	bmi.n	80054ce <_vfiprintf_r+0x2a>
 80054c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054ca:	f7ff fec6 	bl	800525a <__retarget_lock_acquire_recursive>
 80054ce:	89ab      	ldrh	r3, [r5, #12]
 80054d0:	071b      	lsls	r3, r3, #28
 80054d2:	d501      	bpl.n	80054d8 <_vfiprintf_r+0x34>
 80054d4:	692b      	ldr	r3, [r5, #16]
 80054d6:	b99b      	cbnz	r3, 8005500 <_vfiprintf_r+0x5c>
 80054d8:	4629      	mov	r1, r5
 80054da:	4630      	mov	r0, r6
 80054dc:	f7ff fdee 	bl	80050bc <__swsetup_r>
 80054e0:	b170      	cbz	r0, 8005500 <_vfiprintf_r+0x5c>
 80054e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054e4:	07dc      	lsls	r4, r3, #31
 80054e6:	d504      	bpl.n	80054f2 <_vfiprintf_r+0x4e>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ec:	b01d      	add	sp, #116	@ 0x74
 80054ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f2:	89ab      	ldrh	r3, [r5, #12]
 80054f4:	0598      	lsls	r0, r3, #22
 80054f6:	d4f7      	bmi.n	80054e8 <_vfiprintf_r+0x44>
 80054f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054fa:	f7ff feaf 	bl	800525c <__retarget_lock_release_recursive>
 80054fe:	e7f3      	b.n	80054e8 <_vfiprintf_r+0x44>
 8005500:	2300      	movs	r3, #0
 8005502:	9309      	str	r3, [sp, #36]	@ 0x24
 8005504:	2320      	movs	r3, #32
 8005506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800550a:	f8cd 800c 	str.w	r8, [sp, #12]
 800550e:	2330      	movs	r3, #48	@ 0x30
 8005510:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80056c0 <_vfiprintf_r+0x21c>
 8005514:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005518:	f04f 0901 	mov.w	r9, #1
 800551c:	4623      	mov	r3, r4
 800551e:	469a      	mov	sl, r3
 8005520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005524:	b10a      	cbz	r2, 800552a <_vfiprintf_r+0x86>
 8005526:	2a25      	cmp	r2, #37	@ 0x25
 8005528:	d1f9      	bne.n	800551e <_vfiprintf_r+0x7a>
 800552a:	ebba 0b04 	subs.w	fp, sl, r4
 800552e:	d00b      	beq.n	8005548 <_vfiprintf_r+0xa4>
 8005530:	465b      	mov	r3, fp
 8005532:	4622      	mov	r2, r4
 8005534:	4629      	mov	r1, r5
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff ffa1 	bl	800547e <__sfputs_r>
 800553c:	3001      	adds	r0, #1
 800553e:	f000 80a7 	beq.w	8005690 <_vfiprintf_r+0x1ec>
 8005542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005544:	445a      	add	r2, fp
 8005546:	9209      	str	r2, [sp, #36]	@ 0x24
 8005548:	f89a 3000 	ldrb.w	r3, [sl]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 809f 	beq.w	8005690 <_vfiprintf_r+0x1ec>
 8005552:	2300      	movs	r3, #0
 8005554:	f04f 32ff 	mov.w	r2, #4294967295
 8005558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800555c:	f10a 0a01 	add.w	sl, sl, #1
 8005560:	9304      	str	r3, [sp, #16]
 8005562:	9307      	str	r3, [sp, #28]
 8005564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005568:	931a      	str	r3, [sp, #104]	@ 0x68
 800556a:	4654      	mov	r4, sl
 800556c:	2205      	movs	r2, #5
 800556e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005572:	4853      	ldr	r0, [pc, #332]	@ (80056c0 <_vfiprintf_r+0x21c>)
 8005574:	f7fa fe4c 	bl	8000210 <memchr>
 8005578:	9a04      	ldr	r2, [sp, #16]
 800557a:	b9d8      	cbnz	r0, 80055b4 <_vfiprintf_r+0x110>
 800557c:	06d1      	lsls	r1, r2, #27
 800557e:	bf44      	itt	mi
 8005580:	2320      	movmi	r3, #32
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005586:	0713      	lsls	r3, r2, #28
 8005588:	bf44      	itt	mi
 800558a:	232b      	movmi	r3, #43	@ 0x2b
 800558c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005590:	f89a 3000 	ldrb.w	r3, [sl]
 8005594:	2b2a      	cmp	r3, #42	@ 0x2a
 8005596:	d015      	beq.n	80055c4 <_vfiprintf_r+0x120>
 8005598:	9a07      	ldr	r2, [sp, #28]
 800559a:	4654      	mov	r4, sl
 800559c:	2000      	movs	r0, #0
 800559e:	f04f 0c0a 	mov.w	ip, #10
 80055a2:	4621      	mov	r1, r4
 80055a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055a8:	3b30      	subs	r3, #48	@ 0x30
 80055aa:	2b09      	cmp	r3, #9
 80055ac:	d94b      	bls.n	8005646 <_vfiprintf_r+0x1a2>
 80055ae:	b1b0      	cbz	r0, 80055de <_vfiprintf_r+0x13a>
 80055b0:	9207      	str	r2, [sp, #28]
 80055b2:	e014      	b.n	80055de <_vfiprintf_r+0x13a>
 80055b4:	eba0 0308 	sub.w	r3, r0, r8
 80055b8:	fa09 f303 	lsl.w	r3, r9, r3
 80055bc:	4313      	orrs	r3, r2
 80055be:	9304      	str	r3, [sp, #16]
 80055c0:	46a2      	mov	sl, r4
 80055c2:	e7d2      	b.n	800556a <_vfiprintf_r+0xc6>
 80055c4:	9b03      	ldr	r3, [sp, #12]
 80055c6:	1d19      	adds	r1, r3, #4
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	9103      	str	r1, [sp, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bfbb      	ittet	lt
 80055d0:	425b      	neglt	r3, r3
 80055d2:	f042 0202 	orrlt.w	r2, r2, #2
 80055d6:	9307      	strge	r3, [sp, #28]
 80055d8:	9307      	strlt	r3, [sp, #28]
 80055da:	bfb8      	it	lt
 80055dc:	9204      	strlt	r2, [sp, #16]
 80055de:	7823      	ldrb	r3, [r4, #0]
 80055e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80055e2:	d10a      	bne.n	80055fa <_vfiprintf_r+0x156>
 80055e4:	7863      	ldrb	r3, [r4, #1]
 80055e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80055e8:	d132      	bne.n	8005650 <_vfiprintf_r+0x1ac>
 80055ea:	9b03      	ldr	r3, [sp, #12]
 80055ec:	1d1a      	adds	r2, r3, #4
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	9203      	str	r2, [sp, #12]
 80055f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80055f6:	3402      	adds	r4, #2
 80055f8:	9305      	str	r3, [sp, #20]
 80055fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80056d0 <_vfiprintf_r+0x22c>
 80055fe:	7821      	ldrb	r1, [r4, #0]
 8005600:	2203      	movs	r2, #3
 8005602:	4650      	mov	r0, sl
 8005604:	f7fa fe04 	bl	8000210 <memchr>
 8005608:	b138      	cbz	r0, 800561a <_vfiprintf_r+0x176>
 800560a:	9b04      	ldr	r3, [sp, #16]
 800560c:	eba0 000a 	sub.w	r0, r0, sl
 8005610:	2240      	movs	r2, #64	@ 0x40
 8005612:	4082      	lsls	r2, r0
 8005614:	4313      	orrs	r3, r2
 8005616:	3401      	adds	r4, #1
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561e:	4829      	ldr	r0, [pc, #164]	@ (80056c4 <_vfiprintf_r+0x220>)
 8005620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005624:	2206      	movs	r2, #6
 8005626:	f7fa fdf3 	bl	8000210 <memchr>
 800562a:	2800      	cmp	r0, #0
 800562c:	d03f      	beq.n	80056ae <_vfiprintf_r+0x20a>
 800562e:	4b26      	ldr	r3, [pc, #152]	@ (80056c8 <_vfiprintf_r+0x224>)
 8005630:	bb1b      	cbnz	r3, 800567a <_vfiprintf_r+0x1d6>
 8005632:	9b03      	ldr	r3, [sp, #12]
 8005634:	3307      	adds	r3, #7
 8005636:	f023 0307 	bic.w	r3, r3, #7
 800563a:	3308      	adds	r3, #8
 800563c:	9303      	str	r3, [sp, #12]
 800563e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005640:	443b      	add	r3, r7
 8005642:	9309      	str	r3, [sp, #36]	@ 0x24
 8005644:	e76a      	b.n	800551c <_vfiprintf_r+0x78>
 8005646:	fb0c 3202 	mla	r2, ip, r2, r3
 800564a:	460c      	mov	r4, r1
 800564c:	2001      	movs	r0, #1
 800564e:	e7a8      	b.n	80055a2 <_vfiprintf_r+0xfe>
 8005650:	2300      	movs	r3, #0
 8005652:	3401      	adds	r4, #1
 8005654:	9305      	str	r3, [sp, #20]
 8005656:	4619      	mov	r1, r3
 8005658:	f04f 0c0a 	mov.w	ip, #10
 800565c:	4620      	mov	r0, r4
 800565e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005662:	3a30      	subs	r2, #48	@ 0x30
 8005664:	2a09      	cmp	r2, #9
 8005666:	d903      	bls.n	8005670 <_vfiprintf_r+0x1cc>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0c6      	beq.n	80055fa <_vfiprintf_r+0x156>
 800566c:	9105      	str	r1, [sp, #20]
 800566e:	e7c4      	b.n	80055fa <_vfiprintf_r+0x156>
 8005670:	fb0c 2101 	mla	r1, ip, r1, r2
 8005674:	4604      	mov	r4, r0
 8005676:	2301      	movs	r3, #1
 8005678:	e7f0      	b.n	800565c <_vfiprintf_r+0x1b8>
 800567a:	ab03      	add	r3, sp, #12
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	462a      	mov	r2, r5
 8005680:	4b12      	ldr	r3, [pc, #72]	@ (80056cc <_vfiprintf_r+0x228>)
 8005682:	a904      	add	r1, sp, #16
 8005684:	4630      	mov	r0, r6
 8005686:	f3af 8000 	nop.w
 800568a:	4607      	mov	r7, r0
 800568c:	1c78      	adds	r0, r7, #1
 800568e:	d1d6      	bne.n	800563e <_vfiprintf_r+0x19a>
 8005690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005692:	07d9      	lsls	r1, r3, #31
 8005694:	d405      	bmi.n	80056a2 <_vfiprintf_r+0x1fe>
 8005696:	89ab      	ldrh	r3, [r5, #12]
 8005698:	059a      	lsls	r2, r3, #22
 800569a:	d402      	bmi.n	80056a2 <_vfiprintf_r+0x1fe>
 800569c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800569e:	f7ff fddd 	bl	800525c <__retarget_lock_release_recursive>
 80056a2:	89ab      	ldrh	r3, [r5, #12]
 80056a4:	065b      	lsls	r3, r3, #25
 80056a6:	f53f af1f 	bmi.w	80054e8 <_vfiprintf_r+0x44>
 80056aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80056ac:	e71e      	b.n	80054ec <_vfiprintf_r+0x48>
 80056ae:	ab03      	add	r3, sp, #12
 80056b0:	9300      	str	r3, [sp, #0]
 80056b2:	462a      	mov	r2, r5
 80056b4:	4b05      	ldr	r3, [pc, #20]	@ (80056cc <_vfiprintf_r+0x228>)
 80056b6:	a904      	add	r1, sp, #16
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 f879 	bl	80057b0 <_printf_i>
 80056be:	e7e4      	b.n	800568a <_vfiprintf_r+0x1e6>
 80056c0:	08005d2c 	.word	0x08005d2c
 80056c4:	08005d36 	.word	0x08005d36
 80056c8:	00000000 	.word	0x00000000
 80056cc:	0800547f 	.word	0x0800547f
 80056d0:	08005d32 	.word	0x08005d32

080056d4 <_printf_common>:
 80056d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d8:	4616      	mov	r6, r2
 80056da:	4698      	mov	r8, r3
 80056dc:	688a      	ldr	r2, [r1, #8]
 80056de:	690b      	ldr	r3, [r1, #16]
 80056e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80056e4:	4293      	cmp	r3, r2
 80056e6:	bfb8      	it	lt
 80056e8:	4613      	movlt	r3, r2
 80056ea:	6033      	str	r3, [r6, #0]
 80056ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80056f0:	4607      	mov	r7, r0
 80056f2:	460c      	mov	r4, r1
 80056f4:	b10a      	cbz	r2, 80056fa <_printf_common+0x26>
 80056f6:	3301      	adds	r3, #1
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	0699      	lsls	r1, r3, #26
 80056fe:	bf42      	ittt	mi
 8005700:	6833      	ldrmi	r3, [r6, #0]
 8005702:	3302      	addmi	r3, #2
 8005704:	6033      	strmi	r3, [r6, #0]
 8005706:	6825      	ldr	r5, [r4, #0]
 8005708:	f015 0506 	ands.w	r5, r5, #6
 800570c:	d106      	bne.n	800571c <_printf_common+0x48>
 800570e:	f104 0a19 	add.w	sl, r4, #25
 8005712:	68e3      	ldr	r3, [r4, #12]
 8005714:	6832      	ldr	r2, [r6, #0]
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	42ab      	cmp	r3, r5
 800571a:	dc26      	bgt.n	800576a <_printf_common+0x96>
 800571c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	3b00      	subs	r3, #0
 8005724:	bf18      	it	ne
 8005726:	2301      	movne	r3, #1
 8005728:	0692      	lsls	r2, r2, #26
 800572a:	d42b      	bmi.n	8005784 <_printf_common+0xb0>
 800572c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005730:	4641      	mov	r1, r8
 8005732:	4638      	mov	r0, r7
 8005734:	47c8      	blx	r9
 8005736:	3001      	adds	r0, #1
 8005738:	d01e      	beq.n	8005778 <_printf_common+0xa4>
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	6922      	ldr	r2, [r4, #16]
 800573e:	f003 0306 	and.w	r3, r3, #6
 8005742:	2b04      	cmp	r3, #4
 8005744:	bf02      	ittt	eq
 8005746:	68e5      	ldreq	r5, [r4, #12]
 8005748:	6833      	ldreq	r3, [r6, #0]
 800574a:	1aed      	subeq	r5, r5, r3
 800574c:	68a3      	ldr	r3, [r4, #8]
 800574e:	bf0c      	ite	eq
 8005750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005754:	2500      	movne	r5, #0
 8005756:	4293      	cmp	r3, r2
 8005758:	bfc4      	itt	gt
 800575a:	1a9b      	subgt	r3, r3, r2
 800575c:	18ed      	addgt	r5, r5, r3
 800575e:	2600      	movs	r6, #0
 8005760:	341a      	adds	r4, #26
 8005762:	42b5      	cmp	r5, r6
 8005764:	d11a      	bne.n	800579c <_printf_common+0xc8>
 8005766:	2000      	movs	r0, #0
 8005768:	e008      	b.n	800577c <_printf_common+0xa8>
 800576a:	2301      	movs	r3, #1
 800576c:	4652      	mov	r2, sl
 800576e:	4641      	mov	r1, r8
 8005770:	4638      	mov	r0, r7
 8005772:	47c8      	blx	r9
 8005774:	3001      	adds	r0, #1
 8005776:	d103      	bne.n	8005780 <_printf_common+0xac>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005780:	3501      	adds	r5, #1
 8005782:	e7c6      	b.n	8005712 <_printf_common+0x3e>
 8005784:	18e1      	adds	r1, r4, r3
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	2030      	movs	r0, #48	@ 0x30
 800578a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800578e:	4422      	add	r2, r4
 8005790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005798:	3302      	adds	r3, #2
 800579a:	e7c7      	b.n	800572c <_printf_common+0x58>
 800579c:	2301      	movs	r3, #1
 800579e:	4622      	mov	r2, r4
 80057a0:	4641      	mov	r1, r8
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c8      	blx	r9
 80057a6:	3001      	adds	r0, #1
 80057a8:	d0e6      	beq.n	8005778 <_printf_common+0xa4>
 80057aa:	3601      	adds	r6, #1
 80057ac:	e7d9      	b.n	8005762 <_printf_common+0x8e>
	...

080057b0 <_printf_i>:
 80057b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057b4:	7e0f      	ldrb	r7, [r1, #24]
 80057b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80057b8:	2f78      	cmp	r7, #120	@ 0x78
 80057ba:	4691      	mov	r9, r2
 80057bc:	4680      	mov	r8, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	469a      	mov	sl, r3
 80057c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80057c6:	d807      	bhi.n	80057d8 <_printf_i+0x28>
 80057c8:	2f62      	cmp	r7, #98	@ 0x62
 80057ca:	d80a      	bhi.n	80057e2 <_printf_i+0x32>
 80057cc:	2f00      	cmp	r7, #0
 80057ce:	f000 80d1 	beq.w	8005974 <_printf_i+0x1c4>
 80057d2:	2f58      	cmp	r7, #88	@ 0x58
 80057d4:	f000 80b8 	beq.w	8005948 <_printf_i+0x198>
 80057d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80057e0:	e03a      	b.n	8005858 <_printf_i+0xa8>
 80057e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80057e6:	2b15      	cmp	r3, #21
 80057e8:	d8f6      	bhi.n	80057d8 <_printf_i+0x28>
 80057ea:	a101      	add	r1, pc, #4	@ (adr r1, 80057f0 <_printf_i+0x40>)
 80057ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057f0:	08005849 	.word	0x08005849
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	080057d9 	.word	0x080057d9
 80057fc:	080057d9 	.word	0x080057d9
 8005800:	080057d9 	.word	0x080057d9
 8005804:	080057d9 	.word	0x080057d9
 8005808:	0800585d 	.word	0x0800585d
 800580c:	080057d9 	.word	0x080057d9
 8005810:	080057d9 	.word	0x080057d9
 8005814:	080057d9 	.word	0x080057d9
 8005818:	080057d9 	.word	0x080057d9
 800581c:	0800595b 	.word	0x0800595b
 8005820:	08005887 	.word	0x08005887
 8005824:	08005915 	.word	0x08005915
 8005828:	080057d9 	.word	0x080057d9
 800582c:	080057d9 	.word	0x080057d9
 8005830:	0800597d 	.word	0x0800597d
 8005834:	080057d9 	.word	0x080057d9
 8005838:	08005887 	.word	0x08005887
 800583c:	080057d9 	.word	0x080057d9
 8005840:	080057d9 	.word	0x080057d9
 8005844:	0800591d 	.word	0x0800591d
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	1d1a      	adds	r2, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6032      	str	r2, [r6, #0]
 8005850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005858:	2301      	movs	r3, #1
 800585a:	e09c      	b.n	8005996 <_printf_i+0x1e6>
 800585c:	6833      	ldr	r3, [r6, #0]
 800585e:	6820      	ldr	r0, [r4, #0]
 8005860:	1d19      	adds	r1, r3, #4
 8005862:	6031      	str	r1, [r6, #0]
 8005864:	0606      	lsls	r6, r0, #24
 8005866:	d501      	bpl.n	800586c <_printf_i+0xbc>
 8005868:	681d      	ldr	r5, [r3, #0]
 800586a:	e003      	b.n	8005874 <_printf_i+0xc4>
 800586c:	0645      	lsls	r5, r0, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0xb8>
 8005870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005874:	2d00      	cmp	r5, #0
 8005876:	da03      	bge.n	8005880 <_printf_i+0xd0>
 8005878:	232d      	movs	r3, #45	@ 0x2d
 800587a:	426d      	negs	r5, r5
 800587c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005880:	4858      	ldr	r0, [pc, #352]	@ (80059e4 <_printf_i+0x234>)
 8005882:	230a      	movs	r3, #10
 8005884:	e011      	b.n	80058aa <_printf_i+0xfa>
 8005886:	6821      	ldr	r1, [r4, #0]
 8005888:	6833      	ldr	r3, [r6, #0]
 800588a:	0608      	lsls	r0, r1, #24
 800588c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005890:	d402      	bmi.n	8005898 <_printf_i+0xe8>
 8005892:	0649      	lsls	r1, r1, #25
 8005894:	bf48      	it	mi
 8005896:	b2ad      	uxthmi	r5, r5
 8005898:	2f6f      	cmp	r7, #111	@ 0x6f
 800589a:	4852      	ldr	r0, [pc, #328]	@ (80059e4 <_printf_i+0x234>)
 800589c:	6033      	str	r3, [r6, #0]
 800589e:	bf14      	ite	ne
 80058a0:	230a      	movne	r3, #10
 80058a2:	2308      	moveq	r3, #8
 80058a4:	2100      	movs	r1, #0
 80058a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80058aa:	6866      	ldr	r6, [r4, #4]
 80058ac:	60a6      	str	r6, [r4, #8]
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	db05      	blt.n	80058be <_printf_i+0x10e>
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	432e      	orrs	r6, r5
 80058b6:	f021 0104 	bic.w	r1, r1, #4
 80058ba:	6021      	str	r1, [r4, #0]
 80058bc:	d04b      	beq.n	8005956 <_printf_i+0x1a6>
 80058be:	4616      	mov	r6, r2
 80058c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80058c4:	fb03 5711 	mls	r7, r3, r1, r5
 80058c8:	5dc7      	ldrb	r7, [r0, r7]
 80058ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80058ce:	462f      	mov	r7, r5
 80058d0:	42bb      	cmp	r3, r7
 80058d2:	460d      	mov	r5, r1
 80058d4:	d9f4      	bls.n	80058c0 <_printf_i+0x110>
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d10b      	bne.n	80058f2 <_printf_i+0x142>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	07df      	lsls	r7, r3, #31
 80058de:	d508      	bpl.n	80058f2 <_printf_i+0x142>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	6861      	ldr	r1, [r4, #4]
 80058e4:	4299      	cmp	r1, r3
 80058e6:	bfde      	ittt	le
 80058e8:	2330      	movle	r3, #48	@ 0x30
 80058ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80058ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80058f2:	1b92      	subs	r2, r2, r6
 80058f4:	6122      	str	r2, [r4, #16]
 80058f6:	f8cd a000 	str.w	sl, [sp]
 80058fa:	464b      	mov	r3, r9
 80058fc:	aa03      	add	r2, sp, #12
 80058fe:	4621      	mov	r1, r4
 8005900:	4640      	mov	r0, r8
 8005902:	f7ff fee7 	bl	80056d4 <_printf_common>
 8005906:	3001      	adds	r0, #1
 8005908:	d14a      	bne.n	80059a0 <_printf_i+0x1f0>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	b004      	add	sp, #16
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	f043 0320 	orr.w	r3, r3, #32
 800591a:	6023      	str	r3, [r4, #0]
 800591c:	4832      	ldr	r0, [pc, #200]	@ (80059e8 <_printf_i+0x238>)
 800591e:	2778      	movs	r7, #120	@ 0x78
 8005920:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	6831      	ldr	r1, [r6, #0]
 8005928:	061f      	lsls	r7, r3, #24
 800592a:	f851 5b04 	ldr.w	r5, [r1], #4
 800592e:	d402      	bmi.n	8005936 <_printf_i+0x186>
 8005930:	065f      	lsls	r7, r3, #25
 8005932:	bf48      	it	mi
 8005934:	b2ad      	uxthmi	r5, r5
 8005936:	6031      	str	r1, [r6, #0]
 8005938:	07d9      	lsls	r1, r3, #31
 800593a:	bf44      	itt	mi
 800593c:	f043 0320 	orrmi.w	r3, r3, #32
 8005940:	6023      	strmi	r3, [r4, #0]
 8005942:	b11d      	cbz	r5, 800594c <_printf_i+0x19c>
 8005944:	2310      	movs	r3, #16
 8005946:	e7ad      	b.n	80058a4 <_printf_i+0xf4>
 8005948:	4826      	ldr	r0, [pc, #152]	@ (80059e4 <_printf_i+0x234>)
 800594a:	e7e9      	b.n	8005920 <_printf_i+0x170>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	f023 0320 	bic.w	r3, r3, #32
 8005952:	6023      	str	r3, [r4, #0]
 8005954:	e7f6      	b.n	8005944 <_printf_i+0x194>
 8005956:	4616      	mov	r6, r2
 8005958:	e7bd      	b.n	80058d6 <_printf_i+0x126>
 800595a:	6833      	ldr	r3, [r6, #0]
 800595c:	6825      	ldr	r5, [r4, #0]
 800595e:	6961      	ldr	r1, [r4, #20]
 8005960:	1d18      	adds	r0, r3, #4
 8005962:	6030      	str	r0, [r6, #0]
 8005964:	062e      	lsls	r6, r5, #24
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	d501      	bpl.n	800596e <_printf_i+0x1be>
 800596a:	6019      	str	r1, [r3, #0]
 800596c:	e002      	b.n	8005974 <_printf_i+0x1c4>
 800596e:	0668      	lsls	r0, r5, #25
 8005970:	d5fb      	bpl.n	800596a <_printf_i+0x1ba>
 8005972:	8019      	strh	r1, [r3, #0]
 8005974:	2300      	movs	r3, #0
 8005976:	6123      	str	r3, [r4, #16]
 8005978:	4616      	mov	r6, r2
 800597a:	e7bc      	b.n	80058f6 <_printf_i+0x146>
 800597c:	6833      	ldr	r3, [r6, #0]
 800597e:	1d1a      	adds	r2, r3, #4
 8005980:	6032      	str	r2, [r6, #0]
 8005982:	681e      	ldr	r6, [r3, #0]
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	2100      	movs	r1, #0
 8005988:	4630      	mov	r0, r6
 800598a:	f7fa fc41 	bl	8000210 <memchr>
 800598e:	b108      	cbz	r0, 8005994 <_printf_i+0x1e4>
 8005990:	1b80      	subs	r0, r0, r6
 8005992:	6060      	str	r0, [r4, #4]
 8005994:	6863      	ldr	r3, [r4, #4]
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599e:	e7aa      	b.n	80058f6 <_printf_i+0x146>
 80059a0:	6923      	ldr	r3, [r4, #16]
 80059a2:	4632      	mov	r2, r6
 80059a4:	4649      	mov	r1, r9
 80059a6:	4640      	mov	r0, r8
 80059a8:	47d0      	blx	sl
 80059aa:	3001      	adds	r0, #1
 80059ac:	d0ad      	beq.n	800590a <_printf_i+0x15a>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	079b      	lsls	r3, r3, #30
 80059b2:	d413      	bmi.n	80059dc <_printf_i+0x22c>
 80059b4:	68e0      	ldr	r0, [r4, #12]
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	4298      	cmp	r0, r3
 80059ba:	bfb8      	it	lt
 80059bc:	4618      	movlt	r0, r3
 80059be:	e7a6      	b.n	800590e <_printf_i+0x15e>
 80059c0:	2301      	movs	r3, #1
 80059c2:	4632      	mov	r2, r6
 80059c4:	4649      	mov	r1, r9
 80059c6:	4640      	mov	r0, r8
 80059c8:	47d0      	blx	sl
 80059ca:	3001      	adds	r0, #1
 80059cc:	d09d      	beq.n	800590a <_printf_i+0x15a>
 80059ce:	3501      	adds	r5, #1
 80059d0:	68e3      	ldr	r3, [r4, #12]
 80059d2:	9903      	ldr	r1, [sp, #12]
 80059d4:	1a5b      	subs	r3, r3, r1
 80059d6:	42ab      	cmp	r3, r5
 80059d8:	dcf2      	bgt.n	80059c0 <_printf_i+0x210>
 80059da:	e7eb      	b.n	80059b4 <_printf_i+0x204>
 80059dc:	2500      	movs	r5, #0
 80059de:	f104 0619 	add.w	r6, r4, #25
 80059e2:	e7f5      	b.n	80059d0 <_printf_i+0x220>
 80059e4:	08005d3d 	.word	0x08005d3d
 80059e8:	08005d4e 	.word	0x08005d4e

080059ec <__sflush_r>:
 80059ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80059f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059f4:	0716      	lsls	r6, r2, #28
 80059f6:	4605      	mov	r5, r0
 80059f8:	460c      	mov	r4, r1
 80059fa:	d454      	bmi.n	8005aa6 <__sflush_r+0xba>
 80059fc:	684b      	ldr	r3, [r1, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc02      	bgt.n	8005a08 <__sflush_r+0x1c>
 8005a02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dd48      	ble.n	8005a9a <__sflush_r+0xae>
 8005a08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d045      	beq.n	8005a9a <__sflush_r+0xae>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a14:	682f      	ldr	r7, [r5, #0]
 8005a16:	6a21      	ldr	r1, [r4, #32]
 8005a18:	602b      	str	r3, [r5, #0]
 8005a1a:	d030      	beq.n	8005a7e <__sflush_r+0x92>
 8005a1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a1e:	89a3      	ldrh	r3, [r4, #12]
 8005a20:	0759      	lsls	r1, r3, #29
 8005a22:	d505      	bpl.n	8005a30 <__sflush_r+0x44>
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	1ad2      	subs	r2, r2, r3
 8005a28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a2a:	b10b      	cbz	r3, 8005a30 <__sflush_r+0x44>
 8005a2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a2e:	1ad2      	subs	r2, r2, r3
 8005a30:	2300      	movs	r3, #0
 8005a32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a34:	6a21      	ldr	r1, [r4, #32]
 8005a36:	4628      	mov	r0, r5
 8005a38:	47b0      	blx	r6
 8005a3a:	1c43      	adds	r3, r0, #1
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	d106      	bne.n	8005a4e <__sflush_r+0x62>
 8005a40:	6829      	ldr	r1, [r5, #0]
 8005a42:	291d      	cmp	r1, #29
 8005a44:	d82b      	bhi.n	8005a9e <__sflush_r+0xb2>
 8005a46:	4a2a      	ldr	r2, [pc, #168]	@ (8005af0 <__sflush_r+0x104>)
 8005a48:	40ca      	lsrs	r2, r1
 8005a4a:	07d6      	lsls	r6, r2, #31
 8005a4c:	d527      	bpl.n	8005a9e <__sflush_r+0xb2>
 8005a4e:	2200      	movs	r2, #0
 8005a50:	6062      	str	r2, [r4, #4]
 8005a52:	04d9      	lsls	r1, r3, #19
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	d504      	bpl.n	8005a64 <__sflush_r+0x78>
 8005a5a:	1c42      	adds	r2, r0, #1
 8005a5c:	d101      	bne.n	8005a62 <__sflush_r+0x76>
 8005a5e:	682b      	ldr	r3, [r5, #0]
 8005a60:	b903      	cbnz	r3, 8005a64 <__sflush_r+0x78>
 8005a62:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a66:	602f      	str	r7, [r5, #0]
 8005a68:	b1b9      	cbz	r1, 8005a9a <__sflush_r+0xae>
 8005a6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a6e:	4299      	cmp	r1, r3
 8005a70:	d002      	beq.n	8005a78 <__sflush_r+0x8c>
 8005a72:	4628      	mov	r0, r5
 8005a74:	f7ff fbf4 	bl	8005260 <_free_r>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a7c:	e00d      	b.n	8005a9a <__sflush_r+0xae>
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	4602      	mov	r2, r0
 8005a86:	1c50      	adds	r0, r2, #1
 8005a88:	d1c9      	bne.n	8005a1e <__sflush_r+0x32>
 8005a8a:	682b      	ldr	r3, [r5, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0c6      	beq.n	8005a1e <__sflush_r+0x32>
 8005a90:	2b1d      	cmp	r3, #29
 8005a92:	d001      	beq.n	8005a98 <__sflush_r+0xac>
 8005a94:	2b16      	cmp	r3, #22
 8005a96:	d11e      	bne.n	8005ad6 <__sflush_r+0xea>
 8005a98:	602f      	str	r7, [r5, #0]
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e022      	b.n	8005ae4 <__sflush_r+0xf8>
 8005a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	e01b      	b.n	8005ade <__sflush_r+0xf2>
 8005aa6:	690f      	ldr	r7, [r1, #16]
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	d0f6      	beq.n	8005a9a <__sflush_r+0xae>
 8005aac:	0793      	lsls	r3, r2, #30
 8005aae:	680e      	ldr	r6, [r1, #0]
 8005ab0:	bf08      	it	eq
 8005ab2:	694b      	ldreq	r3, [r1, #20]
 8005ab4:	600f      	str	r7, [r1, #0]
 8005ab6:	bf18      	it	ne
 8005ab8:	2300      	movne	r3, #0
 8005aba:	eba6 0807 	sub.w	r8, r6, r7
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	f1b8 0f00 	cmp.w	r8, #0
 8005ac4:	dde9      	ble.n	8005a9a <__sflush_r+0xae>
 8005ac6:	6a21      	ldr	r1, [r4, #32]
 8005ac8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005aca:	4643      	mov	r3, r8
 8005acc:	463a      	mov	r2, r7
 8005ace:	4628      	mov	r0, r5
 8005ad0:	47b0      	blx	r6
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	dc08      	bgt.n	8005ae8 <__sflush_r+0xfc>
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ade:	81a3      	strh	r3, [r4, #12]
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae8:	4407      	add	r7, r0
 8005aea:	eba8 0800 	sub.w	r8, r8, r0
 8005aee:	e7e7      	b.n	8005ac0 <__sflush_r+0xd4>
 8005af0:	20400001 	.word	0x20400001

08005af4 <_fflush_r>:
 8005af4:	b538      	push	{r3, r4, r5, lr}
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	4605      	mov	r5, r0
 8005afa:	460c      	mov	r4, r1
 8005afc:	b913      	cbnz	r3, 8005b04 <_fflush_r+0x10>
 8005afe:	2500      	movs	r5, #0
 8005b00:	4628      	mov	r0, r5
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	b118      	cbz	r0, 8005b0e <_fflush_r+0x1a>
 8005b06:	6a03      	ldr	r3, [r0, #32]
 8005b08:	b90b      	cbnz	r3, 8005b0e <_fflush_r+0x1a>
 8005b0a:	f7ff f9af 	bl	8004e6c <__sinit>
 8005b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f3      	beq.n	8005afe <_fflush_r+0xa>
 8005b16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b18:	07d0      	lsls	r0, r2, #31
 8005b1a:	d404      	bmi.n	8005b26 <_fflush_r+0x32>
 8005b1c:	0599      	lsls	r1, r3, #22
 8005b1e:	d402      	bmi.n	8005b26 <_fflush_r+0x32>
 8005b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b22:	f7ff fb9a 	bl	800525a <__retarget_lock_acquire_recursive>
 8005b26:	4628      	mov	r0, r5
 8005b28:	4621      	mov	r1, r4
 8005b2a:	f7ff ff5f 	bl	80059ec <__sflush_r>
 8005b2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b30:	07da      	lsls	r2, r3, #31
 8005b32:	4605      	mov	r5, r0
 8005b34:	d4e4      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b36:	89a3      	ldrh	r3, [r4, #12]
 8005b38:	059b      	lsls	r3, r3, #22
 8005b3a:	d4e1      	bmi.n	8005b00 <_fflush_r+0xc>
 8005b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b3e:	f7ff fb8d 	bl	800525c <__retarget_lock_release_recursive>
 8005b42:	e7dd      	b.n	8005b00 <_fflush_r+0xc>

08005b44 <__swhatbuf_r>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	460c      	mov	r4, r1
 8005b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4c:	2900      	cmp	r1, #0
 8005b4e:	b096      	sub	sp, #88	@ 0x58
 8005b50:	4615      	mov	r5, r2
 8005b52:	461e      	mov	r6, r3
 8005b54:	da0d      	bge.n	8005b72 <__swhatbuf_r+0x2e>
 8005b56:	89a3      	ldrh	r3, [r4, #12]
 8005b58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	bf14      	ite	ne
 8005b62:	2340      	movne	r3, #64	@ 0x40
 8005b64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b68:	2000      	movs	r0, #0
 8005b6a:	6031      	str	r1, [r6, #0]
 8005b6c:	602b      	str	r3, [r5, #0]
 8005b6e:	b016      	add	sp, #88	@ 0x58
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	466a      	mov	r2, sp
 8005b74:	f000 f848 	bl	8005c08 <_fstat_r>
 8005b78:	2800      	cmp	r0, #0
 8005b7a:	dbec      	blt.n	8005b56 <__swhatbuf_r+0x12>
 8005b7c:	9901      	ldr	r1, [sp, #4]
 8005b7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b86:	4259      	negs	r1, r3
 8005b88:	4159      	adcs	r1, r3
 8005b8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b8e:	e7eb      	b.n	8005b68 <__swhatbuf_r+0x24>

08005b90 <__smakebuf_r>:
 8005b90:	898b      	ldrh	r3, [r1, #12]
 8005b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b94:	079d      	lsls	r5, r3, #30
 8005b96:	4606      	mov	r6, r0
 8005b98:	460c      	mov	r4, r1
 8005b9a:	d507      	bpl.n	8005bac <__smakebuf_r+0x1c>
 8005b9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	6163      	str	r3, [r4, #20]
 8005ba8:	b003      	add	sp, #12
 8005baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bac:	ab01      	add	r3, sp, #4
 8005bae:	466a      	mov	r2, sp
 8005bb0:	f7ff ffc8 	bl	8005b44 <__swhatbuf_r>
 8005bb4:	9f00      	ldr	r7, [sp, #0]
 8005bb6:	4605      	mov	r5, r0
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	f7ff fbbc 	bl	8005338 <_malloc_r>
 8005bc0:	b948      	cbnz	r0, 8005bd6 <__smakebuf_r+0x46>
 8005bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc6:	059a      	lsls	r2, r3, #22
 8005bc8:	d4ee      	bmi.n	8005ba8 <__smakebuf_r+0x18>
 8005bca:	f023 0303 	bic.w	r3, r3, #3
 8005bce:	f043 0302 	orr.w	r3, r3, #2
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	e7e2      	b.n	8005b9c <__smakebuf_r+0xc>
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	6020      	str	r0, [r4, #0]
 8005bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	9b01      	ldr	r3, [sp, #4]
 8005be2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005be6:	b15b      	cbz	r3, 8005c00 <__smakebuf_r+0x70>
 8005be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bec:	4630      	mov	r0, r6
 8005bee:	f000 f81d 	bl	8005c2c <_isatty_r>
 8005bf2:	b128      	cbz	r0, 8005c00 <__smakebuf_r+0x70>
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	f023 0303 	bic.w	r3, r3, #3
 8005bfa:	f043 0301 	orr.w	r3, r3, #1
 8005bfe:	81a3      	strh	r3, [r4, #12]
 8005c00:	89a3      	ldrh	r3, [r4, #12]
 8005c02:	431d      	orrs	r5, r3
 8005c04:	81a5      	strh	r5, [r4, #12]
 8005c06:	e7cf      	b.n	8005ba8 <__smakebuf_r+0x18>

08005c08 <_fstat_r>:
 8005c08:	b538      	push	{r3, r4, r5, lr}
 8005c0a:	4d07      	ldr	r5, [pc, #28]	@ (8005c28 <_fstat_r+0x20>)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	4604      	mov	r4, r0
 8005c10:	4608      	mov	r0, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	f7fb f832 	bl	8000c7e <_fstat>
 8005c1a:	1c43      	adds	r3, r0, #1
 8005c1c:	d102      	bne.n	8005c24 <_fstat_r+0x1c>
 8005c1e:	682b      	ldr	r3, [r5, #0]
 8005c20:	b103      	cbz	r3, 8005c24 <_fstat_r+0x1c>
 8005c22:	6023      	str	r3, [r4, #0]
 8005c24:	bd38      	pop	{r3, r4, r5, pc}
 8005c26:	bf00      	nop
 8005c28:	20000268 	.word	0x20000268

08005c2c <_isatty_r>:
 8005c2c:	b538      	push	{r3, r4, r5, lr}
 8005c2e:	4d06      	ldr	r5, [pc, #24]	@ (8005c48 <_isatty_r+0x1c>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	4604      	mov	r4, r0
 8005c34:	4608      	mov	r0, r1
 8005c36:	602b      	str	r3, [r5, #0]
 8005c38:	f7fb f831 	bl	8000c9e <_isatty>
 8005c3c:	1c43      	adds	r3, r0, #1
 8005c3e:	d102      	bne.n	8005c46 <_isatty_r+0x1a>
 8005c40:	682b      	ldr	r3, [r5, #0]
 8005c42:	b103      	cbz	r3, 8005c46 <_isatty_r+0x1a>
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	bd38      	pop	{r3, r4, r5, pc}
 8005c48:	20000268 	.word	0x20000268

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	4d06      	ldr	r5, [pc, #24]	@ (8005c68 <_sbrk_r+0x1c>)
 8005c50:	2300      	movs	r3, #0
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fb f83a 	bl	8000cd0 <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000268 	.word	0x20000268

08005c6c <_init>:
 8005c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c6e:	bf00      	nop
 8005c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c72:	bc08      	pop	{r3}
 8005c74:	469e      	mov	lr, r3
 8005c76:	4770      	bx	lr

08005c78 <_fini>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr
